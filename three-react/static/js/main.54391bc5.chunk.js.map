{"version":3,"sources":["rendererWebGL/data.ts","rendererWebGL/ducks.ts","rendererWebGL/mesh/Mesh.tsx","rendererWebGL/geometry/CuboidGeometry.ts","rendererWebGL/geometry/PipeGeometry.ts","rendererWebGL/geometry/Buffer.ts","rendererWebGL/geometry/ExtrusionGeometry.ts","rendererWebGL/mesh/ExtrusionMesh.tsx","rendererWebGL/mesh/CuboidMesh.tsx","rendererWebGL/mesh/PipeMesh.tsx","rendererWebGL/mesh/AnimatedGroup.tsx","rendererWebGL/mesh/index.tsx","rendererWebGL/scene/Camera.tsx","rendererWebGL/scene/Light.tsx","rendererWebGL/scene/index.ts","rendererWebGL/scene/Scene.tsx","rendererWebGL/material/envmap.ts","rendererWebGL/material/Glass.ts","rendererWebGL/material/Metal.ts","rendererWebGL/material/index.ts","App.tsx","index.tsx"],"names":["points","left","leftHoles","door","transom","right","pointsToPolygon","z","map","arr","scene","junctionAngles","defaultCamera","position","lookAt","positions","offset","children","id","origin","rotation","material","gazeSize","uvScale","operable","type","frontFace","frontFaceHoles","hole","backFace","backFaceHoles","smoothVertices","lengthX","lengthY","lengthZ","pd","ph","radius","GMeshByID","Map","defaultRendererState","counter","gazeDirection","undefined","gazeTarget","selected","selectionFilter","orthographic","showJunctionAngles","showHardware","animateDoors","doFocusObject","select","payload","doModifyDisplay","fromVec3","vec3","x","y","applyFocusObject","state","action","get","mesh","updateMatrixWorld","Vector3","getWorldDirection","multiplyScalar","box3","Box3","setFromObject","getCenter","gazeByMesh","applyModifyDisplay","applySetSelectionFilter","Mesh","canSelect","onFocusObject","visible","geometry","useState","hover","setHover","curMaterial","standard","ref","useUpdate","set","useEffect","current","curRotation","update","openingAngle","Math","PI","angularVelocity","easing","TWEEN","Easing","Quadratic","InOut","resetToClosed","Tween","to","max","abs","onUpdate","closedToOpenIn","openInToClosed","closedToOpenOut","openOutToClosed","chain","start","stop","remove","onClick","e","stopPropagation","onPointerOver","onPointerOut","CuboidGeometry","props","className","BoxBufferGeometry","PipeGeometry","pointsVec3","point","CatmullRomCurve3","TubeBufferGeometry","Float32Buffer","length","elemSize","buffer","nextElemIndex","this","Array","bufferIndex","i","elemIndex","slice","srcElemIndex","addElem","getElem","Float32BufferAttribute","bufferName","console","error","Error","Vec2Buffer","Vector2","Vec3Buffer","ExtrusionGeometry","vertices","uvCoords","triangles","numFaceVertices","countFaceVertices","log","frontFaceTriangles","triangulateFace","backFaceTriangles","numVertices","backOffset","numTriangles","addFace","nextVertexIndex","addSideFacesForPolygon","forEach","ensureFilled","setAttribute","asAttribute","setIndex","asBuffer","computeVertexNormals","face","holes","polygon","toContour","holePoints","ShapeUtils","triangulateShape","vertex","add","triangleIndices","triangleIndexOffset","reverseTriangles","addVertexAndUV","tri","v0","v1","v2","sourceIndex","sharedIndex","share","addCopyOf","startVertexIndex","isHole","frontOffset","prevBackIndex","prevFrontIndex","firstBackIndex","nextFreeElemIndex","firstFrontIndex","leftIndex","rightIndex","shareLeft","backLeft","addOrShareSideVertex","frontLeft","shareRight","backRight","frontRight","BufferGeometry","ExtrusionMesh","meshProps","useMemo","CuboidMesh","PipeMesh","AnimatedGroup","useSpring","smoothedOrigin","smoothedRotation","group","BuildMeshes","elements","materialLibrary","isSelected","doBuild","MeshByType","key","startsWith","Camera","useRef","useThree","gl","setDefaultCamera","cameraControls","setCameraControls","CameraControls","install","THREE","domElement","startLookAt","pos","startPosition","setLookAt","w","h","d","dist","getDistanceToFit","tx","ty","tz","dx","dy","dz","addScaledVector","useFrame","delta","near","far","fov","Light","intensity","connect","rendererState","dispatch","objectID","cameraProps","upAxis","groups","rotationY","offX","offY","offZ","MathUtils","DEG2RAD","applyAxisAngle","BuildScene","envMap","setPath","load","side","DoubleSide","fullGlass","metalness","roughness","reflectivity","clearcoat","clearcoatRoughness","transparent","color","opacity","fastGlass","shininess","fullMetal","fastMetal","fullMatLibrary","glass","metal","fastMatLibrary","onShowJunctionAngles","onShowHardware","onAnimateDoors","onSetSelectionFilter","filter","hdMaterial","setHdMaterial","style","zIndex","disabled","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54391bc5.chunk.js","sourcesContent":["import { SceneTree } from \"./ducks\";\r\n\r\nconst points = {\r\n    left:     [ [0, 0], [800, 0], [800, 2100], [0, 2100] ],\r\n    leftHoles: [ [[225,1800],[225,1750],[275,1750],[275,1800]] ],\r\n    door:     [ [0, 5], [700, 5], [700, 1800], [0,  1800] ],\r\n    transom:  [ [0, 0], [700, 0], [700,  295], [0,   295] ],\r\n    right:    [ [0, 0], [300, 0], [300,  300], [600, 300], [600, 2100], [0, 2100] ],\r\n};\r\n\r\nfunction pointsToPolygon(points : number[][], z : number) : number[][] {\r\n    return points.map(arr => [arr[0], arr[1], z]);\r\n}\r\n\r\nconst z = 5;\r\nconst ph = 128; // pipe height\r\nconst pd = 64; // pipe depth\r\n\r\nexport const scene : SceneTree = {\r\n    junctionAngles: [ 0, 90, 90, 0 ],\r\n    defaultCamera : {\r\n        position: [2600, 1050, 750],\r\n        lookAt: [800, 1050, 0]\r\n    },\r\n    positions: [\r\n        {\r\n            position: 1,\r\n            offset: [800 - z, 0, -z-1],\r\n            children: [\r\n                {\r\n                    id: \"panel/1\",\r\n                    origin: [0, 0, 0],\r\n                    rotation: [0, 0, 0],\r\n                    material: \"glass\",\r\n                    gazeSize: [800, 2100, z*2],\r\n                    uvScale: 256,\r\n                    operable: false,\r\n                    type: \"extrusion\",\r\n                    frontFace: pointsToPolygon(points.left, z),\r\n                    frontFaceHoles: points.leftHoles.map(hole => pointsToPolygon(hole, z)),\r\n                    backFace: pointsToPolygon(points.left, -z),\r\n                    backFaceHoles: points.leftHoles.map(hole => pointsToPolygon(hole, -z)),\r\n                    smoothVertices: [],\r\n\r\n                    children: [\r\n                        {\r\n                            id: \"feature/1\",\r\n                            origin: [800 - 32 + z, 500, 0],\r\n                            rotation: [0, 0, 0],\r\n                            material: \"metal\",\r\n                            gazeSize: [64*4, 128*4, z*4],\r\n                            uvScale: 16,\r\n                            operable: false,\r\n                            type: \"cuboid\",\r\n                            lengthX: 64,\r\n                            lengthY: 128,\r\n                            lengthZ: z*4,\r\n                        },\r\n                        {\r\n                            id: \"feature/2\",\r\n                            origin: [800 - 32 + z, 1300, 0],\r\n                            rotation: [0, 0, 0],\r\n                            material: \"metal\",\r\n                            gazeSize: [64*4, 128*4, z*4],\r\n                            uvScale: 16,\r\n                            operable: false,\r\n                            type: \"cuboid\",\r\n                            lengthX: 64,\r\n                            lengthY: 128,\r\n                            lengthZ: z*4,\r\n                        },\r\n                        {\r\n                            id: \"feature/3\",\r\n                            origin: [800 - 32 + z, 1950, 0],\r\n                            rotation: [0, 0, 0],\r\n                            material: \"metal\",\r\n                            gazeSize: [64*4, 64*4, z*4],\r\n                            uvScale: 16,\r\n                            operable: false,\r\n                            type: \"cuboid\",\r\n                            lengthX: 64,\r\n                            lengthY: 64,\r\n                            lengthZ: z*4,\r\n                        }\r\n                    ]\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            position: 2,\r\n            offset: [700 + z + 1, 0, z],\r\n            children: [\r\n                {\r\n                    type: \"extrusion\",\r\n                    id: \"panel/2\",\r\n                    frontFace: pointsToPolygon(points.door, z),\r\n                    frontFaceHoles: [],\r\n                    backFace: pointsToPolygon(points.door, -z),\r\n                    backFaceHoles: [],\r\n                    smoothVertices: [],\r\n                    uvScale: 256,\r\n                    operable: true,\r\n                    origin: [0, 0, 0],\r\n                    rotation: [0, 0, 0],\r\n                    gazeSize: [z*2, 1800, 700],\r\n                    material: 'glass',\r\n\r\n                    children: [\r\n                        {\r\n                            id: \"feature/6\",\r\n                            origin: [600, 1000, 0],\r\n                            rotation: [0, 0, 0],\r\n                            material: \"metal\",\r\n                            gazeSize: [pd*4, ph*8, 12*4],\r\n                            uvScale: 16,\r\n                            operable: false,\r\n                            type: \"pipe\",\r\n                            radius: 12,\r\n                            points: [\r\n                                [0, -ph, 0],\r\n                                [0, -ph, pd],\r\n                                [0, -ph/2, pd],\r\n                                [0, 0, pd],\r\n                                [0, ph/2, pd],\r\n                                [0, ph, pd],\r\n                                [0, ph, 0],\r\n                            ]\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"extrusion\",\r\n                    id: \"panel/3\",\r\n                    frontFace: pointsToPolygon(points.transom, z),\r\n                    frontFaceHoles: [],\r\n                    backFace: pointsToPolygon(points.transom, -z),\r\n                    backFaceHoles: [],\r\n                    smoothVertices: [],\r\n                    uvScale: 256,\r\n                    operable: false,\r\n                    origin: [0, 1800+5, 0],\r\n                    rotation: [0, 0, 0],\r\n                    gazeSize: [z*2, 300, 700],\r\n                    material: 'glass',\r\n                    children: [\r\n                        {\r\n                            id: \"feature/4\",\r\n                            origin: [32+z-1, 145, 0],\r\n                            rotation: [0, 0, 0],\r\n                            material: \"metal\",\r\n                            gazeSize: [64*4, 64*4, z*4],\r\n                            uvScale: 16,\r\n                            operable: false,\r\n                            type: \"cuboid\",\r\n                            lengthX: 64,\r\n                            lengthY: 64,\r\n                            lengthZ: z*4,\r\n                        },\r\n                        {\r\n                            id: \"feature/5\",\r\n                            origin: [700-32-z+1, 145, 0],\r\n                            rotation: [0, 0, 0],\r\n                            material: \"metal\",\r\n                            gazeSize: [64*4, 64*4, z*4],\r\n                            uvScale: 16,\r\n                            operable: false,\r\n                            type: \"cuboid\",\r\n                            lengthX: 64,\r\n                            lengthY: 64,\r\n                            lengthZ: z*4,\r\n                        },\r\n                    ]\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            position: 3,\r\n            offset: [600, 0, z],\r\n            children: [\r\n                {\r\n                    type: \"extrusion\",\r\n                    id: \"panel/4\",\r\n                    frontFace: pointsToPolygon(points.right, z),\r\n                    frontFaceHoles: [],\r\n                    backFace: pointsToPolygon(points.right, -z),\r\n                    backFaceHoles: [],\r\n                    smoothVertices: [],\r\n                    uvScale: 256,\r\n                    operable: false,\r\n                    origin: [0, 0, 0],\r\n                    rotation: [0, 0, 0],\r\n                    gazeSize: [600, 2100, z*2],\r\n                    material: 'glass',\r\n                    children: [\r\n                        {\r\n                            id: \"feature/7\",\r\n                            origin: [32 - z, 1950, 0],\r\n                            rotation: [0, 0, 0],\r\n                            material: \"metal\",\r\n                            gazeSize: [64*4, 64*4, z*4],\r\n                            uvScale: 16,\r\n                            operable: false,\r\n                            type: \"cuboid\",\r\n                            lengthX: 64,\r\n                            lengthY: 64,\r\n                            lengthZ: z*4,\r\n                        }\r\n                    ]\r\n                },\r\n            ],\r\n        }\r\n    ]\r\n};\r\n","import {Box3, Vector3} from \"three\";\r\n\r\nconst FOCUS_OBJECT = 'FOCUS_OBJECT';\r\nconst MODIFY_DISPLAY = 'MODIFY_DISPLAY';\r\nconst SET_SELECTION_FILTER = 'SET_SELECTION_FILTER';\r\n\r\n// TODO can we avoid this global?\r\nexport const GMeshByID = new Map();\r\n\r\ntype RendererState = {\r\n    counter : number, // TODO SM avoidable? used to trigger side effects if the user selects the same obj twice\r\n    gazeDirection ?: number[],\r\n    gazeTarget ?: number[],\r\n    gazeSize ?: number[],\r\n    selected : string,\r\n    selectionFilter : string,\r\n    orthographic : boolean,\r\n\r\n    showJunctionAngles : boolean,\r\n    showHardware : boolean,\r\n    animateDoors : boolean,\r\n}\r\n\r\ntype RendererAction = {\r\n    type : string,\r\n    payload : {\r\n        id ?: string,\r\n        select ?: boolean,\r\n        orthographic ?: boolean,\r\n        showJunctionAngles ?: boolean,\r\n        selectionFilter ?: string,\r\n    }\r\n}\r\n\r\nconst defaultRendererState : RendererState = {\r\n    counter : 0,\r\n    gazeDirection : undefined,\r\n    gazeTarget : undefined,\r\n    gazeSize : undefined,\r\n    selected : \"\",\r\n    selectionFilter : \"\",\r\n    orthographic: false,\r\n\r\n    showJunctionAngles : true,\r\n    showHardware : true,\r\n    animateDoors : false,\r\n};\r\n\r\nexport type SceneElement = {\r\n    id: string,\r\n    origin: number[],\r\n    rotation: number[],\r\n    material: string,\r\n    gazeSize: number[],\r\n    uvScale: number,\r\n    operable: boolean,\r\n    type: string,\r\n\r\n    frontFace ?: number[][],\r\n    frontFaceHoles ?: number[][][],\r\n    backFace ?: number[][],\r\n    backFaceHoles ?: number[][][],\r\n    smoothVertices ?: number[],\r\n\r\n    lengthX ?: number,\r\n    lengthY ?: number,\r\n    lengthZ ?: number,\r\n\r\n    radius ?: number,\r\n    points ?: number[][]\r\n\r\n    children ?: SceneElement[]\r\n}\r\n\r\nexport type ScenePosition = {\r\n    position: number,\r\n    offset: number[],\r\n    children: SceneElement[]\r\n}\r\n\r\nexport type SceneTree = {\r\n    junctionAngles : number[],\r\n    defaultCamera : {\r\n        position: number[],\r\n        lookAt: number[]\r\n    },\r\n    positions: ScenePosition[]\r\n}\r\n\r\nexport function doFocusObject(id : string, select : boolean) : RendererAction {\r\n    return {\r\n        type: FOCUS_OBJECT,\r\n        payload: { id, select }\r\n    };\r\n}\r\n\r\nexport function doModifyDisplay(payload : {\r\n    showJunctionAngles ?: boolean,\r\n    showHardware ?: boolean,\r\n    animateDoors ?: boolean\r\n}) : RendererAction {\r\n    return {\r\n        type: MODIFY_DISPLAY,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function doSetSelectionFilter(selectionFilter : string) : RendererAction {\r\n    return {\r\n        type: SET_SELECTION_FILTER,\r\n        payload: { selectionFilter }\r\n    }\r\n}\r\n\r\n// TODO SM Move to a util file\r\nfunction fromVec3(vec3 : Vector3) : number[] {\r\n    return [vec3.x, vec3.y, vec3.z];\r\n}\r\n\r\nfunction gazeByMesh(id : string) : (number[]|undefined)[] {\r\n    // TODO SM Refactor - cleanup\r\n    if (id !== \"\") {\r\n        const { mesh, gazeSize } = GMeshByID.get(id);\r\n        if (mesh) {\r\n            mesh.updateMatrixWorld();\r\n            const vec3 = new Vector3(0, 0, 0);\r\n            mesh.getWorldDirection(vec3).multiplyScalar(-1); // we want -Z direction, not +Z\r\n            const box3 = new Box3();\r\n            box3.setFromObject(mesh);\r\n            const gazeDirection = fromVec3(vec3);\r\n            box3.getCenter(vec3);\r\n            const gazeTarget = fromVec3(vec3);\r\n            return [ gazeDirection, gazeTarget, gazeSize ];\r\n        }\r\n    }\r\n    return [ undefined, undefined ];\r\n}\r\n\r\nfunction applyFocusObject(state : RendererState, action : RendererAction) : RendererState {\r\n    const { id, select } = action.payload;\r\n    const [ gazeDirection, gazeTarget, gazeSize ] = gazeByMesh(id!);\r\n    const selected = select ? id! : state.selected;\r\n    const counter = (state.counter + 1) % 100;\r\n    return { ...state, counter, gazeDirection, gazeTarget, gazeSize, selected };\r\n}\r\n\r\nfunction applyModifyDisplay(state : RendererState, action : RendererAction) : RendererState {\r\n    return { ...state, ...action.payload };\r\n}\r\n\r\nfunction applySetSelectionFilter(state : RendererState, action : RendererAction) : RendererState {\r\n    return { ...state, ...action.payload };\r\n}\r\n\r\nexport function rendererReducer(state = defaultRendererState, action : RendererAction) : RendererState {\r\n    switch (action.type) {\r\n        case FOCUS_OBJECT:\r\n            return applyFocusObject(state, action);\r\n        case MODIFY_DISPLAY:\r\n            return applyModifyDisplay(state, action);\r\n        case SET_SELECTION_FILTER:\r\n            return applySetSelectionFilter(state, action);\r\n        default: return state;\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Geometry, BufferGeometry, Object3D} from \"three\";\r\nimport { PointerEvent } from \"react-three-fiber/canvas\";\r\nimport { MaterialGroup } from \"../material\";\r\nimport { animated } from \"react-spring/three\";\r\nimport { useUpdate} from \"react-three-fiber\";\r\nimport { GMeshByID } from \"../ducks\";\r\nimport TWEEN from \"@tweenjs/tween.js\";\r\n\r\nexport type CanSelectObjectFn = (id : string) => boolean;\r\nexport type IsObjectSelectedFn = (id : string) => boolean;\r\nexport type FocusObjectFn = (id : string, select : boolean) => void;\r\n\r\nexport type MeshProps = {\r\n    id : string,\r\n    material : MaterialGroup,\r\n\r\n    canSelect : boolean,\r\n    selected : boolean,\r\n    onFocusObject : FocusObjectFn,\r\n    gazeSize : number[],\r\n\r\n    operable : boolean,\r\n    animateDoors : boolean,\r\n\r\n    origin : number[],\r\n    rotation : number[],\r\n    visible : boolean,\r\n};\r\n\r\nexport const Mesh : React.FC<MeshProps & {geometry : Geometry | BufferGeometry}> = ({\r\n    id, material,\r\n    canSelect, selected, onFocusObject,\r\n    gazeSize,\r\n    operable, animateDoors,\r\n    origin, rotation, visible,\r\n    geometry,\r\n    children,\r\n}) => {\r\n    const [hover, setHover] = useState(false);\r\n\r\n    const onClick = (e : PointerEvent) => {\r\n        e.stopPropagation();\r\n        if (canSelect) {\r\n            onFocusObject(selected ? '' : id, true);\r\n        }\r\n    };\r\n\r\n    const onPointerOver = (e : PointerEvent) => {\r\n        e.stopPropagation();\r\n        if (canSelect && !hover) {\r\n            setHover(true);\r\n        }\r\n    };\r\n\r\n    const onPointerOut = () => {\r\n        if (hover) {\r\n            setHover(false);\r\n        }\r\n    };\r\n\r\n    const curMaterial = selected ? material.selected : hover ? material.hover : material.standard;\r\n\r\n    const ref = useUpdate(mesh => {\r\n        GMeshByID.set(id, { mesh, gazeSize });\r\n    }, [id, gazeSize]);\r\n\r\n    useEffect(() => {\r\n        if (ref.current && operable && animateDoors) {\r\n            const mesh : Object3D = ref.current;\r\n            const curRotation = { y: mesh.rotation.y };\r\n            const update = () => {\r\n                mesh.rotation.y = curRotation.y;\r\n            };\r\n\r\n            const duration = 2000;\r\n            const openingAngle = Math.PI * 0.45;\r\n            const angularVelocity = openingAngle / duration;\r\n            const easing = TWEEN.Easing.Quadratic.InOut;\r\n\r\n            const resetToClosed = new TWEEN.Tween(curRotation)\r\n                .to({y: 0}, Math.max(0.01, Math.abs(curRotation.y) / angularVelocity))\r\n                .onUpdate(update);\r\n            const closedToOpenIn = new TWEEN.Tween(curRotation)\r\n                .to({y: openingAngle}, duration)\r\n                .easing(easing)\r\n                .onUpdate(update);\r\n            const openInToClosed = new TWEEN.Tween(curRotation)\r\n                .to({y: 0}, duration)\r\n                .easing(easing)\r\n                .onUpdate(update);\r\n            const closedToOpenOut = new TWEEN.Tween(curRotation)\r\n                .to({y: -openingAngle}, duration)\r\n                .easing(easing)\r\n                .onUpdate(update);\r\n            const openOutToClosed = new TWEEN.Tween(curRotation)\r\n                .to({y: 0}, duration)\r\n                .easing(easing)\r\n                .onUpdate(update);\r\n\r\n            resetToClosed.chain(closedToOpenIn);\r\n            closedToOpenIn.chain(openInToClosed);\r\n            openInToClosed.chain(closedToOpenOut);\r\n            closedToOpenOut.chain(openOutToClosed);\r\n            openOutToClosed.chain(closedToOpenIn);\r\n\r\n            resetToClosed.start();\r\n\r\n            return () => {\r\n                openOutToClosed.stop();\r\n                closedToOpenOut.stop();\r\n                openInToClosed.stop();\r\n                closedToOpenIn.stop();\r\n                resetToClosed.stop();\r\n\r\n                TWEEN.remove(openOutToClosed);\r\n                TWEEN.remove(closedToOpenOut);\r\n                TWEEN.remove(openInToClosed);\r\n                TWEEN.remove(closedToOpenIn);\r\n                TWEEN.remove(resetToClosed);\r\n            }\r\n        }\r\n    }, [ref, operable, animateDoors]);\r\n\r\n\r\n    return <animated.mesh\r\n            ref={ref}\r\n            onClick={onClick}\r\n            position={origin}\r\n            onPointerOver={onPointerOver}\r\n            onPointerOut={onPointerOut}\r\n            material={curMaterial}\r\n            rotation={rotation}\r\n            visible={visible}\r\n            geometry={geometry}>\r\n        {children}\r\n    </animated.mesh>;\r\n};\r\n","import { BoxBufferGeometry } from \"three\";\r\n\r\nexport type CuboidGeometryProps = {\r\n    lengthX : number,\r\n    lengthY : number,\r\n    lengthZ : number,\r\n}\r\n\r\nexport class CuboidGeometry extends BoxBufferGeometry {\r\n    private readonly className = \"CuboidGeometry\";\r\n\r\n    // TODO SM custom shape to handle mitred cuboids\r\n    constructor(props : CuboidGeometryProps) {\r\n        super(props.lengthX, props.lengthY, props.lengthZ, 1, 1, 1);\r\n    }\r\n}\r\n","import { CatmullRomCurve3, TubeBufferGeometry, Vector3 } from \"three\";\r\n\r\nexport type PipeGeometryProps = {\r\n    points : number[][],\r\n    radius : number,\r\n}\r\n\r\nexport class PipeGeometry extends TubeBufferGeometry {\r\n    // TODO SM build a custom curve subclass for supporting straight line segments connected via curves\r\n    // TODO SM custom shape to handle varying radius\r\n    constructor(props : PipeGeometryProps) {\r\n        const { points, radius } = props;\r\n        const pointsVec3 = points.map(point => new Vector3(point[0], point[1], point[2]));\r\n        super(new CatmullRomCurve3(pointsVec3, false), 64, radius, 8, false);\r\n    }\r\n}\r\n","import { Vector2, Vector3, Float32BufferAttribute } from \"three\";\r\n\r\nclass Float32Buffer {\r\n    private readonly buffer: number[];\r\n    private nextElemIndex : number;\r\n\r\n    constructor(public readonly length : number,\r\n                private readonly elemSize : number) {\r\n        this.buffer = Array(elemSize * length);\r\n        this.nextElemIndex = 0;\r\n    }\r\n\r\n    addElem(...elem : number[]) : number {\r\n        const bufferIndex = this.nextElemIndex * this.elemSize;\r\n        for (let i=0; i<this.elemSize; i++) {\r\n            this.buffer[bufferIndex+i] = elem[i];\r\n        }\r\n        return this.nextElemIndex++;\r\n    }\r\n\r\n    getElem(elemIndex : number) : number[] {\r\n        const bufferIndex = elemIndex * this.elemSize;\r\n        return this.buffer.slice(bufferIndex, bufferIndex + this.elemSize);\r\n    }\r\n\r\n    addCopyOf(srcElemIndex : number) : number {\r\n        return this.addElem(...this.getElem(srcElemIndex));\r\n    }\r\n\r\n    asAttribute() : Float32BufferAttribute {\r\n        return new Float32BufferAttribute(this.buffer, this.elemSize);\r\n    }\r\n\r\n    asBuffer() : number[] {\r\n        return this.buffer;\r\n    }\r\n\r\n    nextFreeElemIndex() : number {\r\n        return this.nextElemIndex;\r\n    }\r\n\r\n    ensureFilled(bufferName : string) : void {\r\n        if (this.nextElemIndex !== this.length) {\r\n            console.error(this);\r\n            throw new Error(`${bufferName} was not filled. Expected ${this.length}, Actual ${this.nextElemIndex}.`);\r\n        }\r\n    }\r\n}\r\n\r\n// used for uv (texture) arrays\r\nexport class Vec2Buffer extends Float32Buffer {\r\n    constructor(length : number) {\r\n        super(length, 2);\r\n    }\r\n\r\n    get(elemIndex : number) : Vector2 {\r\n        const [x, y] = this.getElem(elemIndex);\r\n        return new Vector2(x, y);\r\n    }\r\n\r\n    add(x : number, y : number) : number {\r\n        return this.addElem(x, y);\r\n    }\r\n}\r\n\r\n// used for position, normal & index arrays\r\nexport class Vec3Buffer extends Float32Buffer {\r\n    constructor(length : number) {\r\n        super(length, 3);\r\n    }\r\n\r\n    get(elemIndex : number) : Vector3 {\r\n        const [x, y, z] = this.getElem(elemIndex);\r\n        return new Vector3(x, y, z);\r\n    }\r\n\r\n    add(x : number, y : number, z : number) : number {\r\n        return this.addElem(x, y, z);\r\n    }\r\n}\r\n","import { BufferGeometry, ShapeUtils, Vec2, Vector2 } from \"three\";\r\nimport { Vec2Buffer, Vec3Buffer } from './Buffer';\r\n\r\ntype Polygon = number[][];\r\n\r\nexport type ExtrusionGeometryProps = {\r\n    frontFace : Polygon,\r\n    frontFaceHoles : Polygon[],\r\n    backFace : Polygon,\r\n    backFaceHoles : Polygon[],\r\n    smoothVertices : number[],\r\n    uvScale : number\r\n};\r\n\r\nexport class ExtrusionGeometry extends BufferGeometry {\r\n    private readonly className : string = \"ExtrusionGeometry\";\r\n\r\n    private readonly vertices : Vec3Buffer;\r\n    private readonly uvCoords : Vec2Buffer;\r\n    private readonly triangles : Vec3Buffer;\r\n\r\n    constructor(props : ExtrusionGeometryProps) {\r\n        super();\r\n\r\n        const { frontFace, frontFaceHoles, backFace, backFaceHoles, smoothVertices, uvScale } = props;\r\n\r\n        const numFaceVertices = this.countFaceVertices(frontFace, frontFaceHoles);\r\n        if (numFaceVertices !== this.countFaceVertices(backFace, backFaceHoles)) {\r\n            console.log(this.className, frontFace, frontFaceHoles, backFace, backFaceHoles);\r\n            throw new Error('Mismatching Front and Back faces in ' + this.className);\r\n        }\r\n\r\n        // using the earcut (https://github.com/mapbox/earcut) algorithm to triangulate the polygons.\r\n        // It is a fast *approximate* triangulation algorithm, which avoids producing any new vertices.\r\n        // If a more accurate triangulation is needed, we should switch to something like libtess,\r\n        //      but we will need to handle new vertices being added by the triangulator.\r\n        // NOTE: Any new vertices would be added to the front & back faces, but not to the side faces.\r\n        const frontFaceTriangles = this.triangulateFace(frontFace, frontFaceHoles);\r\n        const backFaceTriangles = this.triangulateFace(backFace, backFaceHoles);\r\n\r\n        // The Extrusion 3D Geometry consists of three parts:\r\n        //      front face\r\n        //      back face\r\n        //      side-faces (connecting the front and back faces via quads)\r\n        //\r\n        // We cannot use material.flatShading as it draws all faces faceted, but we want some faces to be drawn smooth.\r\n        // We cannot share vertices between the front-face and the side-face, or between the back-face and the side-face\r\n        //      as the vertex normals and UV coords will be different.\r\n        // We should share vertices between two side-face-quads if and only if the edge connecting them is smoothed.\r\n        // We should always share vertices within a single side-face-quad as the quad should always be drawn smoothed.\r\n        //\r\n        // There are numFaceVertices side-face quads.\r\n        // Each side-face quad has 4 vertices.\r\n        // However, if a face vertex is smoothed, the two side-face quads adjacent to the vertex would share 2 vertices,\r\n        //         reducing the total number of vertices by 2.\r\n        //\r\n        // Therefore, we have the following vertices:\r\n        //      front face: numFaceVertices\r\n        //      back face : numFaceVertices\r\n        //      side-faces: numSideFaces * 4 - numSmoothedVertices * 2 // numSideFaces === numFaceVertices\r\n        const numVertices = numFaceVertices + numFaceVertices + (numFaceVertices * 4) - (smoothVertices.length * 2);\r\n        const frontOffset = 0;\r\n        const backOffset = numFaceVertices;\r\n        this.vertices = new Vec3Buffer(numVertices);\r\n        this.uvCoords = new Vec2Buffer(numVertices);\r\n\r\n        // Each side-face quad has exactly two triangles\r\n        const numTriangles = frontFaceTriangles.length + backFaceTriangles.length + (numFaceVertices * 2);\r\n        this.triangles = new Vec3Buffer(numTriangles);\r\n\r\n        this.addFace(frontFace, frontFaceHoles, frontFaceTriangles, frontOffset, uvScale, false);\r\n        this.addFace(backFace, backFaceHoles, backFaceTriangles, backOffset, uvScale, true);\r\n\r\n        // add side faces\r\n        let nextVertexIndex = 0;\r\n        nextVertexIndex = this.addSideFacesForPolygon(nextVertexIndex, frontFace.length, false, smoothVertices,\r\n            frontOffset, backOffset);\r\n        frontFaceHoles.forEach(hole => {\r\n            nextVertexIndex = this.addSideFacesForPolygon(nextVertexIndex, hole.length, true, smoothVertices,\r\n                frontOffset, backOffset);\r\n        });\r\n\r\n        this.vertices.ensureFilled(this.className + '.vertices');\r\n        this.uvCoords.ensureFilled(this.className + '.uvCoords');\r\n        this.triangles.ensureFilled(this.className + '.triangles');\r\n\r\n        this.setAttribute('position', this.vertices.asAttribute());\r\n        this.setAttribute('uv', this.uvCoords.asAttribute());\r\n        this.setIndex(this.triangles.asBuffer());\r\n        this.computeVertexNormals();\r\n    }\r\n\r\n    protected countFaceVertices(face : Polygon, holes : Polygon[]) : number {\r\n        let vertices = face.length;\r\n        for (let i=0; i<holes.length; i++) {\r\n            vertices += holes[i].length;\r\n        }\r\n        return vertices;\r\n    }\r\n\r\n    protected toContour(polygon : Polygon) : Vec2[] {\r\n        return polygon.map(point => new Vector2(point[0], point[1]));\r\n    }\r\n\r\n    protected triangulateFace(face : Polygon, holes : Polygon[]) : number[][] {\r\n        // TODO use EarCut directly, to handle 3D points\r\n        const points = this.toContour(face);\r\n        const holePoints = holes.map(hole => this.toContour(hole));\r\n        return ShapeUtils.triangulateShape(points, holePoints);\r\n    }\r\n\r\n    private addVertexAndUV(vertex : number[], uvScale : number) : number {\r\n        this.uvCoords.add(vertex[0] / uvScale, vertex[1] / uvScale);\r\n        return this.vertices.add(vertex[0], vertex[1], vertex[2]);\r\n    }\r\n\r\n    private addFace(face : Polygon, holes : Polygon[], triangleIndices : number[][], triangleIndexOffset : number,\r\n                    uvScale : number, reverseTriangles : boolean) : void {\r\n        face.forEach(vertex => this.addVertexAndUV(vertex, uvScale));\r\n        holes.forEach(hole => hole.forEach(vertex => this.addVertexAndUV(vertex, uvScale)));\r\n\r\n        const offset = triangleIndexOffset;\r\n        triangleIndices.forEach(tri => {\r\n            const v0 = tri[0] + offset;\r\n            const v1 = tri[reverseTriangles ? 2 : 1] + offset;\r\n            const v2 = tri[reverseTriangles ? 1 : 2] + offset;\r\n\r\n            this.triangles.add(v0, v1, v2);\r\n        });\r\n    }\r\n\r\n    private addOrShareSideVertex(sourceIndex : number, sharedIndex : number, share : boolean) : number {\r\n        if (share) {\r\n            return sharedIndex;\r\n        }\r\n\r\n        this.uvCoords.add(0, 0); // don't texture side faces\r\n        return this.vertices.addCopyOf(sourceIndex);\r\n    }\r\n\r\n    private addSideFacesForPolygon(startVertexIndex : number, length : number, isHole : boolean,\r\n                                   smoothVertices : number[], frontOffset : number, backOffset : number) : number {\r\n        let prevBackIndex = -1;\r\n        let prevFrontIndex = -1;\r\n        const firstBackIndex = this.vertices.nextFreeElemIndex();\r\n        const firstFrontIndex = firstBackIndex + 1;\r\n\r\n        for (let left=0; left<length; left++) {\r\n            const right = (left + 1) % length;\r\n\r\n            const leftIndex = startVertexIndex + left;\r\n            const rightIndex = startVertexIndex + right;\r\n\r\n            // if face is smoothed at current vertex, share the point with previous side-face\r\n            const shareLeft = left > 0 && leftIndex in smoothVertices;\r\n            const backLeft = this.addOrShareSideVertex(leftIndex + backOffset, prevBackIndex, shareLeft);\r\n            const frontLeft = this.addOrShareSideVertex(leftIndex + frontOffset, prevFrontIndex, shareLeft);\r\n\r\n            // only share right if the very first vertex is smoothed and this is the very last side-face\r\n            const shareRight = right === 0 && rightIndex in smoothVertices;\r\n            const backRight = this.addOrShareSideVertex(rightIndex + backOffset, firstBackIndex, shareRight);\r\n            const frontRight = this.addOrShareSideVertex(rightIndex + frontOffset, firstFrontIndex, shareRight);\r\n\r\n            // ---- Top-Down view ----\r\n            //\r\n            //      front face\r\n            //     FL------FR\r\n            //     | .     |\r\n            //    |    .  |\r\n            //   BL------BR\r\n            //  back face\r\n            //\r\n            // triangles: [BR, FL, BL], [FL, BR, FR]\r\n            // for-hole faces, the normal needs to be reversed, thus the triangles are reversed\r\n            //           [BR, FL, FR], [FL, BR, BL]\r\n\r\n            // noinspection JSSuspiciousNameCombination\r\n            this.triangles.add(backRight, frontLeft, isHole ? frontRight : backLeft);\r\n            // noinspection JSSuspiciousNameCombination\r\n            this.triangles.add(frontLeft, backRight, isHole ? backLeft : frontRight);\r\n\r\n            prevBackIndex = backRight;\r\n            prevFrontIndex = frontRight;\r\n        }\r\n\r\n        return startVertexIndex + length;\r\n    }\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { Mesh, MeshProps } from \"./Mesh\";\r\nimport { ExtrusionGeometry, ExtrusionGeometryProps } from \"../geometry\";\r\n\r\ntype ExtrusionMeshProps = MeshProps & ExtrusionGeometryProps;\r\n\r\nexport const ExtrusionMesh : React.FC<ExtrusionMeshProps> = ({\r\n    frontFace, frontFaceHoles,\r\n    backFace, backFaceHoles,\r\n    smoothVertices, uvScale,\r\n    ...meshProps\r\n}) => {\r\n    const geometry = useMemo(\r\n        () => new ExtrusionGeometry({\r\n            frontFace, frontFaceHoles, backFace, backFaceHoles, smoothVertices, uvScale\r\n        }),\r\n        [frontFace, frontFaceHoles, backFace, backFaceHoles, smoothVertices, uvScale]);\r\n\r\n    return <Mesh\r\n        geometry={geometry}\r\n        {...meshProps}\r\n    />;\r\n};\r\n","import React, { useMemo } from \"react\";\r\nimport { Mesh, MeshProps } from \"./Mesh\";\r\nimport { CuboidGeometry, CuboidGeometryProps } from \"../geometry\";\r\n\r\ntype CuboidMeshProps = MeshProps & CuboidGeometryProps;\r\n\r\nexport const CuboidMesh : React.FC<CuboidMeshProps> = ({\r\n    lengthX,\r\n    lengthY,\r\n    lengthZ,\r\n    ...meshProps\r\n}) => {\r\n    const geometry = useMemo(\r\n        () => new CuboidGeometry({lengthX, lengthY, lengthZ}),\r\n        [lengthX, lengthY, lengthZ]);\r\n\r\n    return <Mesh\r\n        geometry={geometry}\r\n        {...meshProps}\r\n    />;\r\n};\r\n","import React, { useMemo } from \"react\";\r\nimport { Mesh, MeshProps } from \"./Mesh\";\r\nimport { PipeGeometry, PipeGeometryProps } from \"../geometry\";\r\n\r\ntype PipeMeshProps = MeshProps & PipeGeometryProps;\r\n\r\nexport const PipeMesh : React.FC<PipeMeshProps> = ({\r\n    points, radius,\r\n    ...meshProps\r\n}) => {\r\n    const geometry = useMemo(\r\n        () => new PipeGeometry({points, radius}),\r\n        [points, radius]);\r\n\r\n    return <Mesh\r\n        geometry={geometry}\r\n        {...meshProps}\r\n    />;\r\n};\r\n","import React from \"react\";\r\nimport { animated, useSpring } from \"react-spring/three\";\r\n\r\n\r\ntype AnimatedGroupProps = {\r\n    origin : number[],\r\n    rotation : number[]\r\n}\r\n\r\nexport const AnimatedGroup : React.FC<AnimatedGroupProps> = ({\r\n    origin, rotation,\r\n    children\r\n}) => {\r\n    const { smoothedOrigin, smoothedRotation } = useSpring({\r\n        smoothedOrigin: origin,\r\n        smoothedRotation: rotation\r\n    });\r\n\r\n    return <animated.group\r\n        position={smoothedOrigin}\r\n        rotation={smoothedRotation}>\r\n        {children}\r\n    </animated.group>\r\n};\r\n","import React from \"react\";\r\nimport { MaterialLibrary } from \"../material\";\r\nimport { CanSelectObjectFn, IsObjectSelectedFn, FocusObjectFn } from \"./Mesh\";\r\nimport { ExtrusionMesh } from \"./ExtrusionMesh\";\r\nimport { CuboidMesh } from \"./CuboidMesh\";\r\nimport { PipeMesh } from \"./PipeMesh\";\r\nimport {SceneElement} from \"../ducks\";\r\n\r\nexport * from './Mesh';\r\nexport * from './AnimatedGroup';\r\n\r\n// TODO SM Typing - not any\r\nfunction MeshByType(type : string) : any {\r\n    switch (type) {\r\n        case \"extrusion\": return ExtrusionMesh;\r\n        case \"cuboid\": return CuboidMesh;\r\n        case \"pipe\": return PipeMesh;\r\n        default: throw new Error(`Unsupported mesh type ${type}`);\r\n    }\r\n}\r\n\r\nexport function BuildMeshes(elements : SceneElement[], materialLibrary : MaterialLibrary,\r\n                           onFocusObject : FocusObjectFn,\r\n                           canSelect : CanSelectObjectFn, isSelected : IsObjectSelectedFn,\r\n                           showHardware : boolean, animateDoors : boolean) {\r\n\r\n    function doBuild(elements : SceneElement[]) {\r\n        return elements.map(e => {\r\n            const { id, type, material, children, ...props } = e;\r\n            const Mesh = MeshByType(type);\r\n\r\n            return <Mesh\r\n                key={id}\r\n                id={id}\r\n                material={materialLibrary[material]}\r\n                canSelect={canSelect(id)}\r\n                selected={isSelected(id)}\r\n                onFocusObject={onFocusObject}\r\n                animateDoors={animateDoors}\r\n                visible={showHardware || !e.id.startsWith(\"feature/\")}\r\n                {...props}\r\n            >\r\n                {(children && doBuild(children)) || []}\r\n            </Mesh>\r\n        });\r\n    }\r\n\r\n    return doBuild(elements);\r\n}\r\n","import React, { MutableRefObject, useEffect, useRef, useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Vector3, OrthographicCamera, PerspectiveCamera } from \"three\";\r\nimport { useFrame, useThree } from \"react-three-fiber\";\r\nimport CameraControls from \"camera-controls\";\r\nimport TWEEN from \"@tweenjs/tween.js\";\r\n\r\nexport type CameraProps = {\r\n    counter : number,\r\n    gazeDirection ?: number[],\r\n    gazeTarget ?: number[],\r\n    gazeSize ?: number[],\r\n    orthographic : boolean,\r\n};\r\n\r\nexport const Camera : React.FC<CameraProps & {\r\n    startLookAt : number[], startPosition : number[]\r\n}> = props => {\r\n    const ref : MutableRefObject<PerspectiveCamera | OrthographicCamera | undefined> = useRef();\r\n    const { gl, setDefaultCamera } = useThree();\r\n    const [cameraControls, setCameraControls ] = useState<CameraControls | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        console.log('installing CC');\r\n        CameraControls.install({THREE});\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            console.log('setting default camera');\r\n            setDefaultCamera(ref.current);\r\n        }\r\n    }, [ref, setDefaultCamera]);\r\n\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            console.log('init CC', gl.domElement);\r\n            setCameraControls(new CameraControls(ref.current!, gl.domElement));\r\n        }\r\n    }, [ref, gl, setCameraControls]);\r\n\r\n    useEffect(() => {\r\n        if (cameraControls) {\r\n            const lookAt = props.startLookAt;\r\n            const pos = props.startPosition;\r\n            console.log('initial pos');\r\n            cameraControls.setLookAt(pos[0], pos[1], pos[2], lookAt[0], lookAt[1], lookAt[2], false);\r\n        }\r\n    }, [props.startPosition, props.startLookAt, cameraControls]);\r\n\r\n    useEffect(() => {\r\n        if (cameraControls && props.gazeDirection && props.gazeTarget && props.gazeSize) {\r\n            const padding = 1.1;\r\n            const [w, h, d] = props.gazeSize;\r\n            const dist = cameraControls.getDistanceToFit(w * padding, h * padding, d * padding);\r\n\r\n            const [tx, ty, tz] = props.gazeTarget;\r\n            const [dx, dy, dz] = props.gazeDirection;\r\n            const pos = new Vector3(tx, ty, tz).addScaledVector(new Vector3(dx, dy, dz), -dist);\r\n            cameraControls.setLookAt(pos.x, pos.y, pos.z, tx, ty, tz, true);\r\n        }\r\n    }, [props.counter, props.gazeDirection, props.gazeTarget, props.gazeSize, cameraControls]);\r\n\r\n    useFrame((state, delta) => {\r\n        cameraControls?.update(delta);\r\n        TWEEN.update();\r\n    });\r\n\r\n    return props.orthographic ?\r\n        <orthographicCamera ref={ref} position={props.startPosition}/> :\r\n        <perspectiveCamera ref={ref} position={props.startPosition} near={10} far={10000} fov={60} />;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Light : React.FC = () => <>\r\n    <ambientLight intensity={0.9}/>\r\n    {/*<directionalLight intensity={1} position={[ 1, 0.5, 1]}/>*/}\r\n    {/*<directionalLight intensity={0.5} position={[-1, 1.5, 1]}/>*/}\r\n    {/*<directionalLight intensity={0.5} position={[ 0, 0.5, -1]}/>*/}\r\n</>;\r\n","import { connect } from \"react-redux\";\r\nimport { scene } from \"../data\";\r\nimport { doFocusObject } from \"../ducks\";\r\nimport { Scene } from \"./Scene\";\r\nimport {FocusObjectFn } from \"../mesh\";\r\n\r\nfunction mapStateToProps(state : any /* TODO SM type */) {\r\n    const { counter, gazeDirection, gazeTarget, gazeSize, orthographic, selected,\r\n        selectionFilter, showJunctionAngles, showHardware, animateDoors, } = state.rendererState;\r\n    const canSelect = (id : string) => id.startsWith(selectionFilter);\r\n    const isSelected = (id : string) => id === selected;\r\n    return { counter, gazeDirection, gazeTarget, gazeSize, orthographic, scene, canSelect, isSelected,\r\n        showJunctionAngles, showHardware, animateDoors, };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch : any /* TODO SM type */) {\r\n    const onFocusObject : FocusObjectFn = (objectID, select) =>\r\n        dispatch(doFocusObject(objectID, select));\r\n    return { onFocusObject };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Scene);\r\n","import React from \"react\";\r\nimport { Vector3, MathUtils } from \"three\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport { MaterialLibrary } from \"../material\";\r\nimport { BuildMeshes, FocusObjectFn, CanSelectObjectFn, IsObjectSelectedFn, AnimatedGroup } from \"../mesh\";\r\nimport { Camera, CameraProps } from \"./Camera\";\r\nimport { Light } from \"./Light\";\r\nimport { SceneTree } from \"../ducks\";\r\n\r\ntype SceneProps = CameraProps & {\r\n    materialLibrary : MaterialLibrary,\r\n    onFocusObject : FocusObjectFn,\r\n    canSelect : CanSelectObjectFn,\r\n    isSelected : IsObjectSelectedFn,\r\n\r\n    showJunctionAngles : boolean,\r\n    showHardware : boolean,\r\n    animateDoors : boolean,\r\n\r\n    scene : SceneTree\r\n};\r\n\r\nexport const Scene : React.FC<SceneProps> = ({\r\n    materialLibrary,\r\n    onFocusObject,\r\n    canSelect,\r\n    isSelected,\r\n\r\n    showJunctionAngles,\r\n    showHardware,\r\n    animateDoors,\r\n\r\n    scene,\r\n    ...cameraProps\r\n}) => {\r\n    const { junctionAngles, defaultCamera, positions } = scene;\r\n\r\n    function BuildScene(scene : SceneTree) {\r\n        const upAxis = new Vector3(0, 1, 0);\r\n        const groups = Array(scene.positions.length);\r\n        let origin = new Vector3(0, 0, 0);\r\n        let rotationY = 0;\r\n        for (let i=0; i<positions.length; i++) {\r\n            const position = scene.positions[i];\r\n            let [offX, offY, offZ] = position.offset;\r\n\r\n            if (showJunctionAngles) {\r\n                rotationY += MathUtils.DEG2RAD * junctionAngles[i];\r\n            } else {\r\n                offZ = 0; // align glass centerlines\r\n                offX += 50; // TODO SM hardcoded gap\r\n            }\r\n\r\n            groups[i] = <AnimatedGroup\r\n                key={i}\r\n                origin={[origin.x, origin.y, origin.z]}\r\n                rotation={[0, rotationY, 0]}>\r\n                {\r\n                    BuildMeshes(position.children, materialLibrary, onFocusObject, canSelect,\r\n                        isSelected, showHardware, animateDoors)\r\n                }\r\n            </AnimatedGroup>;\r\n\r\n\r\n            origin.add(new Vector3(offX, offY, offZ).applyAxisAngle(upAxis, rotationY));\r\n        }\r\n\r\n        return groups;\r\n    }\r\n\r\n    return <div className=\"gl-view\">\r\n        <Canvas>\r\n            <Camera {...cameraProps} startLookAt={defaultCamera.lookAt} startPosition={defaultCamera.position} />\r\n            <Light/>\r\n            { BuildScene(scene) }\r\n        </Canvas>\r\n    </div>;\r\n};\r\n","import * as THREE from \"three\";\r\n\r\nexport const envMap = new THREE.CubeTextureLoader().setPath('img/envMap/').load([\r\n    'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\r\n]);\r\n","import * as THREE from \"three\";\r\nimport { DoubleSide } from \"three\";\r\nimport { envMap } from './envmap';\r\n\r\nconst metalness = 0.3;\r\nconst roughness = 0.3;\r\nconst reflectivity = 0.99;\r\nconst clearcoat = 0.95;\r\nconst clearcoatRoughness = 0.1;\r\nconst transparent = true;\r\nconst side = DoubleSide;\r\nconst shininess = 0.1;\r\n\r\nconst standardColor = 0xa7ffeb;\r\nconst hoverColor = 0x64ffda;\r\nconst selectedColor = 0x00bfa5;\r\n\r\nexport const fullGlass = {\r\n    standard:\r\n        new THREE.MeshPhysicalMaterial({\r\n            metalness, roughness, reflectivity, clearcoat, clearcoatRoughness, transparent, side, envMap,\r\n            color: standardColor, opacity: 0.75, }),\r\n    hover:\r\n        new THREE.MeshPhysicalMaterial({\r\n            metalness, roughness, reflectivity, clearcoat, clearcoatRoughness, transparent, side, envMap,\r\n            color: hoverColor, opacity: 0.9, }),\r\n    selected:\r\n        new THREE.MeshPhysicalMaterial({\r\n            metalness, roughness, reflectivity, clearcoat, clearcoatRoughness, transparent, side, envMap,\r\n            color: selectedColor, opacity: 0.95, }),\r\n};\r\n\r\nexport const fastGlass = {\r\n    standard: new THREE.MeshPhongMaterial({shininess, envMap, reflectivity: 0.1, color: standardColor}),\r\n    hover: new THREE.MeshPhongMaterial({shininess, envMap, reflectivity: 0.1, color: hoverColor}),\r\n    selected: new THREE.MeshPhongMaterial({shininess, envMap, reflectivity: 0.1, color: selectedColor}),\r\n};\r\n","import * as THREE from \"three\";\r\nimport { envMap } from './envmap';\r\n\r\nconst metalness = 1.0;\r\nconst roughness = 0.1;\r\nconst clearcoat = 0.1;\r\nconst clearcoatRoughness = 0.2;\r\nconst reflectivity = 0.9;\r\nconst shininess = 0.9;\r\n\r\nconst standardColor = 0xffc107;\r\nconst hoverColor = 0xff8f00;\r\nconst selectedColor = 0xe65100;\r\n\r\nexport const fullMetal = {\r\n    standard: new THREE.MeshPhysicalMaterial({\r\n        metalness, roughness, clearcoat, clearcoatRoughness, envMap, color: standardColor}),\r\n    hover: new THREE.MeshPhysicalMaterial({\r\n        metalness, roughness, clearcoat, clearcoatRoughness, envMap, color: hoverColor}),\r\n    selected: new THREE.MeshPhysicalMaterial({\r\n        metalness, roughness, clearcoat, clearcoatRoughness, envMap, color: selectedColor}),\r\n};\r\n\r\nexport const fastMetal = {\r\n    standard: new THREE.MeshPhongMaterial({shininess, envMap, reflectivity, color: standardColor}),\r\n    hover: new THREE.MeshPhongMaterial({shininess, envMap, reflectivity, color: hoverColor}),\r\n    selected: new THREE.MeshPhongMaterial({shininess, envMap, reflectivity, color: selectedColor}),\r\n};\r\n","import { Material } from \"three\";\r\nimport { fullGlass, fastGlass } from \"./Glass\";\r\nimport { fullMetal, fastMetal } from \"./Metal\";\r\n\r\nexport type MaterialGroup = {\r\n    standard : Material,\r\n    hover : Material,\r\n    selected : Material,\r\n}\r\n\r\nexport type MaterialLibrary = {\r\n    [key : string] : MaterialGroup,\r\n    glass: MaterialGroup,\r\n    metal: MaterialGroup\r\n}\r\n\r\nexport const fullMatLibrary : MaterialLibrary = {\r\n    glass: fullGlass,\r\n    metal: fullMetal,\r\n};\r\n\r\nexport const fastMatLibrary : MaterialLibrary = {\r\n    glass: fastGlass,\r\n    metal: fastMetal,\r\n};\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Scene from \"./rendererWebGL/scene\";\nimport {fullMatLibrary, fastMatLibrary} from \"./rendererWebGL/material\";\nimport {doModifyDisplay, doSetSelectionFilter, doFocusObject} from \"./rendererWebGL/ducks\";\nimport {connect} from \"react-redux\";\n\n\ntype AppProps = {\n    showJunctionAngles : boolean,\n    showHardware : boolean,\n    animateDoors : boolean,\n    selectionFilter : string,\n\n    onShowJunctionAngles : (showJunctionAngles : boolean) => void,\n    onShowHardware : (showHardware : boolean) => void,\n    onAnimateDoors : (animateDoors : boolean) => void,\n\n    onFocusObject : (id : string, select : boolean) => void,\n    onSetSelectionFilter : (filter : string) => void,\n}\n\nconst App : React.FC<AppProps> = ({\n    showJunctionAngles, showHardware, animateDoors, selectionFilter,\n    onShowJunctionAngles, onShowHardware, onAnimateDoors,\n    onFocusObject, onSetSelectionFilter\n}) => {\n\n    const [hdMaterial, setHdMaterial] = useState(true);\n\n    return <>\n        <div style={{position: \"fixed\", zIndex: 1}}>\n            <button type=\"button\" onClick={() => setHdMaterial(!hdMaterial)}>\n                Switch to {hdMaterial ? 'Fast' : 'Full'}\n            </button>\n            <button type=\"button\" onClick={() => onShowJunctionAngles(!showJunctionAngles)}>\n                Show {showJunctionAngles ? 'Flat' : 'Angled'}\n            </button>\n            <button type=\"button\" onClick={() => onShowHardware(!showHardware)}>\n                {showHardware ? 'Hide' : 'Show'} Hardware\n            </button>\n            <button type=\"button\" onClick={() => onAnimateDoors(!animateDoors)}>\n                {animateDoors ? 'Stop Animation' : 'Animate Doors'}\n            </button>\n            &nbsp;Allow Select:\n            <button type=\"button\" onClick={() => onSetSelectionFilter('')}>All</button>\n            <button type=\"button\" onClick={() => onSetSelectionFilter('panel/')}>Panels</button>\n            <button type=\"button\" onClick={() => onSetSelectionFilter('feature/')}>HW</button>\n\n            &nbsp;Select:\n            <button type=\"button\"\n                    disabled={selectionFilter==='feature/'}\n                    onClick={() => onFocusObject('panel/1', true)}>\n                P1\n            </button>\n            <button type=\"button\"\n                    disabled={selectionFilter==='feature/'}\n                    onClick={() => onFocusObject('panel/2', true)}>\n                P2\n            </button>\n            <button type=\"button\"\n                    disabled={selectionFilter==='panel/' || !showHardware}\n                    onClick={() => onFocusObject('feature/6', true)}>\n                Handle\n            </button>\n\n            &nbsp;Focus:\n            <button type=\"button\"\n                    onClick={() => onFocusObject('panel/3', false)}>\n                P3\n            </button>\n            <button type=\"button\"\n                    onClick={() => onFocusObject('panel/4', false)}>\n                P4\n            </button>\n            <button type=\"button\"\n                    disabled={!showHardware}\n                    onClick={() => onFocusObject('feature/1', false)}>\n                BotHinge\n            </button>\n        </div>\n        <Scene materialLibrary={hdMaterial ? fullMatLibrary : fastMatLibrary} />\n    </>;\n};\n\nfunction mapStateToProps(state : any /* TODO SM type */) {\n    const { showJunctionAngles, showHardware, animateDoors, selectionFilter, } = state.rendererState;\n    return { showJunctionAngles, showHardware, animateDoors, selectionFilter, };\n}\n\nfunction mapDispatchToProps(dispatch : any /* TODO SM type */) {\n    // TODO SM Use Sagas to chain these dispatches?\n    const onShowJunctionAngles = (showJunctionAngles : boolean) : void => {\n        dispatch(doModifyDisplay({ showJunctionAngles } ));\n        // TODO SM how to access ID in a better way? can we access state to get currently selected?\n        dispatch(doFocusObject('panel/1', false));\n    };\n\n    const onShowHardware = (showHardware : boolean) => dispatch(doModifyDisplay({showHardware}));\n    const onAnimateDoors = (animateDoors : boolean) => dispatch(doModifyDisplay({animateDoors}));\n\n    const onFocusObject = (id : string, select : boolean) => dispatch(doFocusObject(id, select));\n    const onSetSelectionFilter = (filter : string) => dispatch(doSetSelectionFilter(filter));\n\n    return { onShowJunctionAngles, onShowHardware, onAnimateDoors, onFocusObject, onSetSelectionFilter };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport { combineReducers, createStore } from 'redux';\nimport {rendererReducer} from \"./rendererWebGL/ducks\";\n\nconst rootReducer = combineReducers({\n    rendererState: rendererReducer,\n});\n\nconst store = createStore(rootReducer,\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n"],"sourceRoot":""}