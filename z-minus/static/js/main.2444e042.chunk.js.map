{"version":3,"sources":["ai/actions.ts","util/util.ts","ai/randomWalk.ts","core/config.ts","core/tile.ts","core/board.ts","core/player.ts","core/unit.ts","core/view.ts","core/game.ts","ui/Alert.tsx","ui/ControlPanel.tsx","ui/GameScene.tsx","ui/Stats.tsx","App.tsx","index.tsx"],"names":["moveTowards","doWorkWhile","waitWhile","unit","target","interrupt","targetDirection","subtract","position","normalize","curDirection","clone","Vector3","Dot","scaleToRef","unitType","maxSpeed","velocity","subtractToRef","scaleInPlace","pred","angularVelocity","Math","PI","owner","id","randomInt","max","floor","random","randomElem","array","length","randomWeightedElem","weight","weights","map","selected","sum","i","randomWalkAI","offensiveUnitAI","defensiveUnitAI","canDoWork","curTile","tile","occupancy","opponent","healthProportion","homeTile","isDamaged","board","tilePref","nextTile","neighbourClosestTo","neighbours","toPos","t","diff","abs","offenseUT","displayName","maxHealth","attackVsUnit","attackVsTile","repairTile","repairSelf","meshFactory","scene","radius","height","options","diameter","tessellation","enclose","MeshBuilder","CreateCylinder","aiFactory","defenseUT","randomUPS","nextUnitType","minDurationState","tileSize","drawnTileSize","unitCost","tileMaxHealth","homeTileMaxHealth","tileControlThreshold","minUnitsToCapture","resourcesRate","unitTypes","unitProdStrategies","defaultUPS","Tile","game","isHome","q","r","s","undefined","coords","health","mesh","console","error","this","config","view","makeTileMesh","other","equals","min","_elapsed","elapsed","resolveUnits","aliveUnits","instancedBuffers","color","tileColor","resourceCount","rate","newHealth","incHealth","occupiers","gaia","units","unitsOnTile","filter","u","players","p1","p2","p1Units","p2Units","forEach","attackUnit","soleOccupier","canCapture","repair","attackTile","x","y","sqrt3","a","b","z","qf","rf","sf","round","qDist","rDist","sDist","direction","NN","NE","SE","SS","SW","NW","directions","sqrt","Board","acceptTile","tiles","tileList","R","push","generate","updateDrawn","updateState","dir","neighbour","dist","n","distBetween","closest","pos","roundCoords","countIf","predicate","UnitState","Player","name","hue","maxSaturation","stdTileColor","homeTileColor","fullUnitColor","deadUnitColor","ups","_scene","find","p","spawnUnit","resCount","tileCount","unitCount","saturation","value","alpha","result","Color3","HSVtoRGBToRef","g","Color4","TwoPI","Unit","ai","state","targetAngle","active","makeUnitMesh","minY","updatePhysics","won","sin","rotation","scaleAndAddToRef","copyFrom","rotY","setState","dead","next","posToTile","dot","Forward","acos","scaling","setAll","harm","heal","canHeal","lost","View","shadows","ambientColor","camera","ArcRotateCamera","lowerBetaLimit","upperBetaLimit","lowerRadiusLimit","upperRadiusLimit","setTarget","Zero","canvas","getEngine","getRenderingCanvas","attachControl","lights","HemisphericLight","intensity","castShadow","addShadowCaster","tileMesh","generateTileMesh","onAddMesh","meshInst","createInstance","isVisible","index","unitMesh","generateUnitMesh","unitMeshPrototype","material","StandardMaterial","specularColor","CreateDisc","sideOrientation","Mesh","DOUBLESIDE","receiveShadows","registerInstancedBuffer","Game","allUnits","winner","listeners","elapsedSinceState","player1","player2","reset","first","second","firstAdj","secondAdj","off","def","nextId","running","isAlive","player","finishGame","notifyListeners","listener","l","current","AlertUI","onGetMessage","outRef","alertRef","useRef","updateAlert","useCallback","innerText","useEffect","className","ref","ControlPanelBtn","text","onClick","disabled","ControlPanelStrategyBtn","btnUps","curUps","onSet","ControlPanelUI","playerRef","useState","setUps","updatePlayerStatus","statusDisplayText","key","GameSceneUI","antialias","onSceneReady","onRender","elapsedMillis","getDeltaTime","update","StatsUI","fpsRef","updateStats","fps","getFps","App","useMemo","statsRef","p1Ref","p2Ref","addGameStateListenerEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mWAKiBA,G,WAuBAC,G,WAMAC,GA7BV,SAAUF,EACfG,EACAC,EACAC,GAHK,yEAKCC,EAAkBF,EAAOG,SAASJ,EAAKK,UAAUC,YACnDC,EAAeJ,EAAgBK,QAN9B,YAQEC,IAAQC,IAAIP,EAAiBI,GAAgB,GAR/C,iBAaH,OAJAJ,EACGG,YACAK,WAAWX,EAAKY,SAASC,SAAUb,EAAKc,eAXxC,qBAeCZ,EAAUF,GAfX,mDAiBHC,EAAOc,cAAcf,EAAKK,SAAUE,GAjBjC,uBAoBLP,EAAKc,SAASE,aAAa,GApBtB,wCAuBA,SAAUlB,EAAYE,EAAYiB,GAAlC,iEAEL,OADAjB,EAAKkB,gBAAkBC,KAAKC,IAAwB,IAAlBpB,EAAKqB,MAAMC,GAAW,GAAK,GAC7D,gBAAOvB,EAAUC,EAAMiB,GAAvB,QAFK,OAGLjB,EAAKkB,gBAAkB,EAHlB,uCAMA,SAAUnB,EAAUC,EAAYiB,GAAhC,qEACEA,EAAKjB,GADP,gBAEH,YAFG,uEChCA,SAASuB,EAAUC,GACxB,OAAOL,KAAKM,MAAMN,KAAKO,SAAWF,GAG7B,SAASG,EAAcC,GAC5B,GAAIA,EAAMC,OAAS,EACjB,OAAOD,EAAML,EAAUK,EAAMC,SAc1B,SAASC,EACdF,EACAG,GAEA,GAAqB,IAAjBH,EAAMC,OAAV,CAIA,IAFA,IAAMG,EAAUJ,EAAMK,IAAIF,GACtBG,EAAWX,EAhBjB,SAAaK,GAGX,IADA,IAAIO,EAAM,EACDC,EAAI,EAAGA,EAAIR,EAAMC,OAAQO,IAChCD,GAAOP,EAAMQ,GAEf,OAAOD,EAUkBA,CAAIH,IACpBI,EAAI,EAAGA,EAAIJ,EAAQH,OAAQO,IAElC,IADAF,GAAYF,EAAQI,IACL,EAAG,OAAOR,EAAMQ,GAGjC,OAAOR,EAAMA,EAAMC,OAAS,I,eCJbQ,G,WAuBAC,G,WAOAC,GAzDjB,SAASC,EAAUxC,GACjB,IAAMyC,EAAUzC,EAAK0C,KACrB,QAAKD,IAEDA,EAAQE,UAAU3C,EAAKqB,MAAMuB,SAAStB,IAAM,IAK5CmB,EAAQpB,QAAUrB,EAAKqB,MAAMuB,WAK7BH,EAAQpB,QAAUrB,EAAKqB,OAASoB,EAAQI,mBAAqB,OAK7DJ,IAAYzC,EAAKqB,MAAMyB,WAAY9C,EAAK+C,gBAQvC,SAAUV,EACfrC,EACAgD,EACAC,GAHK,IAKIC,EALJ,iEAKIA,EALJ,WAMH,OAAIlD,EAAK+C,YACAC,EAAMG,mBAAmBnD,EAAK0C,KAAM1C,EAAKqB,MAAMyB,UAE3ChB,EAAmBkB,EAAMI,WAAWpD,EAAK0C,MAAOO,IAC9CjD,EAAKqB,MAAMyB,UAVvB,WAcCN,EAdD,gBAeD,uBAAO1C,EAAYE,EAAMwC,GAAzB,QAfC,OAmBH,uBAAO3C,EAAYG,EAAMkD,IAAWG,QAASb,GAA7C,QAnBG,6DAuBA,SAAUF,EAAgBtC,EAAYgD,GAAtC,iEACL,uBAAOX,EAAarC,EAAMgD,GAAO,SAACM,GAChC,IAAMC,EAAOpC,KAAKqC,IAAIxD,EAAKqB,MAAMC,GAAKgC,EAAEjC,MAAMC,IAAM,EACpD,OAAOiC,EAAOA,EAAOA,KAFvB,QADK,uCAOA,SAAUhB,EAAgBvC,EAAYgD,GAAtC,iEACL,uBAAOX,EAAarC,EAAMgD,GAAO,SAACM,GAChC,IAAMC,EAAO,EAAIpC,KAAKqC,IAAIxD,EAAKqB,MAAMC,GAAKgC,EAAEjC,MAAMC,IAAM,EACxD,OAAOiC,EAAOA,EAAOA,KAFvB,QADK,uCCtDP,IAAME,EAAsB,CAC1BnC,GAAI,EACJoC,YAAa,YACbC,UAAW,GAEX9C,SAAU,IACV+C,aAAc,EACdC,aAAc,EACdC,WAAY,GACZC,WAAY,GAEZC,YAmBF,SACEC,EACAC,EACAC,GAEA,IAAMC,EAAU,CACdC,SAAU,EAAIH,EACdC,SACAG,aAAc,EACdC,SAAS,GAEX,OAAOC,IAAYC,eAAe,UAAWL,EAASH,IA7BtDS,UA8CF,SAA4B1E,EAAYgD,GACtC,OAAOV,EAAgBtC,EAAMgD,KA5CzB2B,EAAsB,CAC1BrD,GAAI,EACJoC,YAAa,YACbC,UAAW,GAEX9C,SAAU,EACV+C,aAAc,EACdC,aAAc,IACdC,WAAY,EACZC,WAAY,EAEZC,YAkBF,SACEC,EACAC,EACAC,GAEA,IAAMC,EAAU,CACdC,SAAU,IAAMH,EAChBC,SACAG,aAAc,EACdC,SAAS,GAEX,OAAOC,IAAYC,eAAe,UAAWL,EAASH,IA5BtDS,UAmCF,SAA4B1E,EAAYgD,GACtC,OAAOT,EAAgBvC,EAAMgD,KAG/B,IAYM4B,EAAoC,CACxCtD,GAAI,EACJoC,YAAa,SACbmB,aAAc,kBAAMlD,EAAW,CAAC8B,EAAWkB,MAI9B,GACbG,iBAAkB,IAElBC,SAAU,EACVC,cAAe,KAEfC,SAAU,GACVC,cAAe,GACfC,kBAAmB,GACnBC,qBAAsB,GACtBC,kBAAmB,EAGnBC,cAdgB,EAgBhBC,UAAW,CAAC9B,EAAWkB,GACvBa,mBAAoB,CAnCyB,CAC7ClE,GAAI,EACJoC,YAAa,YACbmB,aAAc,kBAAMpB,IAGyB,CAC7CnC,GAAI,EACJoC,YAAa,YACbmB,aAAc,kBAAMF,IA0BiCC,GACrDa,WAAYb,G,wBCtGDc,EAAb,WAQE,WACmBC,EACVtE,EACSuE,EAChBC,EACAC,GAEC,IADDC,EACA,4DADwBC,EACxB,yBANiBL,OAMjB,KALOtE,QAKP,KAJgBuE,SAIhB,KAbcK,YAad,OAZMC,YAYN,OAXevC,eAWf,OAVKwC,UAUL,OATKxD,eASL,OACUqD,IAAND,EACFA,IAAMF,EAAIC,GACDD,EAAIC,EAAIC,IAAM,GACvBK,QAAQC,MAAM,uCAAwC,CAAER,IAAGC,IAAGC,MAGhEO,KAAKL,OAAS,IAAIxF,IAAQoF,EAAGC,EAAGC,GAChCO,KAAKH,UAAOH,EACZM,KAAK3C,UAAYiC,EAASW,EAAOpB,kBAAoBoB,EAAOrB,cAC5DoB,KAAKJ,OAASN,EAASU,KAAK3C,UAAY,EACxC2C,KAAK3D,UAAY,CAAC,EAAG,EAAG,GA1B5B,qDA6BkBsB,GACdqC,KAAKH,KAAOG,KAAKX,KAAKa,KAAKC,aAAaH,KAAMrC,KA9BlD,6BAiCgByC,GACZ,OAAOJ,KAAKL,OAAOU,OAAOD,EAAMT,UAlCpC,yCAsCI,OAAO9E,KAAKyF,IAAI,EAAGzF,KAAKK,IAAI,EAAG8E,KAAKJ,OAASI,KAAK3C,cAtCtD,kCAyCqBkD,MAzCrB,kCA6CqBC,GAAkB,IAC3BxB,EAAwCiB,EAAxCjB,cAAeF,EAAyBmB,EAAzBnB,qBAEvBkB,KAAKS,aAAaT,KAAKX,KAAKqB,WAAYF,GAExCR,KAAKH,KAAKc,iBAAiBC,MAAQZ,KAAKjF,MAAM8F,UAC5Cb,KAAKV,OACLU,KAAKzD,oBAGHyD,KAAKzD,mBAAqBuC,IAC5BkB,KAAKjF,MAAM+F,eAAiBN,EAAUxB,KAxD5C,gCA4DoB+B,EAAcP,GAC9B,IAAMQ,EAAYhB,KAAKJ,OAASmB,EAAOP,EACvCR,KAAKJ,OAAS/E,KAAKyF,IAAIN,KAAK3C,UAAWxC,KAAKK,IAAI,EAAG8F,MA9DvD,2BAgEcD,EAAcP,GACxBR,KAAKiB,WAAWF,EAAMP,KAjE1B,2BAmEcO,EAAcP,GACxBR,KAAKiB,UAAUF,EAAMP,KApEzB,iCAuEqBU,GACjB,OACElB,KAAKjF,QAAUiF,KAAKX,KAAK8B,MACzBD,EAAU3F,QAAU0E,EAAOlB,oBA1EjC,mCA8EuBqC,EAAeZ,GAAkB,IAAD,OAC7Ca,EAAcD,EAAME,QAAO,SAACC,GAAD,OAAOA,EAAEnF,OAAS,KACnD,GAA2B,IAAvBiF,EAAY9F,OAAhB,CAFmD,kBAI5ByE,KAAKX,KAAKmC,QAJkB,GAI5CL,EAJ4C,KAItCM,EAJsC,KAIlCC,EAJkC,KAK7CC,EAAUN,EAAYC,QAAO,SAACC,GAAD,OAAOA,EAAExG,QAAU0G,KAChDG,EAAUP,EAAYC,QAAO,SAACC,GAAD,OAAOA,EAAExG,QAAU2G,KAGtD,GAFA1B,KAAK3D,UAAY,CAAC,EAAGsF,EAAQpG,OAAQqG,EAAQrG,QAEzCoG,EAAQpG,OAAS,GAAKqG,EAAQrG,OAAS,EACzCoG,EAAQE,SAAQ,SAACN,GAAD,OAAOA,EAAEO,WAAWzG,EAAWuG,GAAWpB,MAC1DoB,EAAQC,SAAQ,SAACN,GAAD,OAAOA,EAAEO,WAAWzG,EAAWsG,GAAWnB,UACrD,CACL,IAAMuB,EAAeV,EAAY,GAAGtG,MAChCiF,KAAKgC,WAAWX,KAClBrB,KAAKjF,MAAQgH,GAGX/B,KAAKjF,QAAUgH,EACjBV,EAAYQ,SAAQ,SAACN,GAAD,OAAOA,EAAEU,OAAO,EAAMzB,MACjCR,KAAKjF,QAAUoG,IACxBE,EAAYQ,SAAQ,SAACN,GAAD,OAAOA,EAAEW,WAAW,EAAM1B,MAC1CR,KAAKzD,mBAAqB,KAC5ByD,KAAKjF,MAAQoG,QArGvB,8BA2G0B,MAELnB,KAAKL,OAAdwC,EAFc,EAEdA,EAAGC,EAFW,EAEXA,EACX,OAAO,IAAIjI,IACT,IAAMgI,EAAIlC,EAAOxB,SACjB,EACA4D,GAAS,GAAMF,EAAIC,GAAKnC,EAAOxB,aAjHrC,mCAqH4B6D,EAASC,GAAkB,IAAD,EAC9BD,EAAE3C,OAAO7F,SAASyI,EAAE5C,QAAhCwC,EAD0C,EAC1CA,EAAGC,EADuC,EACvCA,EAAGI,EADoC,EACpCA,EACd,MAAO,IAAO3H,KAAKqC,IAAIiF,GAAKtH,KAAKqC,IAAIkF,GAAKvH,KAAKqC,IAAIsF,MAvHvD,kCA4I4BC,EAAYC,GACpC,IAAMC,GAAMF,EAAKC,EACXnD,EAAI1E,KAAK+H,MAAMH,GACfjD,EAAI3E,KAAK+H,MAAMF,GACfjD,EAAI5E,KAAK+H,MAAMD,GAEfE,EAAQhI,KAAKqC,IAAIuF,EAAKlD,GACtBuD,EAAQjI,KAAKqC,IAAIwF,EAAKlD,GACtBuD,EAAQlI,KAAKqC,IAAIyF,EAAKlD,GAE5B,OAAIoD,EAAQhI,KAAKK,IAAI4H,EAAOC,GACnB,CAAExD,GAAIC,EAAIC,EAAGD,KAElBsD,EAAQC,EACH,CAAExD,IAAGC,GAAID,EAAIE,GAEf,CAAEF,IAAGC,SA5JhB,KAAaJ,EA2HG4D,UAAY,CACxBC,GAAI,IAAI9I,IAAQ,EAAI,GAAK,GACzB+I,GAAI,IAAI/I,IAAQ,EAAI,GAAK,GACzBgJ,GAAI,IAAIhJ,IAAQ,GAAK,EAAG,GACxBiJ,GAAI,IAAIjJ,IAAQ,GAAK,EAAG,GACxBkJ,GAAI,IAAIlJ,KAAS,EAAG,EAAI,GACxBmJ,GAAI,IAAInJ,KAAS,EAAG,EAAI,IAjIfiF,EAmIGmE,WAAa,CACzBnE,EAAK4D,UAAUC,GACf7D,EAAK4D,UAAUE,GACf9D,EAAK4D,UAAUG,GACf/D,EAAK4D,UAAUI,GACfhE,EAAK4D,UAAUK,GACfjE,EAAK4D,UAAUM,IAsBnB,IAAMjB,EAAQxH,KAAK2I,KAAK,GC/JXC,EAAb,WAIE,WACmBpE,EACAzB,EACjB8F,GACC,yBAHgBrE,OAGjB,KAFiBzB,SAEjB,KAPe+F,WAOf,OANcC,cAMd,EACA5D,KAAK2D,MAAQ,GACb3D,KAAK4D,SAAW,GAGhB,IADA,IAAMC,EAAIjG,EACD2B,GAAKsE,EAAGtE,GAAKsE,EAAGtE,IAAK,CAC5BS,KAAK2D,MAAMpE,EAAIsE,GAAK,GAEpB,IAAK,IAAIrE,GAAKqE,EAAGrE,GAAKqE,EAAGrE,IAAK,CAC5B,IAAMC,IAAMF,EAAIC,GAEhB,IAAKqE,GAAKpE,GAAKA,GAAKoE,GAAKH,EAAWnE,EAAGC,EAAGC,GAAI,CAC5C,IAAMH,EAAe,IAANC,GAAW1E,KAAKqC,IAAIsC,KAAOqE,EACpC9I,EAAQsE,EAAKmC,QAAQlC,EAAUE,IAAMqE,EAAI,EAAI,EAAK,GAClDzH,EAAO,IAAIgD,EAAKC,EAAMtE,EAAOuE,EAAQC,EAAGC,GAC9CQ,KAAK2D,MAAMpE,EAAIsE,GAAGrE,EAAIqE,GAAKzH,EAC3B4D,KAAK4D,SAASE,KAAK1H,MAxB7B,qDA8BkBuB,GACd,IAAK,IAAI7B,EAAI,EAAGA,EAAIkE,KAAK4D,SAASrI,OAAQO,IAAK,CAChCkE,KAAK4D,SAAS9H,GACtBiI,SAASpG,MAjCpB,kCAqCqB6C,GACjB,IAAK,IAAI1E,EAAI,EAAGA,EAAIkE,KAAK4D,SAASrI,OAAQO,IACxCkE,KAAK4D,SAAS9H,GAAGkI,YAAYxD,KAvCnC,kCA2CqBA,GACjB,IAAK,IAAI1E,EAAI,EAAGA,EAAIkE,KAAK4D,SAASrI,OAAQO,IACxCkE,KAAK4D,SAAS9H,GAAGmI,YAAYzD,KA7CnC,2BAiDcjB,EAAWC,GACrB,IAAMqE,EAAI7D,KAAKpC,OACf,IAAKiG,GAAKtE,GAAKA,GAAKsE,IAAMA,GAAKrE,GAAKA,GAAKqE,EACvC,OAAO7D,KAAK2D,MAAMpE,EAAIsE,GAAGrE,EAAIqE,KApDnC,iCAyDoBzH,GAAqB,IAAD,OACpC,OAAOgD,EAAKmE,WACT5H,KAAI,SAACuI,GAAD,OAAS,EAAKC,UAAU/H,EAAM8H,MAClC5C,QAAO,SAACtE,GAAD,QAASA,OA5DvB,yCA+D4BZ,EAAYzC,GACpC,IAAMmD,EAAakD,KAAKlD,WAAWV,GACnC,GAA0B,IAAtBU,EAAWvB,OAAc,OAAO5B,EAKpC,IAHA,IAAMyK,EAAOtH,EAAWnB,KAAI,SAAC0I,GAAD,OAAOjF,EAAKkF,YAAYD,EAAG1K,MAEnD4K,EAAU,EACLzI,EAAI,EAAGA,EAAIgB,EAAWvB,OAAQO,IACjCsI,EAAKtI,GAAKsI,EAAKG,KAAUA,EAAUzI,GAEzC,OAAOgB,EAAWyH,KAzEtB,gCA4EmBnI,EAAY4G,GAC3B,OAAOhD,KAAK5D,KAAKA,EAAKuD,OAAOwC,EAAIa,EAAUb,EAAG/F,EAAKuD,OAAOyC,EAAIY,EAAUZ,KA7E5E,gCAgFmBoC,GAEf,IAAMrC,EAAIqC,EAAIrC,EAAIlC,EAAOxB,SACnB+D,EAAIgC,EAAIhC,EAAIvC,EAAOxB,SAHsB,EAI9BW,EAAKqF,YAAa,EAAM,EAAOtC,GAAIE,EAAQG,EAAIL,GAAK,GAA7D5C,EAJuC,EAIvCA,EAAGC,EAJoC,EAIpCA,EACX,OAAOQ,KAAK5D,KAAKmD,EAAGC,OArFxB,KAwFM6C,EAAQxH,KAAK2I,KAAK,GCzFxB,SAASkB,EAAWpJ,EAAYqJ,GAC9B,OAAOrJ,EAAMgG,OAAOqD,GAAWpJ,OAG1B,ICJKqJ,EDICC,EAAb,WAWE,WACmBxF,EACDrE,EACA8J,EACCC,EACAC,GAChB,yBALgB3F,OAKjB,KAJgBrE,KAIhB,KAHgB8J,OAGhB,KAFiBC,MAEjB,KADiBC,gBACjB,KAhBcC,kBAgBd,OAfcC,mBAed,OAdcC,mBAcd,OAbcC,mBAad,OAZK9I,cAYL,OAVKE,cAUL,OATKsE,mBASL,OARKuE,SAQL,EACArF,KAAKiF,aAAeJ,EAAOjE,MAAMmE,EAAK,GAAMC,EAAe,IAC3DhF,KAAKkF,cAAgBL,EAAOjE,MAAMmE,EAAK,GAAMC,EAAe,IAC5DhF,KAAKmF,cAAgBN,EAAOjE,MAAMmE,EAAK,GAAMC,EAAe,KAC5DhF,KAAKoF,cAAgBP,EAAOjE,MAAMmE,EAAK,GAAMC,EAAe,GAAK,IAEjEhF,KAAKc,cAAgB,EACrBd,KAAKqF,IAAMpF,EAAOd,WAClBa,KAAKxD,cAAWkD,EAChBM,KAAK1D,cAAWoD,EA1BpB,qDA6BkB4F,GAAgB,IAAD,OAC7BtF,KAAKxD,SAAWwD,KAAKX,KAAK3C,MAAMkH,SAAS2B,MACvC,SAACvI,GAAD,OAAOA,EAAEjC,QAAU,GAAQiC,EAAEsC,UAE/BU,KAAK1D,SAAW0D,KAAKX,KAAKmC,QAAQ+D,MAChC,SAACC,GAAD,OAAOA,EAAExK,GAAK,GAAKwK,EAAExK,KAAO,EAAKA,QAlCvC,gCAuCI,OAAOgF,KAAKxD,SAASzB,QAAUiF,OAvCnC,kCA0CqBO,GAEjB,KAAOP,KAAKc,cAAgBb,EAAOtB,UACjCqB,KAAKc,eAAiBb,EAAOtB,SAC7BqB,KAAKX,KAAKoG,UAAUzF,KAAMA,KAAKqF,IAAI9G,eAAgByB,KAAKxD,YA9C9D,wCAsD2B6C,GAAqB,IAAD,OACrCqG,EAAW7K,KAAKM,MAAM6E,KAAKc,eAC3B6E,EAAYjB,EAAQrF,EAAK3C,MAAMkH,UAAU,SAACrC,GAAD,OAAOA,EAAExG,QAAU,KAC5D6K,EAAYlB,EAAQrF,EAAKqB,YAAY,SAACa,GAAD,OAAOA,EAAExG,QAAU,KAC9D,MAAM,GAAN,OAAUiF,KAAK8E,KAAf,cAAyBY,EAAzB,aAAsCC,EAAtC,qBAA4DC,EAA5D,cA1DJ,gCA6DmBtG,EAAiB/C,GAChC,IAAMsJ,GACHvG,EAAS,GAAM,IAAO/C,EAAmByD,KAAKgF,cAC3Cc,EAAQxG,EAAS,GAAM,GAC7B,OAAOuF,EAAOjE,MAAMZ,KAAK+E,IAAKc,EAAYC,MAjE9C,6BAqEIf,EACAc,EACAC,GAES,IADTC,EACQ,uDADQ,EAEVC,EAAS,IAAIC,IACnBA,IAAOC,cAAcnB,EAAKc,EAAYC,EAAOE,GAFrC,IAIAxG,EAAYwG,EAAZxG,EAAG2G,EAASH,EAATG,EAAG5D,EAAMyD,EAANzD,EACd,OAAO,IAAI6D,IAAO5G,EAAG2G,EAAG5D,EAAGwD,OA9E/B,M,SCJYnB,O,mBAAAA,I,eAAAA,I,aAAAA,I,gBAAAA,M,KAOZ,IAAMyB,EAAkB,EAAVxL,KAAKC,GAENwL,EAAb,WASE,WACmBjH,EACDrE,EACAD,EACAT,EACT8B,EACArC,GACN,yBANgBsF,OAMjB,KALgBrE,KAKhB,KAJgBD,QAIhB,KAHgBT,WAGhB,KAFO8B,OAEP,KADOrC,WACP,KAfK8F,UAeL,OAdM0G,QAcN,OAbMC,WAaN,OAZKhM,cAYL,OAXKI,qBAWL,OAVM6L,iBAUN,OATM7G,YASN,EACAI,KAAKwG,MAAQ5B,EAAU8B,OACvB1G,KAAKxF,SAAW,IAAIL,IACpB6F,KAAKpF,gBAAkB,EACvBoF,KAAKyG,YAAc,EACnBzG,KAAKJ,OAASI,KAAK1F,SAAS+C,UAG5B2C,KAAKH,UAAOH,EACZM,KAAKuG,QAAK7G,EAzBd,qDA4BkB/B,GACdqC,KAAKH,KAAOG,KAAKX,KAAKa,KAAKyG,aAAa3G,KAAMrC,GAC9CqC,KAAKuG,GAAKvG,KAAK1F,SAAS8D,UAAU4B,KAAMA,KAAKX,KAAK3C,SA9BtD,kCAiCqB8D,GACjB,IAAMoG,EAAO,IAAuB,IAAhB5G,KAAKjF,MAAMC,GAE/B,OAAQgF,KAAKwG,OACX,KAAK5B,EAAU8B,OACb1G,KAAK6G,cAAcrG,GACnBR,KAAKH,KAAK9F,SAASqI,EAAIwE,EACvB,MAEF,KAAKhC,EAAUkC,IACb9G,KAAK6G,cAAcrG,GAGnB,IACM3C,EADkC,IAApBmC,KAAKhF,GAAK,EAAK,IACP,GAAMH,KAAKkM,IAAI/G,KAAKH,KAAKmH,SAAS5E,IAC9DpC,KAAKH,KAAK9F,SAASqI,EAAIwE,EAAO/L,KAAKK,IAAI,EAAG2C,MAhDlD,oCAqDwB2C,GACpBR,KAAKxF,SAASyM,iBAAiBzG,EAASR,KAAKjG,UAC7CiG,KAAKH,KAAK9F,SAASmN,SAASlH,KAAKjG,UAEjC,IAAIoN,EAAOnH,KAAKH,KAAKmH,SAAS5E,EAAIpC,KAAKpF,gBAAkB4F,EACrD2G,GAAQd,EACVc,GAAQd,EACCc,EAAO,IAChBA,GAAQd,GAEVrG,KAAKH,KAAKmH,SAAS5E,EAAI+E,IA/D3B,yCAmEI,OAAOnH,KAAKJ,OAASI,KAAK1F,SAAS+C,YAnEvC,kCAsEqBmD,GAEjB,GADIR,KAAKJ,QAAU,MAAOI,KAAKoH,SAASxC,EAAUyC,MAC9CrH,KAAKwG,QAAU5B,EAAU8B,OAA7B,CAMA,GAJA1G,KAAKuG,GAAIe,KAAK9G,GACdR,KAAK5D,KAAO4D,KAAKX,KAAK3C,MAAM6K,UAAUvH,KAAKjG,WAAaiG,KAAKjF,MAAMyB,SAErDwD,KAAKxF,SAASe,SAChB,GAAK,CACf,IAAMiM,EAAMrN,IAAQC,IAAID,IAAQsN,UAAWzH,KAAKxF,UAGhDwF,KAAKH,KAAKmH,SAAS5E,EACjBvH,KAAKC,GAAK,EAAID,KAAK6M,KAAKF,EAAMxH,KAAKxF,SAASe,UAGhDyE,KAAKH,KAAK8H,QAAQC,OAAO,GAAM,GAAM5H,KAAKzD,uBAtF9C,gCAyFoBwE,EAAcP,GAC9B,IAAMQ,EAAYhB,KAAKJ,OAASmB,EAAOP,EACvCR,KAAKJ,OAAS/E,KAAKyF,IAAIN,KAAK1F,SAAS+C,UAAWxC,KAAKK,IAAI,EAAG8F,MA3FhE,2BA6FcD,EAAcP,GACxBR,KAAKiB,WAAWF,EAAMP,KA9F1B,2BAgGcO,EAAcP,GACxBR,KAAKiB,UAAUF,EAAMP,KAjGzB,iCAoGoB7G,EAAc6G,GAC9B7G,EAAOkO,KAAK7H,KAAK1F,SAASgD,aAAckD,KArG5C,iCAwGoB7G,EAAc6G,GAC9B7G,EAAOkO,KAAK7H,KAAK1F,SAASiD,aAAciD,KAzG5C,6BA4GgB7G,EAAc6G,GAC1B7G,EAAOmO,KAAK9H,KAAK1F,SAASkD,WAAYgD,GAClCR,KAAKX,KAAK0I,QAAQ/H,KAAMrG,IAC1BqG,KAAK8H,KAAK9H,KAAK1F,SAASmD,WAAY+C,KA/G1C,gCAoHI,OAAOR,KAAKwG,QAAU5B,EAAU8B,QAAU1G,KAAKwG,QAAU5B,EAAUkC,MApHvE,kCAwHI,OAAO9G,KAAKzD,mBAAqB,MAxHrC,+BA2HkBiK,GACd,GAAIxG,KAAKwG,QAAUA,EAAnB,CAEA,OAAQA,GACN,KAAK5B,EAAUkC,IACb9G,KAAKxF,SAASE,aAAa,GAE3BsF,KAAKpF,gBAAmBoF,KAAKhF,GAAK,EAAK,EAAI,EAC3C,MAEF,KAAK4J,EAAUyC,KACf,KAAKzC,EAAUoD,KACbhI,KAAKH,KAAKc,iBAAiBC,MAAQZ,KAAKjF,MAAMqK,cAC9CpF,KAAKuG,QAAK7G,EACVM,KAAKxF,SAASE,aAAa,GAC3BsF,KAAKH,KAAK9F,SAASqI,EAAI,IAAuB,KAAhBpC,KAAKjF,MAAMC,GAG7CgF,KAAKwG,MAAQA,OA7IjB,KCGayB,EAAb,WAIE,WAA6B5I,GAAa,yBAAbA,OAAY,KAHjC1B,WAGiC,OAFjCuK,aAEiC,EACvClI,KAAKrC,WAAQ+B,EACbM,KAAKkI,QAAU,GANnB,qDASkBvK,GACdqC,KAAKrC,MAAQA,EAEbA,EAAMwK,aAAe,IAAIlC,IAAO,EAAG,EAAG,GAEtC,IAAMmC,EAAS,IAAIC,IACjB,UACA,EACA,EACA,GACA,IAAIlO,IAAQ,EAAG,EAAG,IAClBwD,GAEFyK,EAAOE,eAAiB,GACxBF,EAAOG,eAAkB1N,KAAKC,GAAK,EAAK,GACxCsN,EAAOI,iBAAmB,GAC1BJ,EAAOK,iBAAmB,IAC1BL,EAAOM,UAAUvO,IAAQwO,QAEzB,IAAMC,EAASjL,EAAMkL,YAAYC,qBACjCV,EAAOW,cAAcH,GAAQ,GAO7B,IALA,IAAMI,EAAS,CACb,IAAIC,IAAiB,QAAS,IAAI9O,IAAQ,EAAG,GAAI,GAAIwD,GACrD,IAAIsL,IAAiB,QAAS,IAAI9O,IAAQ,EAAG,EAAG,GAAIwD,GACpD,IAAIsL,IAAiB,QAAS,IAAI9O,KAAS,EAAG,EAAG,GAAIwD,IAE9C7B,EAAI,EAAGA,EAAIkN,EAAOzN,OAAQO,IACjCkN,EAAOlN,GAAGoN,UAAY,KArC5B,gCA+CoBrJ,EAAoBsJ,GACpC,GAAIA,EACF,IAAK,IAAIrN,EAAI,EAAGA,EAAIkE,KAAKkI,QAAQ3M,OAAQO,IACvCkE,KAAKkI,QAAQpM,GAAGsN,gBAAgBvJ,KAlDxC,mCA6EsBzD,EAAYuB,GACzBsK,EAAKoB,WACRpB,EAAKoB,SAAWpB,EAAKqB,iBAAiB3L,EAAOsC,EAAOvB,eACpDsB,KAAKuJ,UAAUtB,EAAKoB,UAAU,IAHY,MAMxBjN,EAAKuD,OAAjBwC,EANoC,EAMpCA,EAAGC,EANiC,EAMjCA,EAAGI,EAN8B,EAM9BA,EACRgH,EAAWvB,EAAKoB,SAASI,eAAd,mBAAyCtH,EAAzC,YAA8CC,EAA9C,YAAmDI,IAIpE,OAHAgH,EAASzP,SAASmN,SAAS9K,EAAKW,SAChCyM,EAASE,WAAY,EACrB1J,KAAKuJ,UAAUC,GAAU,GAClBA,IAxFX,wCA+G4B9P,GACxB,IAAMiQ,EAAQjQ,EAAKY,SAASU,GAM5B,OALKiN,EAAK2B,SAASD,KACjB1B,EAAK2B,SAASD,GAAS1B,EAAK4B,iBAAiB7J,KAAKrC,MAAOjE,EAAM,GAAK,IACpEsG,KAAKuJ,UAAUtB,EAAK2B,SAASD,IAAQ,IAGhC1B,EAAK2B,SAASD,KAtHzB,mCAyHsBjQ,EAAYiE,GAC9B,IACM6L,EADgBxJ,KAAK8J,kBAAkBpQ,GACd+P,eAAd,mBAAyC/P,EAAKsB,KAM/D,OALAwO,EAASE,WAAY,EACrBF,EAAS7I,iBAAiBC,MAAQlH,EAAKqB,MAAMoK,cAC7CqE,EAASzP,SAASmN,SAASxN,EAAKK,UAEhCiG,KAAKuJ,UAAUC,GAAU,GAClBA,KAjIX,wCAwDkC7L,EAAcC,GAC5C,IAAMmM,EAAW,IAAIC,IAAJ,mBAAyCrM,GAC1DoM,EAASE,cAAgB,IAAIhE,IAAO,GAAK,GAAK,KAE9C,IAAMpG,EAAO3B,IAAYgM,WAAZ,WAEX,CAAEtM,SAAQI,aAAc,EAAGmM,gBAAiBC,IAAKC,YACjD1M,GAWF,OATAkC,EAAKyK,gBAAiB,EAEtBzK,EAAKmH,SAAS7E,EAAc,GAAVtH,KAAKC,GACvB+E,EAAKkK,SAAWA,EAChBlK,EAAK6J,WAAY,EAEjB7J,EAAK0K,wBAAwB,QAAS,GACtC1K,EAAKc,iBAAiBC,MAAQ,IAAIwF,IAAO,EAAG,EAAG,EAAG,GAE3CvG,IA1EX,uCA6FIlC,EACAjE,EACAkE,EACAC,GAEA,IAAMkM,EAAW,IAAIC,IAAJ,mBAAyCrM,GAC1DoM,EAASE,cAAgB,IAAIhE,IAAO,GAAK,GAAK,IAE9C,IAAMpG,EAAOnG,EAAKY,SAASoD,YAAYC,EAAOC,EAAQC,GAOtD,OANAgC,EAAKkK,SAAWA,EAChBlK,EAAK6J,WAAY,EAEjB7J,EAAK0K,wBAAwB,QAAS,GACtC1K,EAAKc,iBAAiBC,MAAQ,IAAIwF,IAAO,EAAG,EAAG,EAAG,GAE3CvG,MA5GX,KAAaoI,EAuDIoB,c,EAvDJpB,EA2Fa2B,SAAmB,GChGtC,IAAMY,EAAb,WAaE,aAAe,yBAZChJ,aAYF,OAXEL,UAWF,OAVEzE,WAUF,OATE+N,cASF,OARP/J,gBAQO,OAPP/C,WAOO,OANP+M,YAMO,OALPxK,UAKO,OAHNyK,eAGM,OAFNC,kBAA4B,EAGlC5K,KAAKmB,KAAO,IAAI0D,EAAO7E,KAAM,EAAG,OAAQ,IAAK,KAC7C,IAAM6K,EAAU,IAAIhG,EAAO7E,KAAM,EAAG,QAAS,IAAK,GAC5C8K,EAAU,IAAIjG,EAAO7E,KAAM,EAAG,MAAO,EAAG,GAC9CA,KAAKwB,QAAU,CAACxB,KAAKmB,KAAM0J,EAASC,GAEpC9K,KAAKtD,MAAQ,IAAI+G,EAAMzD,KAAM,GAAG,kBAAM,KACtCA,KAAKyK,SAAW,GAChBzK,KAAKU,WAAa,GAClBV,KAAKE,KAAO,IAAI+H,EAAKjI,MACrBA,KAAKrC,WAAQ+B,EACbM,KAAK0K,YAAShL,EACdM,KAAK2K,UAAY,GAzBrB,qDA4BkBhN,GACdqC,KAAKE,KAAK6D,SAASpG,GAEnBqC,KAAKtD,MAAMqH,SAASpG,GACpB,IAAK,IAAI7B,EAAI,EAAGA,EAAIkE,KAAKU,WAAWnF,OAAQO,IAC1CkE,KAAKU,WAAW5E,GAAGiI,SAASpG,GAG9B,IAAK,IAAI7B,EAAI,EAAGA,EAAIkE,KAAKwB,QAAQjG,OAAQO,IAAK,CAC7BkE,KAAKwB,QAAQ1F,GACrBiI,SAASpG,GAGlBqC,KAAKrC,MAAQA,EACbqC,KAAK+K,UA1CT,8BA6CkB,IAAD,cACa/K,KAAKwB,QADlB,GACJwJ,EADI,KACGC,EADH,KAEPC,EAAWlL,KAAKtD,MAAMI,WAAWkO,EAAMxO,UACvC2O,EAAYnL,KAAKtD,MAAMI,WAAWmO,EAAOzO,UAHlC,cAKMyD,EAAOhB,UALb,GAKNmM,EALM,KAKDC,EALC,KAMbrL,KAAKyF,UAAUuF,EAAOK,EAAKL,EAAMxO,UACjCwD,KAAKyF,UAAUwF,EAAQI,EAAKJ,EAAOzO,UACnCwD,KAAKyF,UAAUuF,EAAOI,EAAKF,EAAS,IACpClL,KAAKyF,UAAUwF,EAAQG,EAAKD,EAAU,MAtD1C,gCAyDmBpQ,EAAeT,EAAoB8B,GAClD,IAAMkP,EAAStL,KAAKyK,SAASlP,OACvB7B,EAAO,IAAI4M,EAAKtG,KAAMsL,EAAQvQ,EAAOT,EAAU8B,EAAMA,EAAKW,SAChEiD,KAAKrC,OAASjE,EAAKqK,SAAS/D,KAAKrC,OACjCqC,KAAKyK,SAAS3G,KAAKpK,GACnBsG,KAAKU,WAAWoD,KAAKpK,KA9DzB,6BAiEgB8G,GACZR,KAAKgE,YAAYxD,GAEjBR,KAAK4K,mBAAqBpK,EACtBR,KAAKuL,WAAavL,KAAK4K,mBAAqB3K,EAAOzB,mBACrDwB,KAAKiE,YAAYjE,KAAK4K,mBACtB5K,KAAK4K,kBAAoB,KAvE/B,kCA2EsBpK,GAClB,GAAKR,KAAKrC,MAAV,CAEAqC,KAAKtD,MAAMsH,YAAYxD,GACvB,IAAK,IAAI1E,EAAI,EAAGA,EAAIkE,KAAKU,WAAWnF,OAAQO,IAC1CkE,KAAKU,WAAW5E,GAAGkI,YAAYxD,MAhFrC,kCAoFsBA,GAClBR,KAAKtD,MAAMuH,YAAYzD,GACvB,IAAK,IAAI1E,EAAI,EAAGA,EAAIkE,KAAKU,WAAWnF,OAAQO,IAC1CkE,KAAKU,WAAW5E,GAAGmI,YAAYzD,GAGjCR,KAAKU,WAAaV,KAAKyK,SAASnJ,QAAO,SAACC,GAAD,OAAOA,EAAEiK,aAEhD,IAAK,IAAI1P,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAC3B,IAAM2P,EAASzL,KAAKwB,QAAQ1F,GAE5B,GADA2P,EAAOxH,YAAYzD,IACdiL,EAAOD,UAAW,CACrB,IAAMd,EAAS1K,KAAKwB,QAAQ,EAAI1F,GAChCkE,KAAK0L,WAAWhB,IAIpB1K,KAAK2L,oBArGT,iDAwGoCC,GAA8B,IAAD,OAE7D,OADA5L,KAAK2K,UAAU7G,KAAK8H,GACb,WACL,EAAKjB,UAAY,EAAKA,UAAUrJ,QAAO,SAACuK,GAAD,OAAOA,IAAMD,QA3G1D,wCAgHI,IAAK,IAAI9P,EAAI,EAAGA,EAAIkE,KAAK2K,UAAUpP,OAAQO,IAAK,CAC9C,IAAM8P,EAAW5L,KAAK2K,UAAU7O,GAChC8P,EAASE,SAAWF,EAASE,QAAQ9L,SAlH3C,gCAuHI,YAAuBN,IAAhBM,KAAK0K,SAvHhB,iCA0HqBA,GACjB1K,KAAK0K,OAASA,EAEd,IAAK,IAAI5O,EAAI,EAAGA,EAAIkE,KAAKU,WAAWnF,OAAQO,IAAK,CAC/C,IAAMpC,EAAOsG,KAAKU,WAAW5E,GAC7BpC,EAAK0N,SAAS1N,EAAKqB,QAAU2P,EAAS9F,EAAUkC,IAAMlC,EAAUoD,SA/HtE,8BAmIiBtO,EAAY0C,GACzB,OACEA,EAAKkD,QACL5F,EAAKqB,QAAUqB,EAAKrB,OACpBqB,EAAKG,mBAAqB0D,EAAOnB,yBAvIvC,KCgBeiN,G,MAnByB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,OACjDC,EAAWC,iBAA8B,MAEzCC,EAAcC,uBAClB,SAAChN,GACK6M,EAASJ,UACXI,EAASJ,QAAQQ,UAAYN,EAAa3M,MAG9C,CAAC6M,EAAUF,IAOb,OAJAO,qBAAU,WACRN,EAAOH,QAAUM,IAChB,CAACH,EAAQG,IAEL,yBAAKI,UAAU,QAAQC,IAAKP,MCT/BQ,G,MAAkD,SAAC,GAAD,IACtDC,EADsD,EACtDA,KACAjG,EAFsD,EAEtDA,OACAkG,EAHsD,EAGtDA,QAHsD,OAKtD,4BAAQJ,UAAU,oBAAoBI,QAASA,EAASC,SAAUnG,GAC/DiG,KASCG,EAAkE,SAAC,GAAD,IACtEC,EADsE,EACtEA,OACAC,EAFsE,EAEtEA,OACAC,EAHsE,EAGtEA,MAHsE,OAKtE,kBAAC,EAAD,CACEN,KAAMI,EAAO3P,YACbsJ,OAAQqG,IAAWC,EACnBJ,QAAS,kBAAMK,EAAMF,OAqDVG,EA3CqC,SAAC,GAI9C,IAHLzB,EAGI,EAHJA,OACA1R,EAEI,EAFJA,SACAkS,EACI,EADJA,OAEMkB,EAAYhB,iBAA8B,MAD5C,EAEkBiB,mBAAiC3B,EAAOpG,KAF1D,mBAEGA,EAFH,KAEQgI,EAFR,KAIEC,EAAqBjB,uBACzB,SAAChN,GACK8N,EAAUrB,UACZqB,EAAUrB,QAAQQ,UAAYb,EAAO8B,kBAAkBlO,MAG3D,CAAC8N,EAAW1B,IAGdc,qBAAU,WACJN,IACFA,EAAOH,QAAUwB,KAElB,CAACrB,EAAQqB,IAEZf,qBAAU,WACRd,EAAOpG,IAAMA,IACZ,CAACoG,EAAQpG,IAEZ,IAAMmH,EAAS,sCAAkCzS,GACjD,OACE,yBAAKyS,UAAWA,GACd,yBAAKA,UAAU,WAAWC,IAAKU,IAC9BlN,EAAOf,mBAAmBvD,KAAI,SAACoR,GAAD,OAC7B,kBAAC,EAAD,CACES,IAAKT,EAAO/R,GACZ+R,OAAQA,EACRC,OAAQ3H,EACR4H,MAAOI,S,QC5DFI,G,MAhB+B,SAAC,GAAc,IAAZpO,EAAW,EAAXA,KAM/C,OACE,kBAAC,IAAD,CACEqO,WAAS,EACTC,aAAc,SAAChQ,GAAD,OAAW0B,EAAK0E,SAASpG,IACvCiQ,SATa,SAACjQ,GAChB,IAAMkQ,EAAgBlQ,EAAMkL,YAAYiF,eACxCzO,EAAK0O,OAAOF,EAAgB,MAQ1B7S,GAAG,kBCmBMgT,G,MA/ByB,SAAC,GAAgB,IAAd/B,EAAa,EAAbA,OACnCgC,EAAS9B,iBAA8B,MAEvC+B,EAAc7B,uBAClB,SAAChN,GACC,GAAIA,EAAK1B,OAASsQ,EAAOnC,QAAS,CAChC,IAAMqC,EAAMtT,KAAK+H,MAAMvD,EAAK1B,MAAMkL,YAAYuF,UAM9CH,EAAOnC,QAAQQ,UAAf,eAAmC6B,MAGvC,CAACF,IASH,OANA1B,qBAAU,WACJN,IACFA,EAAOH,QAAUoC,KAElB,CAACjC,EAAQiC,IAGV,yBAAK1B,UAAU,SACb,yBAAKA,UAAU,YAAYC,IAAKwB,O,MCEvBI,MA/Bf,WACE,IAAMhP,EAAOiP,mBAAQ,kBAAM,IAAI9D,IAAQ,IAEjC+D,EAAWpC,sBAA8BzM,GACzC8O,EAAQrC,sBAA8BzM,GACtC+O,EAAQtC,sBAA8BzM,GACtCwM,EAAWC,sBAA8BzM,GAU/C,OARA6M,qBAAU,kBAAMlN,EAAKqP,2BAA2BH,KAAW,CAAClP,EAAMkP,IAClEhC,qBAAU,kBAAMlN,EAAKqP,2BAA2BF,KAAQ,CAACnP,EAAMmP,IAC/DjC,qBAAU,kBAAMlN,EAAKqP,2BAA2BD,KAAQ,CAACpP,EAAMoP,IAC/DlC,qBAAU,kBAAMlN,EAAKqP,2BAA2BxC,KAAW,CAAC7M,EAAM6M,IAMhE,yBAAKM,UAAU,cACb,kBAAC,EAAD,CAASP,OAAQsC,IACjB,kBAAC,EAAD,CAASvC,aANgB,SAAC3M,GAAD,OAC3BA,EAAKqL,OAAL,UAAiBrL,EAAKqL,OAAO5F,KAA7B,UAA4C,IAKGmH,OAAQC,IACrD,kBAAC,EAAD,CAAa7M,KAAMA,IACnB,kBAAC,EAAD,CAAgBtF,SAAS,OAAO0R,OAAQpM,EAAKmC,QAAQ,GAAIyK,OAAQuC,IACjE,kBAAC,EAAD,CACEzU,SAAS,QACT0R,OAAQpM,EAAKmC,QAAQ,GACrByK,OAAQwC,MC1BhBE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.2444e042.chunk.js","sourcesContent":["import { Vector3 } from '@babylonjs/core';\nimport { Unit } from '../core';\n\nexport type Predicate = (unit: Unit) => boolean;\n\nexport function* moveTowards(\n  unit: Unit,\n  target: Vector3,\n  interrupt: Predicate\n) {\n  const targetDirection = target.subtract(unit.position).normalize();\n  let curDirection = targetDirection.clone();\n\n  while (Vector3.Dot(targetDirection, curDirection) > 0) {\n    targetDirection\n      .normalize()\n      .scaleToRef(unit.unitType.maxSpeed, unit.velocity);\n\n    yield; // wait for next update\n\n    if (interrupt(unit)) break;\n\n    target.subtractToRef(unit.position, curDirection);\n  }\n\n  unit.velocity.scaleInPlace(0);\n}\n\nexport function* doWorkWhile(unit: Unit, pred: Predicate) {\n  unit.angularVelocity = Math.PI * (unit.owner.id === 1 ? 3 : -3);\n  yield* waitWhile(unit, pred);\n  unit.angularVelocity = 0;\n}\n\nexport function* waitWhile(unit: Unit, pred: Predicate) {\n  while (pred(unit)) {\n    yield;\n  }\n}\n\nexport function* waitUntil(unit: Unit, pred: Predicate) {\n  while (!pred(unit)) {\n    yield;\n  }\n}\n\nexport function* wait(duration: number) {\n  let elapsed = 0;\n  while (elapsed < duration) {\n    elapsed += yield;\n  }\n}\n","export type WeightFn<T> = (t: T) => number;\n\nexport function randomInt(max: number): number {\n  return Math.floor(Math.random() * max);\n}\n\nexport function randomElem<T>(array: T[]): T | undefined {\n  if (array.length > 0) {\n    return array[randomInt(array.length)];\n  }\n  return undefined;\n}\n\nfunction sum(array: number[]): number {\n  // simpler to under than reduce\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\nexport function randomWeightedElem<T>(\n  array: T[],\n  weight: WeightFn<T>\n): T | undefined {\n  if (array.length === 0) return undefined;\n\n  const weights = array.map(weight);\n  let selected = randomInt(sum(weights));\n  for (let i = 0; i < weights.length; i++) {\n    selected -= weights[i];\n    if (selected < 0) return array[i];\n  }\n\n  return array[array.length - 1];\n}\n\nexport function lerp(source: number, target: number, amount: number): number {\n  return source * amount + target * (1 - amount);\n}\n","import { Unit, Board, Tile } from '../core';\nimport { doWorkWhile, moveTowards } from './actions';\nimport { randomWeightedElem, WeightFn } from '../util/util';\n\nfunction canDoWork(unit: Unit): boolean {\n  const curTile = unit.tile;\n  if (!curTile) return false;\n\n  if (curTile.occupancy[unit.owner.opponent.id] > 0) {\n    // enemy spotted\n    return true;\n  }\n\n  if (curTile.owner === unit.owner.opponent) {\n    // enemy tile, try to destroy it\n    return true;\n  }\n\n  if (curTile.owner === unit.owner && curTile.healthProportion() < 0.99) {\n    // repair owned tile\n    return true;\n  }\n\n  if (curTile === unit.owner.homeTile && unit.isDamaged()) {\n    // heal here\n    return true;\n  }\n\n  return false;\n}\n\nexport function* randomWalkAI(\n  unit: Unit,\n  board: Board,\n  tilePref: WeightFn<Tile>\n) {\n  function nextTile(): Tile {\n    if (unit.isDamaged()) {\n      return board.neighbourClosestTo(unit.tile, unit.owner.homeTile);\n    }\n    const next = randomWeightedElem(board.neighbours(unit.tile), tilePref);\n    return next || unit.owner.homeTile;\n  }\n\n  while (true) {\n    if (canDoWork) {\n      yield* doWorkWhile(unit, canDoWork);\n    }\n\n    // TODO Turn and rotate first\n    yield* moveTowards(unit, nextTile().toPos(), canDoWork);\n  }\n}\n\nexport function* offensiveUnitAI(unit: Unit, board: Board) {\n  yield* randomWalkAI(unit, board, (t) => {\n    const diff = Math.abs(unit.owner.id - t.owner.id) + 1;\n    return diff * diff * diff;\n  });\n}\n\nexport function* defensiveUnitAI(unit: Unit, board: Board) {\n  yield* randomWalkAI(unit, board, (t) => {\n    const diff = 2 - Math.abs(unit.owner.id - t.owner.id) + 1;\n    return diff * diff * diff;\n  });\n}\n","import { Mesh, MeshBuilder, Scene } from '@babylonjs/core';\nimport { defensiveUnitAI, offensiveUnitAI } from '../ai/randomWalk';\nimport { Unit } from './unit';\nimport { Board } from './board';\nimport { randomElem } from '../util/util';\nimport { UnitProductionStrategy, UnitType } from './types';\n\nconst offenseUT: UnitType = {\n  id: 0,\n  displayName: 'Offensive',\n  maxHealth: 10,\n\n  maxSpeed: 1.5,\n  attackVsUnit: 4,\n  attackVsTile: 2,\n  repairTile: 0.5,\n  repairSelf: 0.5,\n\n  meshFactory: offensiveMeshFactory,\n  aiFactory: offensiveAIFactory,\n};\n\nconst defenseUT: UnitType = {\n  id: 1,\n  displayName: 'Defensive',\n  maxHealth: 15,\n\n  maxSpeed: 2,\n  attackVsUnit: 3,\n  attackVsTile: 0.25,\n  repairTile: 2,\n  repairSelf: 1,\n\n  meshFactory: defensiveMeshFactory,\n  aiFactory: defensiveAIFactory,\n};\n\nfunction offensiveMeshFactory(\n  scene: Scene,\n  radius: number,\n  height: number\n): Mesh {\n  const options = {\n    diameter: 2 * radius,\n    height,\n    tessellation: 3,\n    enclose: true,\n  };\n  return MeshBuilder.CreateCylinder('offUnit', options, scene);\n}\n\nfunction defensiveMeshFactory(\n  scene: Scene,\n  radius: number,\n  height: number\n): Mesh {\n  const options = {\n    diameter: 1.7 * radius,\n    height,\n    tessellation: 5,\n    enclose: true,\n  };\n  return MeshBuilder.CreateCylinder('defUnit', options, scene);\n}\n\nfunction offensiveAIFactory(unit: Unit, board: Board): Generator {\n  return offensiveUnitAI(unit, board);\n}\n\nfunction defensiveAIFactory(unit: Unit, board: Board): Generator {\n  return defensiveUnitAI(unit, board);\n}\n\nconst offenseOnlyUPS: UnitProductionStrategy = {\n  id: 0,\n  displayName: 'Offensive',\n  nextUnitType: () => offenseUT,\n};\n\nconst defenseOnlyUPS: UnitProductionStrategy = {\n  id: 1,\n  displayName: 'Defensive',\n  nextUnitType: () => defenseUT,\n};\n\nconst randomUPS: UnitProductionStrategy = {\n  id: 2,\n  displayName: 'Random',\n  nextUnitType: () => randomElem([offenseUT, defenseUT])!,\n};\n\nconst rateScale = 1;\nexport default {\n  minDurationState: 0.05 / rateScale, // update state every 50ms\n\n  tileSize: 2, // how large tiles are in reality\n  drawnTileSize: 0.98 * 2, // how large tiles are drawn -- leave space for a gap\n\n  unitCost: 10,\n  tileMaxHealth: 20,\n  homeTileMaxHealth: 50,\n  tileControlThreshold: 0.8, // if the health > maxHealth * threshold, then this tile produces resources for its owner\n  minUnitsToCapture: 2, // need at least 2 units before a tile can be captured\n\n  // all these are in per second\n  resourcesRate: rateScale,\n\n  unitTypes: [offenseUT, defenseUT],\n  unitProdStrategies: [offenseOnlyUPS, defenseOnlyUPS, randomUPS],\n  defaultUPS: randomUPS,\n};\n","import { InstancedMesh, Scene, Vector3 } from '@babylonjs/core';\nimport config from './config';\nimport { Player } from './player';\nimport { Unit } from './unit';\nimport { Game } from './game';\nimport { randomElem } from '../util/util';\n\nexport class Tile {\n  // using q, r, s cubic coords\n  public readonly coords: Vector3;\n  private health: number;\n  private readonly maxHealth: number;\n  public mesh: InstancedMesh;\n  public occupancy: number[];\n\n  public constructor(\n    private readonly game: Game,\n    public owner: Player,\n    public readonly isHome: boolean,\n    q: number,\n    r: number,\n    s: number | undefined = undefined\n  ) {\n    if (s === undefined) {\n      s = -(q + r);\n    } else if (q + r + s !== 0) {\n      console.error('Attempting to create an invalid Tile', { q, r, s });\n    }\n\n    this.coords = new Vector3(q, r, s);\n    this.mesh = undefined!; // init'd on generate\n    this.maxHealth = isHome ? config.homeTileMaxHealth : config.tileMaxHealth;\n    this.health = isHome ? this.maxHealth : 0;\n    this.occupancy = [0, 0, 0];\n  }\n\n  public generate(scene: Scene) {\n    this.mesh = this.game.view.makeTileMesh(this, scene);\n  }\n\n  public equals(other: Tile): boolean {\n    return this.coords.equals(other.coords);\n  }\n\n  public healthProportion(): number {\n    return Math.min(1, Math.max(0, this.health / this.maxHealth));\n  }\n\n  public updateDrawn(_elapsed: number) {\n    // nothing needs to be updated per frame\n  }\n\n  public updateState(elapsed: number) {\n    const { resourcesRate, tileControlThreshold } = config;\n\n    this.resolveUnits(this.game.aliveUnits, elapsed);\n\n    this.mesh.instancedBuffers.color = this.owner.tileColor(\n      this.isHome,\n      this.healthProportion()\n    );\n\n    if (this.healthProportion() > tileControlThreshold) {\n      this.owner.resourceCount += elapsed * resourcesRate;\n    }\n  }\n\n  private incHealth(rate: number, elapsed: number) {\n    const newHealth = this.health + rate * elapsed;\n    this.health = Math.min(this.maxHealth, Math.max(0, newHealth));\n  }\n  public harm(rate: number, elapsed: number) {\n    this.incHealth(-rate, elapsed);\n  }\n  public heal(rate: number, elapsed: number) {\n    this.incHealth(rate, elapsed);\n  }\n\n  private canCapture(occupiers: Unit[]): boolean {\n    return (\n      this.owner === this.game.gaia &&\n      occupiers.length >= config.minUnitsToCapture\n    );\n  }\n\n  private resolveUnits(units: Unit[], elapsed: number) {\n    const unitsOnTile = units.filter((u) => u.tile === this);\n    if (unitsOnTile.length === 0) return;\n\n    const [gaia, p1, p2] = this.game.players;\n    const p1Units = unitsOnTile.filter((u) => u.owner === p1);\n    const p2Units = unitsOnTile.filter((u) => u.owner === p2);\n    this.occupancy = [0, p1Units.length, p2Units.length];\n\n    if (p1Units.length > 0 && p2Units.length > 0) {\n      p1Units.forEach((u) => u.attackUnit(randomElem(p2Units)!, elapsed));\n      p2Units.forEach((u) => u.attackUnit(randomElem(p1Units)!, elapsed));\n    } else {\n      const soleOccupier = unitsOnTile[0].owner;\n      if (this.canCapture(unitsOnTile)) {\n        this.owner = soleOccupier;\n      }\n\n      if (this.owner === soleOccupier) {\n        unitsOnTile.forEach((u) => u.repair(this, elapsed));\n      } else if (this.owner !== gaia) {\n        unitsOnTile.forEach((u) => u.attackTile(this, elapsed));\n        if (this.healthProportion() < 0.1) {\n          this.owner = gaia;\n        }\n      }\n    }\n  }\n\n  public toPos(): Vector3 {\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\n    const { x, y } = this.coords;\n    return new Vector3(\n      1.5 * x * config.tileSize,\n      0,\n      sqrt3 * (0.5 * x + y) * config.tileSize\n    );\n  }\n\n  public static distBetween(a: Tile, b: Tile): number {\n    const { x, y, z } = a.coords.subtract(b.coords);\n    return 0.5 * (Math.abs(x) + Math.abs(y) + Math.abs(z));\n  }\n\n  // increment in CCW order, starting with straight up (north).\n  public static direction = {\n    NN: new Vector3(+0, +1, -1), // north\n    NE: new Vector3(+1, +0, -1), // north east\n    SE: new Vector3(+1, -1, +0), // south east\n    SS: new Vector3(+0, -1, +1), // south\n    SW: new Vector3(-1, +0, +1), // south west\n    NW: new Vector3(-1, +1, +0), // north west\n  };\n  public static directions = [\n    Tile.direction.NN,\n    Tile.direction.NE,\n    Tile.direction.SE,\n    Tile.direction.SS,\n    Tile.direction.SW,\n    Tile.direction.NW,\n  ];\n\n  public static roundCoords(qf: number, rf: number): { q: number; r: number } {\n    const sf = -qf - rf;\n    const q = Math.round(qf);\n    const r = Math.round(rf);\n    const s = Math.round(sf);\n\n    const qDist = Math.abs(qf - q);\n    const rDist = Math.abs(rf - r);\n    const sDist = Math.abs(sf - s);\n\n    if (qDist > Math.max(rDist, sDist)) {\n      return { q: -r - s, r };\n    }\n    if (rDist > sDist) {\n      return { q, r: -q - s };\n    }\n    return { q, r };\n  }\n}\nconst sqrt3 = Math.sqrt(3);\n","import { Scene, Vector3 } from '@babylonjs/core';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Game } from './game';\n\ntype TileFilter = (q: number, r: number, s: number) => boolean;\n\nexport class Board {\n  private readonly tiles: Tile[][]; // indexed by q,r\n  public readonly tileList: Tile[]; // just a list\n\n  constructor(\n    private readonly game: Game,\n    private readonly radius: number, // integer, number of tiles from center\n    acceptTile: TileFilter\n  ) {\n    this.tiles = [];\n    this.tileList = [];\n\n    const R = radius;\n    for (let q = -R; q <= R; q++) {\n      this.tiles[q + R] = [];\n\n      for (let r = -R; r <= R; r++) {\n        const s = -(q + r);\n\n        if (-R <= s && s <= R && acceptTile(q, r, s)) {\n          const isHome = q === 0 && Math.abs(r) === R;\n          const owner = game.players[isHome ? (r === R ? 1 : 2) : 0];\n          const tile = new Tile(game, owner, isHome, q, r);\n          this.tiles[q + R][r + R] = tile;\n          this.tileList.push(tile);\n        }\n      }\n    }\n  }\n\n  public generate(scene: Scene) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      const tile = this.tileList[i];\n      tile.generate(scene);\n    }\n  }\n\n  public updateDrawn(elapsed: number) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      this.tileList[i].updateDrawn(elapsed);\n    }\n  }\n\n  public updateState(elapsed: number) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      this.tileList[i].updateState(elapsed);\n    }\n  }\n\n  public tile(q: number, r: number): Tile | undefined {\n    const R = this.radius;\n    if (-R <= q && q <= R && -R <= r && r <= R) {\n      return this.tiles[q + R][r + R];\n    }\n    return undefined;\n  }\n\n  public neighbours(tile: Tile): Tile[] {\n    return Tile.directions\n      .map((dir) => this.neighbour(tile, dir))\n      .filter((t) => !!t) as Tile[];\n  }\n\n  public neighbourClosestTo(tile: Tile, target: Tile): Tile {\n    const neighbours = this.neighbours(tile);\n    if (neighbours.length === 0) return target;\n\n    const dist = neighbours.map((n) => Tile.distBetween(n, target));\n\n    let closest = 0;\n    for (let i = 1; i < neighbours.length; i++) {\n      if (dist[i] < dist[closest]) closest = i;\n    }\n    return neighbours[closest];\n  }\n\n  public neighbour(tile: Tile, direction: Vector3): Tile | undefined {\n    return this.tile(tile.coords.x + direction.x, tile.coords.y + direction.y);\n  }\n\n  public posToTile(pos: Vector3): Tile | undefined {\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\n    const x = pos.x / config.tileSize;\n    const z = pos.z / config.tileSize;\n    const { q, r } = Tile.roundCoords((2.0 / 3.0) * x, (sqrt3 * z - x) / 3.0);\n    return this.tile(q, r);\n  }\n}\nconst sqrt3 = Math.sqrt(3);\n","import { Color3, Color4, Scene } from '@babylonjs/core';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Game } from './game';\nimport { UnitProductionStrategy } from './types';\n\nfunction countIf<T>(array: T[], predicate: (t: T) => boolean) {\n  return array.filter(predicate).length;\n}\n\nexport class Player {\n  public readonly stdTileColor: Color4;\n  public readonly homeTileColor: Color4;\n  public readonly fullUnitColor: Color4;\n  public readonly deadUnitColor: Color4;\n  public opponent: Player;\n\n  public homeTile: Tile;\n  public resourceCount: number;\n  public ups: UnitProductionStrategy;\n\n  constructor(\n    private readonly game: Game,\n    public readonly id: number,\n    public readonly name: string,\n    private readonly hue: number,\n    private readonly maxSaturation: number\n  ) {\n    this.stdTileColor = Player.color(hue, 0.4 * maxSaturation, 0.8);\n    this.homeTileColor = Player.color(hue, 0.8 * maxSaturation, 0.6);\n    this.fullUnitColor = Player.color(hue, 0.9 * maxSaturation, 0.95);\n    this.deadUnitColor = Player.color(hue, 0.4 * maxSaturation, 0.3, 0.3);\n\n    this.resourceCount = 0;\n    this.ups = config.defaultUPS;\n    this.homeTile = undefined!; // init'd on generate\n    this.opponent = undefined!; // init'd on generate\n  }\n\n  public generate(_scene: Scene) {\n    this.homeTile = this.game.board.tileList.find(\n      (t) => t.owner === this && t.isHome\n    )!;\n    this.opponent = this.game.players.find(\n      (p) => p.id > 0 && p.id !== this.id\n    )!;\n  }\n\n  public isAlive(): boolean {\n    return this.homeTile.owner === this;\n  }\n\n  public updateState(_elapsed: number) {\n    // automatically spawn unit when there are enough resources\n    while (this.resourceCount > config.unitCost) {\n      this.resourceCount -= config.unitCost;\n      this.game.spawnUnit(this, this.ups.nextUnitType(), this.homeTile);\n    }\n  }\n\n  // ===========================================\n  // Display Specific below -- should perhaps be in a PlayerView class?\n  // ===========================================\n\n  public statusDisplayText(game: Game): string {\n    const resCount = Math.floor(this.resourceCount);\n    const tileCount = countIf(game.board.tileList, (u) => u.owner === this);\n    const unitCount = countIf(game.aliveUnits, (u) => u.owner === this);\n    return `${this.name}: $${resCount}, ${tileCount} tile(s), ${unitCount} unit(s)`;\n  }\n\n  public tileColor(isHome: boolean, healthProportion: number): Color4 {\n    const saturation =\n      (isHome ? 0.8 : 0.4) * healthProportion * this.maxSaturation;\n    const value = isHome ? 0.6 : 0.8;\n    return Player.color(this.hue, saturation, value);\n  }\n\n  private static color(\n    hue: number,\n    saturation: number,\n    value: number,\n    alpha: number = 1\n  ): Color4 {\n    const result = new Color3();\n    Color3.HSVtoRGBToRef(hue, saturation, value, result);\n\n    const { r, g, b } = result;\n    return new Color4(r, g, b, alpha);\n  }\n}\n","import { InstancedMesh, Scene, Vector3 } from '@babylonjs/core';\nimport { Player } from './player';\nimport { Tile } from './tile';\nimport { Game } from './game';\nimport { UnitType } from './types';\n\nexport enum UnitState {\n  active,\n  dead,\n  won,\n  lost,\n}\n\nconst TwoPI = Math.PI * 2;\n\nexport class Unit {\n  public mesh: InstancedMesh;\n  private ai: Generator | undefined;\n  private state: UnitState;\n  public velocity: Vector3;\n  public angularVelocity: number;\n  private targetAngle: number;\n  private health: number;\n\n  constructor(\n    private readonly game: Game,\n    public readonly id: number,\n    public readonly owner: Player,\n    public readonly unitType: UnitType,\n    public tile: Tile,\n    public position: Vector3\n  ) {\n    this.state = UnitState.active;\n    this.velocity = new Vector3();\n    this.angularVelocity = 0;\n    this.targetAngle = 0;\n    this.health = this.unitType.maxHealth;\n\n    // init'd on generate\n    this.mesh = undefined!;\n    this.ai = undefined!;\n  }\n\n  public generate(scene: Scene) {\n    this.mesh = this.game.view.makeUnitMesh(this, scene);\n    this.ai = this.unitType.aiFactory(this, this.game.board);\n  }\n\n  public updateDrawn(elapsed: number) {\n    const minY = 0.05 + this.owner.id * 0.01; // TODO SM just a hack to avoid z-buffer issues\n\n    switch (this.state) {\n      case UnitState.active:\n        this.updatePhysics(elapsed);\n        this.mesh.position.y = minY;\n        break;\n\n      case UnitState.won:\n        this.updatePhysics(elapsed);\n\n        // bobble up & down randomly\n        const amplitude = ((this.id % 3) + 1) * 0.2;\n        const height = amplitude * (0.8 + Math.sin(this.mesh.rotation.y));\n        this.mesh.position.y = minY + Math.max(0, height);\n        break;\n    }\n  }\n\n  private updatePhysics(elapsed: number) {\n    this.velocity.scaleAndAddToRef(elapsed, this.position);\n    this.mesh.position.copyFrom(this.position); // TODO SM interpolate instead of immediate movement\n\n    let rotY = this.mesh.rotation.y + this.angularVelocity * elapsed;\n    if (rotY >= TwoPI) {\n      rotY -= TwoPI;\n    } else if (rotY < 0) {\n      rotY += TwoPI;\n    }\n    this.mesh.rotation.y = rotY;\n  }\n\n  public healthProportion(): number {\n    return this.health / this.unitType.maxHealth;\n  }\n\n  public updateState(elapsed: number) {\n    if (this.health <= 0.001) this.setState(UnitState.dead);\n    if (this.state !== UnitState.active) return;\n\n    this.ai!.next(elapsed);\n    this.tile = this.game.board.posToTile(this.position) || this.owner.homeTile;\n\n    const speed = this.velocity.length();\n    if (speed > 0.1) {\n      const dot = Vector3.Dot(Vector3.Forward(), this.velocity);\n\n      // TODO SM this should be handled by AI\n      this.mesh.rotation.y =\n        Math.PI / 6 + Math.acos(dot / this.velocity.length());\n    }\n\n    this.mesh.scaling.setAll(0.5 + 0.5 * this.healthProportion());\n  }\n\n  private incHealth(rate: number, elapsed: number) {\n    const newHealth = this.health + rate * elapsed;\n    this.health = Math.min(this.unitType.maxHealth, Math.max(0, newHealth));\n  }\n  public harm(rate: number, elapsed: number) {\n    this.incHealth(-rate, elapsed);\n  }\n  public heal(rate: number, elapsed: number) {\n    this.incHealth(rate, elapsed);\n  }\n\n  public attackUnit(target: Unit, elapsed: number) {\n    target.harm(this.unitType.attackVsUnit, elapsed);\n  }\n\n  public attackTile(target: Tile, elapsed: number) {\n    target.harm(this.unitType.attackVsTile, elapsed);\n  }\n\n  public repair(target: Tile, elapsed: number) {\n    target.heal(this.unitType.repairTile, elapsed);\n    if (this.game.canHeal(this, target)) {\n      this.heal(this.unitType.repairSelf, elapsed);\n    }\n  }\n\n  public isAlive(): boolean {\n    return this.state === UnitState.active || this.state === UnitState.won;\n  }\n\n  public isDamaged(): boolean {\n    return this.healthProportion() < 0.99;\n  }\n\n  public setState(state: UnitState) {\n    if (this.state === state) return;\n\n    switch (state) {\n      case UnitState.won:\n        this.velocity.scaleInPlace(0);\n        // spin around on the spot randomly\n        this.angularVelocity = (this.id % 4) * 2 - 3;\n        break;\n\n      case UnitState.dead:\n      case UnitState.lost:\n        this.mesh.instancedBuffers.color = this.owner.deadUnitColor;\n        this.ai = undefined;\n        this.velocity.scaleInPlace(0);\n        this.mesh.position.y = 0.05 + this.owner.id * 0.001; // TODO SM just a hack to avoid z-buffer issues\n        break;\n    }\n    this.state = state;\n  }\n}\n","import {\n  AbstractMesh,\n  ArcRotateCamera,\n  Color3,\n  Color4,\n  HemisphericLight,\n  Mesh,\n  MeshBuilder,\n  Scene,\n  ShadowGenerator,\n  StandardMaterial,\n  Vector3,\n} from '@babylonjs/core';\nimport { Game } from './game';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Unit } from './unit';\n\nexport class View {\n  private scene: Scene;\n  private shadows: ShadowGenerator[];\n\n  constructor(private readonly game: Game) {\n    this.scene = undefined!; // init'd on generate\n    this.shadows = [];\n  }\n\n  public generate(scene: Scene) {\n    this.scene = scene;\n\n    scene.ambientColor = new Color3(1, 1, 1);\n\n    const camera = new ArcRotateCamera(\n      'camera1',\n      0,\n      0,\n      10,\n      new Vector3(0, 6, 16),\n      scene\n    );\n    camera.lowerBetaLimit = 0.1;\n    camera.upperBetaLimit = (Math.PI / 2) * 0.8;\n    camera.lowerRadiusLimit = 10;\n    camera.upperRadiusLimit = 100;\n    camera.setTarget(Vector3.Zero());\n\n    const canvas = scene.getEngine().getRenderingCanvas()!;\n    camera.attachControl(canvas, true);\n\n    const lights = [\n      new HemisphericLight('light', new Vector3(0, 1, -2), scene),\n      new HemisphericLight('light', new Vector3(1, 1, 1), scene),\n      new HemisphericLight('light', new Vector3(-1, 1, 1), scene),\n    ];\n    for (let i = 0; i < lights.length; i++) {\n      lights[i].intensity = 0.4;\n    }\n\n    // TODO SM Shadows look poor, needs improvement\n    // this.shadows = lights.map((l) => new ShadowGenerator(1024, l));\n    // for (let i = 0; i < this.shadows.length; i++) {\n    //   this.shadows[i].usePoissonSampling = true; // TODO SM expensive\n    // }\n  }\n\n  private onAddMesh(mesh: AbstractMesh, castShadow: boolean) {\n    if (castShadow) {\n      for (let i = 0; i < this.shadows.length; i++) {\n        this.shadows[i].addShadowCaster(mesh);\n      }\n    }\n  }\n\n  private static tileMesh: Mesh | undefined;\n  private static generateTileMesh(scene: Scene, radius: number): Mesh {\n    const material = new StandardMaterial(`tileMeshMaterial`, scene);\n    material.specularColor = new Color3(0.5, 0.6, 0.87);\n\n    const mesh = MeshBuilder.CreateDisc(\n      `tileMesh`,\n      { radius, tessellation: 6, sideOrientation: Mesh.DOUBLESIDE },\n      scene\n    );\n    mesh.receiveShadows = true;\n\n    mesh.rotation.x = Math.PI * 0.5; // rotate from XY plane to XZ\n    mesh.material = material;\n    mesh.isVisible = false; // hide prototype, only the instanced copies should be visible\n\n    mesh.registerInstancedBuffer('color', 4);\n    mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\n\n    return mesh;\n  }\n\n  public makeTileMesh(tile: Tile, scene: Scene) {\n    if (!View.tileMesh) {\n      View.tileMesh = View.generateTileMesh(scene, config.drawnTileSize);\n      this.onAddMesh(View.tileMesh, true);\n    }\n\n    const { x, y, z } = tile.coords;\n    const meshInst = View.tileMesh.createInstance(`tileMesh/${x}/${y}/${z}`);\n    meshInst.position.copyFrom(tile.toPos());\n    meshInst.isVisible = true;\n    this.onAddMesh(meshInst, true);\n    return meshInst;\n  }\n\n  private static readonly unitMesh: Mesh[] = [];\n  private static generateUnitMesh(\n    scene: Scene,\n    unit: Unit,\n    radius: number,\n    height: number\n  ): Mesh {\n    const material = new StandardMaterial(`unitMeshMaterial`, scene);\n    material.specularColor = new Color3(0.8, 0.8, 0.9);\n\n    const mesh = unit.unitType.meshFactory(scene, radius, height);\n    mesh.material = material;\n    mesh.isVisible = false; // hide prototype, only instanced meshes are shown\n\n    mesh.registerInstancedBuffer('color', 4);\n    mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\n\n    return mesh;\n  }\n\n  private unitMeshPrototype(unit: Unit) {\n    const index = unit.unitType.id;\n    if (!View.unitMesh[index]) {\n      View.unitMesh[index] = View.generateUnitMesh(this.scene, unit, 0.4, 0.1);\n      this.onAddMesh(View.unitMesh[index], true);\n    }\n\n    return View.unitMesh[index];\n  }\n\n  public makeUnitMesh(unit: Unit, scene: Scene) {\n    const meshPrototype = this.unitMeshPrototype(unit);\n    const meshInst = meshPrototype.createInstance(`unitMesh/${unit.id}`);\n    meshInst.isVisible = true;\n    meshInst.instancedBuffers.color = unit.owner.fullUnitColor;\n    meshInst.position.copyFrom(unit.position);\n\n    this.onAddMesh(meshInst, true);\n    return meshInst;\n  }\n}\n","import { MutableRefObject } from 'react';\nimport { Scene } from '@babylonjs/core';\nimport config from './config';\nimport { Player } from './player';\nimport { Board } from './board';\nimport { Unit, UnitState } from './unit';\nimport { Tile } from './tile';\nimport { View } from './view';\nimport { UnitType } from './types';\n\nexport type GameStateFn = (game: Game) => void;\ntype GameStateListener = MutableRefObject<GameStateFn | undefined>;\n\nexport class Game {\n  public readonly players: Player[];\n  public readonly gaia: Player;\n  public readonly board: Board;\n  public readonly allUnits: Unit[];\n  public aliveUnits: Unit[];\n  public scene: Scene | undefined;\n  public winner: Player | undefined;\n  public view: View;\n\n  private listeners: GameStateListener[];\n  private elapsedSinceState: number = 0;\n\n  constructor() {\n    this.gaia = new Player(this, 0, 'Gaia', 180, 0.01);\n    const player1 = new Player(this, 1, 'Green', 120, 1);\n    const player2 = new Player(this, 2, 'Red', 0, 1);\n    this.players = [this.gaia, player1, player2];\n\n    this.board = new Board(this, 2, () => true);\n    this.allUnits = [];\n    this.aliveUnits = [];\n    this.view = new View(this);\n    this.scene = undefined;\n    this.winner = undefined;\n    this.listeners = [];\n  }\n\n  public generate(scene: Scene) {\n    this.view.generate(scene);\n\n    this.board.generate(scene);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].generate(scene);\n    }\n\n    for (let i = 0; i < this.players.length; i++) {\n      const player = this.players[i];\n      player.generate(scene);\n    }\n\n    this.scene = scene;\n    this.reset();\n  }\n\n  public reset() {\n    const [, first, second] = this.players;\n    const firstAdj = this.board.neighbours(first.homeTile);\n    const secondAdj = this.board.neighbours(second.homeTile);\n\n    const [off, def] = config.unitTypes;\n    this.spawnUnit(first, def, first.homeTile);\n    this.spawnUnit(second, def, second.homeTile);\n    this.spawnUnit(first, off, firstAdj[1]);\n    this.spawnUnit(second, off, secondAdj[0]);\n  }\n\n  public spawnUnit(owner: Player, unitType: UnitType, tile: Tile) {\n    const nextId = this.allUnits.length;\n    const unit = new Unit(this, nextId, owner, unitType, tile, tile.toPos());\n    this.scene && unit.generate(this.scene);\n    this.allUnits.push(unit);\n    this.aliveUnits.push(unit);\n  }\n\n  public update(elapsed: number) {\n    this.updateDrawn(elapsed);\n\n    this.elapsedSinceState += elapsed;\n    if (this.running() && this.elapsedSinceState >= config.minDurationState) {\n      this.updateState(this.elapsedSinceState);\n      this.elapsedSinceState = 0;\n    }\n  }\n\n  private updateDrawn(elapsed: number) {\n    if (!this.scene) return;\n\n    this.board.updateDrawn(elapsed);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].updateDrawn(elapsed);\n    }\n  }\n\n  private updateState(elapsed: number) {\n    this.board.updateState(elapsed);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].updateState(elapsed);\n    }\n\n    this.aliveUnits = this.allUnits.filter((u) => u.isAlive());\n\n    for (let i = 1; i <= 2; i++) {\n      const player = this.players[i];\n      player.updateState(elapsed);\n      if (!player.isAlive()) {\n        const winner = this.players[3 - i];\n        this.finishGame(winner);\n      }\n    }\n\n    this.notifyListeners();\n  }\n\n  public addGameStateListenerEffect(listener: GameStateListener) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener);\n    };\n  }\n\n  private notifyListeners() {\n    for (let i = 0; i < this.listeners.length; i++) {\n      const listener = this.listeners[i];\n      listener.current && listener.current(this);\n    }\n  }\n\n  public running(): boolean {\n    return this.winner === undefined;\n  }\n\n  private finishGame(winner: Player) {\n    this.winner = winner;\n\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      const unit = this.aliveUnits[i];\n      unit.setState(unit.owner === winner ? UnitState.won : UnitState.lost);\n    }\n  }\n\n  public canHeal(unit: Unit, tile: Tile): boolean {\n    return (\n      tile.isHome &&\n      unit.owner === tile.owner &&\n      tile.healthProportion() > config.tileControlThreshold\n    );\n  }\n}\n","import React, { MutableRefObject, useCallback, useEffect, useRef } from 'react';\nimport { Game } from '../core';\nimport { GameRefFn } from './types';\nimport './Alert.css';\n\ntype AlertUIProps = {\n  onGetMessage: (game: Game) => string;\n  outRef: MutableRefObject<GameRefFn | undefined>;\n};\n\nconst AlertUI: React.FC<AlertUIProps> = ({ onGetMessage, outRef }) => {\n  const alertRef = useRef<HTMLDivElement | null>(null);\n\n  const updateAlert = useCallback(\n    (game: Game) => {\n      if (alertRef.current) {\n        alertRef.current.innerText = onGetMessage(game);\n      }\n    },\n    [alertRef, onGetMessage]\n  );\n\n  useEffect(() => {\n    outRef.current = updateAlert;\n  }, [outRef, updateAlert]);\n\n  return <div className=\"alert\" ref={alertRef} />;\n};\n\nexport default AlertUI;\n","import React, {\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport './ControlPanel.css';\nimport { config, Game, Player } from '../core';\nimport { GameRefFn } from './types';\nimport { UnitProductionStrategy } from '../core/types';\n\ntype ControlPanelBtnProps = {\n  text: string;\n  active: boolean;\n  onClick: () => void;\n};\nconst ControlPanelBtn: React.FC<ControlPanelBtnProps> = ({\n  text,\n  active,\n  onClick,\n}) => (\n  <button className=\"control-panel-btn\" onClick={onClick} disabled={active}>\n    {text}\n  </button>\n);\n\ntype ControlPanelStrategyBtnProps = {\n  btnUps: UnitProductionStrategy;\n  curUps: UnitProductionStrategy;\n  onSet: (ups: UnitProductionStrategy) => void;\n};\nconst ControlPanelStrategyBtn: React.FC<ControlPanelStrategyBtnProps> = ({\n  btnUps,\n  curUps,\n  onSet,\n}) => (\n  <ControlPanelBtn\n    text={btnUps.displayName}\n    active={btnUps === curUps}\n    onClick={() => onSet(btnUps)}\n  />\n);\n\ntype ControlPanelProps = {\n  player: Player;\n  position: 'left' | 'right';\n  outRef: MutableRefObject<GameRefFn | undefined>;\n};\n\nconst ControlPanelUI: React.FC<ControlPanelProps> = ({\n  player,\n  position,\n  outRef,\n}) => {\n  const playerRef = useRef<HTMLDivElement | null>(null);\n  const [ups, setUps] = useState<UnitProductionStrategy>(player.ups);\n\n  const updatePlayerStatus = useCallback(\n    (game: Game) => {\n      if (playerRef.current) {\n        playerRef.current.innerText = player.statusDisplayText(game);\n      }\n    },\n    [playerRef, player]\n  );\n\n  useEffect(() => {\n    if (outRef) {\n      outRef.current = updatePlayerStatus;\n    }\n  }, [outRef, updatePlayerStatus]);\n\n  useEffect(() => {\n    player.ups = ups;\n  }, [player, ups]);\n\n  const className = `control-panel control-panel-${position}`;\n  return (\n    <div className={className}>\n      <div className=\"stats-p1\" ref={playerRef} />\n      {config.unitProdStrategies.map((btnUps) => (\n        <ControlPanelStrategyBtn\n          key={btnUps.id}\n          btnUps={btnUps}\n          curUps={ups}\n          onSet={setUps}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ControlPanelUI;\n","import React from 'react';\nimport SceneComponent from 'babylonjs-hook';\nimport { Game } from '../core';\nimport './GameScene.css';\nimport { Scene } from '@babylonjs/core';\n\ntype GameSceneProps = {\n  game: Game;\n};\n\nconst GameSceneUI: React.FC<GameSceneProps> = ({ game }) => {\n  const onRender = (scene: Scene) => {\n    const elapsedMillis = scene.getEngine().getDeltaTime();\n    game.update(elapsedMillis / 1000.0);\n  };\n\n  return (\n    <SceneComponent\n      antialias\n      onSceneReady={(scene) => game.generate(scene)}\n      onRender={onRender}\n      id=\"game-canvas\"\n    />\n  );\n};\n\nexport default GameSceneUI;\n","import React, { MutableRefObject, useCallback, useEffect, useRef } from 'react';\nimport { Game } from '../core';\nimport { GameRefFn } from './types';\nimport './Stats.css';\n\ntype StatsUIProps = {\n  outRef: MutableRefObject<GameRefFn | undefined>;\n};\n\nconst StatsUI: React.FC<StatsUIProps> = ({ outRef }) => {\n  const fpsRef = useRef<HTMLDivElement | null>(null);\n\n  const updateStats = useCallback(\n    (game: Game) => {\n      if (game.scene && fpsRef.current) {\n        const fps = Math.round(game.scene.getEngine().getFps());\n\n        // const text = game.board.tileList\n        //   .map((t) => Math.round(t.healthProportion() * 10) / 10)\n        //   .join(' ');\n\n        fpsRef.current.innerText = `FPS: ${fps}`;\n      }\n    },\n    [fpsRef]\n  );\n\n  useEffect(() => {\n    if (outRef) {\n      outRef.current = updateStats;\n    }\n  }, [outRef, updateStats]);\n\n  return (\n    <div className=\"stats\">\n      <div className=\"stats-fps\" ref={fpsRef} />\n    </div>\n  );\n};\n\nexport default StatsUI;\n","import React, { useEffect, useMemo, useRef } from 'react';\nimport { Game } from './core';\nimport { AlertUI, ControlPanelUI, GameSceneUI, StatsUI } from './ui';\nimport { GameRefFn } from './ui/types';\nimport './App.css';\n\nfunction App() {\n  const game = useMemo(() => new Game(), []);\n\n  const statsRef = useRef<GameRefFn | undefined>(undefined);\n  const p1Ref = useRef<GameRefFn | undefined>(undefined);\n  const p2Ref = useRef<GameRefFn | undefined>(undefined);\n  const alertRef = useRef<GameRefFn | undefined>(undefined);\n\n  useEffect(() => game.addGameStateListenerEffect(statsRef), [game, statsRef]);\n  useEffect(() => game.addGameStateListenerEffect(p1Ref), [game, p1Ref]);\n  useEffect(() => game.addGameStateListenerEffect(p2Ref), [game, p2Ref]);\n  useEffect(() => game.addGameStateListenerEffect(alertRef), [game, alertRef]);\n\n  const onGetGameOverMessage = (game: Game) =>\n    game.winner ? `${game.winner.name} wins!` : '';\n\n  return (\n    <div className=\"fullscreen\">\n      <StatsUI outRef={statsRef} />\n      <AlertUI onGetMessage={onGetGameOverMessage} outRef={alertRef} />\n      <GameSceneUI game={game} />\n      <ControlPanelUI position=\"left\" player={game.players[1]} outRef={p1Ref} />\n      <ControlPanelUI\n        position=\"right\"\n        player={game.players[2]}\n        outRef={p2Ref}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}