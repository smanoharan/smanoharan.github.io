{"version":3,"sources":["ai/actions.ts","util/util.ts","ai/randomWalk.ts","core/config.ts","core/types.ts","core/tile.ts","core/unit.ts","core/board.ts","core/player.ts","core/game.ts","ui/gui/OptionButton.tsx","ui/gui/OverLayMessage.tsx","ui/gui/ControlPanel.tsx","ui/gui/meshCache.ts","ui/gui/guiGameView.ts","ui/gui/index.tsx","App.tsx","index.tsx"],"names":["moveTowards","doWorkWhile","waitWhile","unit","target","interrupt","targetDirection","subtract","position","normalize","curDirection","clone","Vector3","Dot","scaleToRef","unitType","maxSpeed","velocity","subtractToRef","scaleInPlace","pred","angularVelocity","Math","PI","owner","id","randomInt","max","floor","random","randomElem","array","length","randomWeightedElem","weight","weights","map","selected","sum","i","countIf","predicate","filter","randomWalkAI","offensiveUnitAI","defensiveUnitAI","canDoWork","curTile","tile","occupancy","opponent","healthProportion","homeTile","isDamaged","board","tilePref","nextTile","neighbourClosestTo","neighbours","toPos","t","diff","abs","offenseUT","displayName","maxHealth","attackVsUnit","attackVsTile","repairTile","repairSelf","meshFactory","scene","radius","height","options","diameter","tessellation","enclose","MeshBuilder","CreateCylinder","aiFactory","defenseUT","GameObjType","randomUPS","imgName","nextUnitType","minDurationState","minDurationUI","tileSize","drawnTileSize","unitCost","tileMaxHealth","homeTileMaxHealth","tileControlThreshold","minUnitsToCapture","resourcesRate","unitTypes","unitProdStrategies","defaultUPS","traverseInOrder","obj","fn","children","Tile","game","isHome","resMult","q","r","s","undefined","type","viewObj","coords","health","console","error","this","config","view","generateTile","elapsed","resolveUnits","aliveUnits","resourceCount","drawTile","other","equals","min","rate","newHealth","incHealth","occupiers","gaia","units","unitsOnTile","u","players","p1","p2","p1Units","p2Units","forEach","attackUnit","soleOccupier","canCapture","repair","attackTile","dir","amount","x","y","nx","ny","sqrt3","toPosOffset","Zero","a","b","z","qf","rf","sf","round","qDist","rDist","sDist","direction","NN","NE","SE","SS","SW","NW","directions","UnitState","sqrt","Board","acceptTile","tiles","R","isHomeAdjacent","push","neighbour","dist","n","distBetween","closest","pos","roundCoords","Player","name","hue","maxSaturation","stdTileColor","homeTileColor","fullUnitColor","deadUnitColor","ups","color","_view","tileList","find","p","_elapsed","spawnUnit","saturation","value","alpha","result","Color3","HSVtoRGBToRef","g","Color4","TwoPI","Unit","state","rotY","ai","active","generateUnit","dead","lost","scaleAndAddToRef","minY","won","sin","setState","next","posToTile","dot","Forward","acos","drawUnit","harm","heal","canHeal","Game","winner","player1","player2","child","isAlive","finishGame","first","second","firstAdj","secondAdj","off","def","nextId","generate","defaultStyle","marginTop","marginLeft","marginRight","width","backgroundSize","outline","boxShadow","border","OptionButton","text","onClick","style","effectiveStyle","backgroundColor","transition","className","button","zIndex","margin","fontSize","OverLayMessage","getMessage","useState","msg","setMsg","useEffect","useListenerEffect","padding","bottom","ControlPanel","playerIndex","getStatus","useCallback","getPlayerStatus","curUps","setCurUps","getPlayerUPS","key","backgroundImage","setPlayerUPS","MeshCache","tileMesh","generateTileMesh","meshInst","createInstance","copyFrom","isVisible","index","resourceMesh","generateResourceMesh","rotation","unitMesh","generateUnitMesh","unitMeshPrototype","instancedBuffers","material","StandardMaterial","specularColor","mesh","CreateDisc","sideOrientation","Mesh","DOUBLESIDE","receiveShadows","registerInstancedBuffer","diffuseColor","CreateBox","depth","GuiGameView","meshCache","listeners","elapsedSinceState","elapsedSinceUI","ambientColor","camera","ArcRotateCamera","lowerBetaLimit","upperBetaLimit","lowerRadiusLimit","upperRadiusLimit","setTarget","canvas","getEngine","getRenderingCanvas","attachControl","lights","HemisphericLight","intensity","o","startGame","lastElapsed","newElapsed","elapsedLimit","action","curElapsed","call","actualElapsedMillis","getDeltaTime","ifElapsed","updateState","updateUI","updateFrame","draw","running","listener","lis","addListener","removeListener","makeUnitMesh","scaling","setAll","makeTileMesh","d","makeResourceMesh","tileColor","getFps","player","resCount","tileCount","unitCount","getFPS","fpsStyle","top","right","opacity","getWinnerMessage","gameWinnerMessage","winnerStyle","left","textAlign","textShadow","p1Style","borderRight","borderTop","p2Style","borderLeft","GuiGameViewComponent","useMemo","antialias","onSceneReady","onRender","render","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e29d06ab.chunk.js","sourcesContent":["import { Vector3 } from '@babylonjs/core';\nimport { Unit } from '../core';\n\nexport type Predicate = (unit: Unit) => boolean;\n\nexport function* moveTowards(\n  unit: Unit,\n  target: Vector3,\n  interrupt: Predicate\n) {\n  const targetDirection = target.subtract(unit.position).normalize();\n  let curDirection = targetDirection.clone();\n\n  while (Vector3.Dot(targetDirection, curDirection) > 0) {\n    targetDirection\n      .normalize()\n      .scaleToRef(unit.unitType.maxSpeed, unit.velocity);\n\n    yield; // wait for next update\n\n    if (interrupt(unit)) break;\n\n    target.subtractToRef(unit.position, curDirection);\n  }\n\n  unit.velocity.scaleInPlace(0);\n}\n\nexport function* doWorkWhile(unit: Unit, pred: Predicate) {\n  unit.angularVelocity = Math.PI * (unit.owner.id === 1 ? 3 : -3);\n  yield* waitWhile(unit, pred);\n  unit.angularVelocity = 0;\n}\n\nexport function* waitWhile(unit: Unit, pred: Predicate) {\n  while (pred(unit)) {\n    yield;\n  }\n}\n\nexport function* waitUntil(unit: Unit, pred: Predicate) {\n  while (!pred(unit)) {\n    yield;\n  }\n}\n\nexport function* wait(duration: number) {\n  let elapsed = 0;\n  while (elapsed < duration) {\n    elapsed += yield;\n  }\n}\n","export type WeightFn<T> = (t: T) => number;\n\nexport function randomInt(max: number): number {\n  return Math.floor(Math.random() * max);\n}\n\nexport function randomElem<T>(array: T[]): T | undefined {\n  if (array.length > 0) {\n    return array[randomInt(array.length)];\n  }\n  return undefined;\n}\n\nfunction sum(array: number[]): number {\n  // simpler to under than reduce\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\nexport function randomWeightedElem<T>(array: T[], weight: WeightFn<T>): T | undefined {\n  if (array.length === 0) return undefined;\n\n  const weights = array.map(weight);\n  let selected = randomInt(sum(weights));\n  for (let i = 0; i < weights.length; i++) {\n    selected -= weights[i];\n    if (selected < 0) return array[i];\n  }\n\n  return array[array.length - 1];\n}\n\nexport function countIf<T>(array: T[], predicate: (t: T) => boolean) {\n  return array.filter(predicate).length;\n}\n\nexport function lerp(source: number, target: number, amount: number): number {\n  return source * amount + target * (1 - amount);\n}\n","import { Unit, Board, Tile } from '../core';\nimport { doWorkWhile, moveTowards } from './actions';\nimport { randomWeightedElem, WeightFn } from '../util/util';\n\nfunction canDoWork(unit: Unit): boolean {\n  const curTile = unit.tile;\n  if (!curTile) return false;\n\n  if (curTile.occupancy[unit.owner.opponent.id] > 0) {\n    // enemy spotted\n    return true;\n  }\n\n  if (curTile.owner === unit.owner.opponent) {\n    // enemy tile, try to destroy it\n    return true;\n  }\n\n  if (curTile.owner === unit.owner && curTile.healthProportion() < 0.99) {\n    // repair owned tile\n    return true;\n  }\n\n  if (curTile === unit.owner.homeTile && unit.isDamaged()) {\n    // heal here\n    return true;\n  }\n\n  return false;\n}\n\nexport function* randomWalkAI(\n  unit: Unit,\n  board: Board,\n  tilePref: WeightFn<Tile>\n) {\n  function nextTile(): Tile {\n    if (unit.isDamaged()) {\n      return board.neighbourClosestTo(unit.tile, unit.owner.homeTile);\n    }\n    const next = randomWeightedElem(board.neighbours(unit.tile), tilePref);\n    return next || unit.owner.homeTile;\n  }\n\n  while (true) {\n    if (canDoWork) {\n      yield* doWorkWhile(unit, canDoWork);\n    }\n\n    // TODO Turn and rotate first\n    yield* moveTowards(unit, nextTile().toPos(), canDoWork);\n  }\n}\n\nexport function* offensiveUnitAI(unit: Unit, board: Board) {\n  yield* randomWalkAI(unit, board, (t) => {\n    const diff = Math.abs(unit.owner.id - t.owner.id) + 1;\n    return diff * diff * diff;\n  });\n}\n\nexport function* defensiveUnitAI(unit: Unit, board: Board) {\n  yield* randomWalkAI(unit, board, (t) => {\n    const diff = 2 - Math.abs(unit.owner.id - t.owner.id) + 1;\n    return diff * diff * diff;\n  });\n}\n","import { Mesh, MeshBuilder, Scene } from '@babylonjs/core';\r\nimport { defensiveUnitAI, offensiveUnitAI } from '../ai/randomWalk';\r\nimport { Unit } from './unit';\r\nimport { Board } from './board';\r\nimport { randomElem } from '../util/util';\r\nimport { UnitProductionStrategy, UnitType } from './types';\r\n\r\nconst offenseUT: UnitType = {\r\n  id: 0,\r\n  displayName: 'Offensive',\r\n  maxHealth: 10,\r\n\r\n  maxSpeed: 1.5,\r\n  attackVsUnit: 4,\r\n  attackVsTile: 2,\r\n  repairTile: 0.5,\r\n  repairSelf: 0.5,\r\n\r\n  meshFactory: offensiveMeshFactory,\r\n  aiFactory: offensiveAIFactory,\r\n};\r\n\r\nconst defenseUT: UnitType = {\r\n  id: 1,\r\n  displayName: 'Defensive',\r\n  maxHealth: 15,\r\n\r\n  maxSpeed: 2,\r\n  attackVsUnit: 3,\r\n  attackVsTile: 0.25,\r\n  repairTile: 2,\r\n  repairSelf: 1,\r\n\r\n  meshFactory: defensiveMeshFactory,\r\n  aiFactory: defensiveAIFactory,\r\n};\r\n\r\nfunction offensiveMeshFactory(scene: Scene, radius: number, height: number): Mesh {\r\n  const options = {\r\n    diameter: 2 * radius,\r\n    height,\r\n    tessellation: 3,\r\n    enclose: true,\r\n  };\r\n  return MeshBuilder.CreateCylinder('offUnit', options, scene);\r\n}\r\n\r\nfunction defensiveMeshFactory(scene: Scene, radius: number, height: number): Mesh {\r\n  const options = {\r\n    diameter: 1.7 * radius,\r\n    height,\r\n    tessellation: 5,\r\n    enclose: true,\r\n  };\r\n  return MeshBuilder.CreateCylinder('defUnit', options, scene);\r\n}\r\n\r\nfunction offensiveAIFactory(unit: Unit, board: Board): Generator {\r\n  return offensiveUnitAI(unit, board);\r\n}\r\n\r\nfunction defensiveAIFactory(unit: Unit, board: Board): Generator {\r\n  return defensiveUnitAI(unit, board);\r\n}\r\n\r\nconst offenseOnlyUPS: UnitProductionStrategy = {\r\n  id: 0,\r\n  displayName: 'Offensive',\r\n  imgName: 'off',\r\n  nextUnitType: () => offenseUT,\r\n};\r\n\r\nconst defenseOnlyUPS: UnitProductionStrategy = {\r\n  id: 1,\r\n  displayName: 'Defensive',\r\n  imgName: 'def',\r\n  nextUnitType: () => defenseUT,\r\n};\r\n\r\nconst randomUPS: UnitProductionStrategy = {\r\n  id: 2,\r\n  displayName: 'Random',\r\n  imgName: 'rand',\r\n  nextUnitType: () => randomElem([offenseUT, defenseUT])!,\r\n};\r\n\r\nconst rateScale = 1;\r\nexport default {\r\n  minDurationState: 0.05 / rateScale, // update state every 50ms\r\n  minDurationUI: 0.2 / rateScale, // update UI every 200ms\r\n\r\n  tileSize: 2, // how large tiles are in reality\r\n  drawnTileSize: 0.98 * 2, // how large tiles are drawn -- leave space for a gap\r\n\r\n  unitCost: 10,\r\n  tileMaxHealth: 20,\r\n  homeTileMaxHealth: 50,\r\n  tileControlThreshold: 0.8, // if the health > maxHealth * threshold, then this tile produces resources for its owner\r\n  minUnitsToCapture: 2, // need at least 2 units before a tile can be captured\r\n\r\n  // all these are in per second\r\n  resourcesRate: rateScale,\r\n\r\n  unitTypes: [offenseUT, defenseUT],\r\n  unitProdStrategies: [offenseOnlyUPS, defenseOnlyUPS, randomUPS],\r\n  defaultUPS: randomUPS,\r\n};\r\n","import { Mesh, Scene } from '@babylonjs/core';\r\nimport { Tile } from './tile';\r\nimport { Unit } from './unit';\r\nimport { Board } from './board';\r\n\r\nexport type UnitType = {\r\n  id: number;\r\n  displayName: string;\r\n\r\n  maxHealth: number;\r\n\r\n  // all of these are in per-second\r\n  maxSpeed: number;\r\n  attackVsUnit: number;\r\n  attackVsTile: number;\r\n  repairTile: number;\r\n  repairSelf: number; // when in an owned tile\r\n\r\n  meshFactory: (scene: Scene, radius: number, height: number) => Mesh;\r\n  aiFactory: (unit: Unit, board: Board) => Generator;\r\n};\r\n\r\nexport type UnitProductionStrategy = {\r\n  id: number;\r\n  displayName: string;\r\n  imgName: string;\r\n\r\n  nextUnitType: () => UnitType;\r\n};\r\n\r\nexport interface GameView {\r\n  generateUnit: (unit: Unit) => void;\r\n  drawUnit: (unit: Unit) => void;\r\n  generateTile: (tile: Tile) => void;\r\n  drawTile: (tile: Tile) => void;\r\n}\r\n\r\nexport enum GameObjType {\r\n  Game,\r\n  Player,\r\n  Board,\r\n  Tile,\r\n  Unit,\r\n}\r\n\r\nexport interface GameObj {\r\n  readonly type: GameObjType;\r\n  readonly children?: GameObj[];\r\n  viewObj?: any; // for usage by the GameView to store relevant info\r\n  generate?: (view: GameView) => void;\r\n  updateFrame?: (view: GameView, elapsed: number) => void;\r\n  updateState?: (view: GameView, elapsed: number) => void;\r\n  draw?: (view: GameView) => void;\r\n}\r\n\r\nexport function traverseInOrder(obj: GameObj, fn: (go: GameObj) => void) {\r\n  fn(obj);\r\n  if (obj.children) {\r\n    for (let i = 0; i < obj.children.length; i++) {\r\n      traverseInOrder(obj.children[i], fn);\r\n    }\r\n  }\r\n}\r\n","import { Vector3 } from '@babylonjs/core';\nimport { GameObj, GameObjType, GameView } from './types';\nimport { randomElem } from '../util/util';\nimport config from './config';\nimport { Game } from './game';\nimport { Player } from './player';\nimport { Unit } from './unit';\n\nexport class Tile implements GameObj {\n  public readonly type = GameObjType.Tile;\n  public viewObj: any;\n\n  // using q, r, s cubic coords\n  public readonly coords: Vector3;\n  private health: number;\n  private readonly maxHealth: number;\n  public occupancy: number[];\n\n  public constructor(\n    private readonly game: Game,\n    public owner: Player,\n    public readonly isHome: boolean,\n    public readonly resMult: number,\n    q: number,\n    r: number,\n    s: number | undefined = undefined\n  ) {\n    if (s === undefined) {\n      s = -(q + r);\n    } else if (q + r + s !== 0) {\n      console.error('Attempting to create an invalid Tile', { q, r, s });\n    }\n\n    this.coords = new Vector3(q, r, s);\n    this.maxHealth = isHome ? config.homeTileMaxHealth : config.tileMaxHealth;\n    this.health = isHome ? this.maxHealth : 0;\n    this.occupancy = [0, 0, 0];\n  }\n\n  public generate(view: GameView) {\n    view.generateTile(this);\n  }\n\n  public updateState(view: GameView, elapsed: number) {\n    const { resourcesRate, tileControlThreshold } = config;\n    this.resolveUnits(this.game.aliveUnits, elapsed);\n    if (this.healthProportion() > tileControlThreshold) {\n      this.owner.resourceCount += elapsed * resourcesRate * this.resMult;\n    }\n  }\n\n  public draw(view: GameView) {\n    view.drawTile(this);\n  }\n\n  public equals(other: Tile): boolean {\n    return this.coords.equals(other.coords);\n  }\n\n  public healthProportion(): number {\n    return Math.min(1, Math.max(0, this.health / this.maxHealth));\n  }\n\n  private incHealth(rate: number, elapsed: number) {\n    const newHealth = this.health + rate * elapsed;\n    this.health = Math.min(this.maxHealth, Math.max(0, newHealth));\n  }\n  public harm(rate: number, elapsed: number) {\n    this.incHealth(-rate, elapsed);\n  }\n  public heal(rate: number, elapsed: number) {\n    this.incHealth(rate, elapsed);\n  }\n\n  private canCapture(occupiers: Unit[]): boolean {\n    return this.owner === this.game.gaia && occupiers.length >= config.minUnitsToCapture;\n  }\n\n  private resolveUnits(units: Unit[], elapsed: number) {\n    const unitsOnTile = units.filter((u) => u.tile === this);\n    if (unitsOnTile.length === 0) return;\n\n    const [gaia, p1, p2] = this.game.players;\n    const p1Units = unitsOnTile.filter((u) => u.owner === p1);\n    const p2Units = unitsOnTile.filter((u) => u.owner === p2);\n    this.occupancy = [0, p1Units.length, p2Units.length];\n\n    if (p1Units.length > 0 && p2Units.length > 0) {\n      p1Units.forEach((u) => u.attackUnit(randomElem(p2Units)!, elapsed));\n      p2Units.forEach((u) => u.attackUnit(randomElem(p1Units)!, elapsed));\n    } else {\n      const soleOccupier = unitsOnTile[0].owner;\n      if (this.canCapture(unitsOnTile)) {\n        this.owner = soleOccupier;\n      }\n\n      if (this.owner === soleOccupier) {\n        unitsOnTile.forEach((u) => u.repair(this, elapsed));\n      } else if (this.owner !== gaia) {\n        unitsOnTile.forEach((u) => u.attackTile(this, elapsed));\n        if (this.healthProportion() < 0.1) {\n          this.owner = gaia;\n        }\n      }\n    }\n  }\n\n  public toPosOffset(dir: Vector3, amount: number): Vector3 {\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\n    const { x, y } = this.coords;\n    let nx = x + dir.x * amount;\n    let ny = y + dir.y * amount;\n\n    return new Vector3(1.5 * nx * config.tileSize, 0, sqrt3 * (0.5 * nx + ny) * config.tileSize);\n  }\n\n  public toPos(): Vector3 {\n    return this.toPosOffset(Vector3.Zero(), 0);\n  }\n\n  public static distBetween(a: Tile, b: Tile): number {\n    const { x, y, z } = a.coords.subtract(b.coords);\n    return 0.5 * (Math.abs(x) + Math.abs(y) + Math.abs(z));\n  }\n\n  // increment in CCW order, starting with straight up (north).\n  public static direction = {\n    NN: new Vector3(+0, +1, -1), // north\n    NE: new Vector3(+1, +0, -1), // north east\n    SE: new Vector3(+1, -1, +0), // south east\n    SS: new Vector3(+0, -1, +1), // south\n    SW: new Vector3(-1, +0, +1), // south west\n    NW: new Vector3(-1, +1, +0), // north west\n  };\n  public static directions = [\n    Tile.direction.NN,\n    Tile.direction.NE,\n    Tile.direction.SE,\n    Tile.direction.SS,\n    Tile.direction.SW,\n    Tile.direction.NW,\n  ];\n\n  public static roundCoords(qf: number, rf: number): { q: number; r: number } {\n    const sf = -qf - rf;\n    const q = Math.round(qf);\n    const r = Math.round(rf);\n    const s = Math.round(sf);\n\n    const qDist = Math.abs(qf - q);\n    const rDist = Math.abs(rf - r);\n    const sDist = Math.abs(sf - s);\n\n    if (qDist > Math.max(rDist, sDist)) {\n      return { q: -r - s, r };\n    }\n    if (rDist > sDist) {\n      return { q, r: -q - s };\n    }\n    return { q, r };\n  }\n}\nconst sqrt3 = Math.sqrt(3);\n","import { Vector3 } from '@babylonjs/core';\nimport { Player } from './player';\nimport { Tile } from './tile';\nimport { Game } from './game';\nimport { GameObj, GameObjType, GameView, UnitType } from './types';\n\nexport enum UnitState {\n  active,\n  dead,\n  won,\n  lost,\n}\n\nconst TwoPI = Math.PI * 2;\n\nexport class Unit implements GameObj {\n  public readonly type = GameObjType.Unit;\n  public viewObj: any;\n\n  private state: UnitState;\n  public velocity: Vector3;\n  public angularVelocity: number;\n  public rotY: number;\n  private health: number;\n  private ai: Generator | undefined;\n\n  constructor(\n    private readonly game: Game,\n    public readonly id: number,\n    public readonly owner: Player,\n    public readonly unitType: UnitType,\n    public tile: Tile,\n    public position: Vector3\n  ) {\n    this.state = UnitState.active;\n    this.velocity = new Vector3();\n    this.angularVelocity = 0;\n    this.rotY = 0;\n    this.health = this.unitType.maxHealth;\n\n    // init'd on generate\n    this.ai = undefined;\n  }\n\n  public generate(view: GameView) {\n    view.generateUnit(this);\n    this.ai = this.unitType.aiFactory(this, this.game.board);\n  }\n\n  public updateFrame(view: GameView, elapsed: number) {\n    if (this.state !== UnitState.dead && this.state !== UnitState.lost) {\n      this.velocity.scaleAndAddToRef(elapsed, this.position);\n\n      let rotY = this.rotY + this.angularVelocity * elapsed;\n      if (rotY >= TwoPI) {\n        rotY -= TwoPI;\n      } else if (rotY < 0) {\n        rotY += TwoPI;\n      }\n      this.rotY = rotY;\n    }\n\n    const minY = 0.05 + this.owner.id * 0.01; // TODO SM just a hack to avoid z-buffer issues\n    switch (this.state) {\n      case UnitState.active:\n        this.position.y = minY;\n        break;\n\n      case UnitState.won:\n        // bobble up & down randomly\n        const amplitude = ((this.id % 3) + 1) * 0.2;\n        const height = amplitude * (0.8 + Math.sin(this.rotY));\n        this.position.y = minY + Math.max(0, height);\n        break;\n\n      case UnitState.lost:\n      case UnitState.dead:\n        this.position.y = minY - 0.001; // TODO SM again, z-buffer hack\n        break;\n    }\n  }\n\n  public updateState(view: GameView, elapsed: number) {\n    if (this.health <= 0.001) {\n      this.setState(UnitState.dead);\n    }\n\n    if (this.state === UnitState.active) {\n      this.ai!.next(elapsed);\n      this.tile = this.game.board.posToTile(this.position) || this.owner.homeTile;\n\n      const speed = this.velocity.length();\n      if (speed > 0.1) {\n        const dot = Vector3.Dot(Vector3.Forward(), this.velocity);\n\n        // TODO SM this should be handled by AI\n        this.rotY = Math.PI / 6 + Math.acos(dot / this.velocity.length());\n      }\n    }\n  }\n\n  public draw(view: GameView) {\n    view.drawUnit(this);\n  }\n\n  public healthProportion(): number {\n    return this.health / this.unitType.maxHealth;\n  }\n\n  private incHealth(rate: number, elapsed: number) {\n    const newHealth = this.health + rate * elapsed;\n    this.health = Math.min(this.unitType.maxHealth, Math.max(0, newHealth));\n  }\n  public harm(rate: number, elapsed: number) {\n    this.incHealth(-rate, elapsed);\n  }\n  public heal(rate: number, elapsed: number) {\n    this.incHealth(rate, elapsed);\n  }\n\n  public attackUnit(target: Unit, elapsed: number) {\n    target.harm(this.unitType.attackVsUnit, elapsed);\n  }\n\n  public attackTile(target: Tile, elapsed: number) {\n    target.harm(this.unitType.attackVsTile, elapsed);\n  }\n\n  public repair(target: Tile, elapsed: number) {\n    target.heal(this.unitType.repairTile, elapsed);\n    if (this.game.canHeal(this, target)) {\n      this.heal(this.unitType.repairSelf, elapsed);\n    }\n  }\n\n  public isAlive(): boolean {\n    return this.state === UnitState.active || this.state === UnitState.won;\n  }\n\n  public isDamaged(): boolean {\n    return this.healthProportion() < 0.99;\n  }\n\n  public setState(state: UnitState) {\n    if (this.state === state) return;\n\n    switch (state) {\n      case UnitState.won:\n        this.velocity.scaleInPlace(0);\n        // spin around on the spot randomly\n        this.angularVelocity = (this.id % 4) * 2 - 3;\n        break;\n\n      case UnitState.dead:\n      case UnitState.lost:\n        this.ai = undefined;\n        this.velocity.scaleInPlace(0);\n        break;\n    }\n    this.state = state;\n  }\n}\n","import { Vector3 } from '@babylonjs/core';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Game } from './game';\nimport { GameObj, GameObjType } from './types';\n\ntype TileFilter = (q: number, r: number, s: number) => boolean;\n\nexport class Board implements GameObj {\n  public readonly type = GameObjType.Board;\n  public readonly children: GameObj[];\n  private readonly tiles: Tile[][]; // indexed by q,r\n\n  constructor(\n    private readonly game: Game,\n    private readonly radius: number, // integer, number of tiles from center\n    acceptTile: TileFilter\n  ) {\n    this.tiles = [];\n    this.children = [];\n\n    const R = radius;\n    for (let q = -R; q <= R; q++) {\n      this.tiles[q + R] = [];\n\n      for (let r = -R; r <= R; r++) {\n        const s = -(q + r);\n\n        if (-R <= s && s <= R && acceptTile(q, r, s)) {\n          const isHome = q === 0 && Math.abs(r) === R;\n          const owner = game.players[isHome ? (r === R ? 1 : 2) : 0];\n          const isHomeAdjacent = Math.abs(q) <= 1 && Math.abs(s - r) >= 2;\n          const isMidTile = s === r;\n          const resourceMult = isHome || isMidTile ? 2 : isHomeAdjacent ? 0.5 : 1;\n          const tile = new Tile(game, owner, isHome, resourceMult, q, r);\n          this.tiles[q + R][r + R] = tile;\n          this.children.push(tile);\n        }\n      }\n    }\n  }\n\n  public tile(q: number, r: number): Tile | undefined {\n    const R = this.radius;\n    if (-R <= q && q <= R && -R <= r && r <= R) {\n      return this.tiles[q + R][r + R];\n    }\n    return undefined;\n  }\n\n  public tileList(): Tile[] {\n    return this.children as Tile[];\n  }\n\n  public neighbours(tile: Tile): Tile[] {\n    return Tile.directions.map((dir) => this.neighbour(tile, dir)).filter((t) => !!t) as Tile[];\n  }\n\n  public neighbourClosestTo(tile: Tile, target: Tile): Tile {\n    const neighbours = this.neighbours(tile);\n    if (neighbours.length === 0) return target;\n\n    const dist = neighbours.map((n) => Tile.distBetween(n, target));\n\n    let closest = 0;\n    for (let i = 1; i < neighbours.length; i++) {\n      if (dist[i] < dist[closest]) closest = i;\n    }\n    return neighbours[closest];\n  }\n\n  public neighbour(tile: Tile, direction: Vector3): Tile | undefined {\n    return this.tile(tile.coords.x + direction.x, tile.coords.y + direction.y);\n  }\n\n  public posToTile(pos: Vector3): Tile | undefined {\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\n    const x = pos.x / config.tileSize;\n    const z = pos.z / config.tileSize;\n    const { q, r } = Tile.roundCoords((2.0 / 3.0) * x, (sqrt3 * z - x) / 3.0);\n    return this.tile(q, r);\n  }\n}\nconst sqrt3 = Math.sqrt(3);\n","import { Color3, Color4 } from '@babylonjs/core';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Game } from './game';\nimport { GameObj, GameObjType, GameView, UnitProductionStrategy } from './types';\n\nexport class Player implements GameObj {\n  public readonly type = GameObjType.Player;\n\n  public readonly stdTileColor: Color4;\n  public readonly homeTileColor: Color4;\n  public readonly fullUnitColor: Color4;\n  public readonly deadUnitColor: Color4;\n  public opponent: Player;\n\n  public homeTile: Tile;\n  public resourceCount: number;\n  public ups: UnitProductionStrategy;\n\n  constructor(\n    private readonly game: Game,\n    public readonly id: number,\n    public readonly name: string,\n    private readonly hue: number,\n    private readonly maxSaturation: number\n  ) {\n    this.stdTileColor = Player.color(hue, 0.4 * maxSaturation, 0.8);\n    this.homeTileColor = Player.color(hue, 0.8 * maxSaturation, 0.6);\n    this.fullUnitColor = Player.color(hue, 0.9 * maxSaturation, 0.95);\n    this.deadUnitColor = Player.color(hue, 0.4 * maxSaturation, 0.3, 0.3);\n\n    this.resourceCount = 0;\n    this.ups = config.defaultUPS;\n    this.homeTile = undefined!; // init'd on generate\n    this.opponent = undefined!; // init'd on generate\n  }\n\n  public generate(_view: GameView) {\n    this.homeTile = this.game.board.tileList().find((t) => t.owner === this && t.isHome)!;\n    this.opponent = this.game.players.find((p) => p.id > 0 && p.id !== this.id)!;\n  }\n\n  public updateState(_view: GameView, _elapsed: number) {\n    // automatically spawn unit when there are enough resources\n    while (this.resourceCount > config.unitCost) {\n      this.resourceCount -= config.unitCost;\n      this.game.spawnUnit(this, this.ups.nextUnitType(), this.homeTile);\n    }\n  }\n\n  public isAlive(): boolean {\n    return this.homeTile.owner === this;\n  }\n\n  public tileColor(isHome: boolean, healthProportion: number): Color4 {\n    const saturation = (isHome ? 0.8 : 0.4) * healthProportion * this.maxSaturation;\n    const value = isHome ? 0.6 : 0.8;\n    return Player.color(this.hue, saturation, value);\n  }\n\n  private static color(hue: number, saturation: number, value: number, alpha: number = 1): Color4 {\n    const result = new Color3();\n    Color3.HSVtoRGBToRef(hue, saturation, value, result);\n\n    const { r, g, b } = result;\n    return new Color4(r, g, b, alpha);\n  }\n}\n","import { Board } from './board';\nimport config from './config';\nimport { Player } from './player';\nimport { Tile } from './tile';\nimport { GameObj, GameObjType, GameView, UnitType } from './types';\nimport { Unit, UnitState } from './unit';\n\nexport class Game implements GameObj {\n  public readonly type = GameObjType.Game;\n  public readonly children: GameObj[];\n  private view?: GameView; // cached from generate\n\n  public readonly players: Player[];\n  public readonly gaia: Player;\n  public readonly board: Board;\n  public aliveUnits: Unit[];\n  public winner: Player | undefined;\n\n  constructor() {\n    this.gaia = new Player(this, 0, 'Gaia', 180, 0.01);\n    const player1 = new Player(this, 1, 'Green', 120, 1);\n    const player2 = new Player(this, 2, 'Red', 0, 1);\n    this.players = [this.gaia, player1, player2];\n\n    this.board = new Board(this, 2, () => true);\n    this.aliveUnits = [];\n    this.winner = undefined;\n\n    this.children = [this.board, ...this.players, ...this.aliveUnits];\n  }\n\n  public generate(view: GameView) {\n    this.view = view;\n  }\n\n  public updateState(view: GameView, elapsed: number) {\n    this.aliveUnits = this.children.filter(\n      (child) => child.type === GameObjType.Unit && (child as Unit).isAlive()\n    ) as Unit[];\n\n    for (let i = 1; i < this.players.length; i++) {\n      if (!this.players[i].isAlive()) {\n        this.finishGame(this.players[i].opponent);\n      }\n    }\n  }\n\n  public startGame() {\n    const [, first, second] = this.players;\n    const firstAdj = this.board.neighbours(first.homeTile);\n    const secondAdj = this.board.neighbours(second.homeTile);\n\n    const [off, def] = config.unitTypes;\n    this.spawnUnit(first, def, first.homeTile);\n    this.spawnUnit(second, def, second.homeTile);\n    this.spawnUnit(first, off, firstAdj[1]);\n    this.spawnUnit(second, off, secondAdj[0]);\n  }\n\n  public spawnUnit(owner: Player, unitType: UnitType, tile: Tile) {\n    const nextId = this.children.length;\n    const unit = new Unit(this, nextId, owner, unitType, tile, tile.toPos());\n    this.view && unit.generate(this.view);\n    this.children.push(unit);\n    this.aliveUnits.push(unit);\n  }\n\n  public running(): boolean {\n    return this.winner === undefined;\n  }\n\n  private finishGame(winner: Player) {\n    this.winner = winner;\n\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      const unit = this.aliveUnits[i];\n      unit.setState(unit.owner === winner ? UnitState.won : UnitState.lost);\n    }\n  }\n\n  public canHeal(unit: Unit, tile: Tile): boolean {\n    return (\n      tile.isHome &&\n      unit.owner === tile.owner &&\n      tile.healthProportion() > config.tileControlThreshold\n    );\n  }\n}\n","import React, { CSSProperties } from 'react';\r\nimport { animated } from 'react-spring';\r\nimport './OptionButton.css';\r\n\r\ntype OptionButtonProps = {\r\n  text: string;\r\n  active: boolean;\r\n  onClick: () => void;\r\n  style?: CSSProperties;\r\n};\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  marginTop: '0.5em',\r\n  marginLeft: '0.25em',\r\n  marginRight: '0.25em',\r\n  width: '8em',\r\n  height: '8em',\r\n  backgroundSize: 'contain',\r\n  outline: 'none',\r\n  boxShadow: 'none',\r\n  border: 0,\r\n};\r\n\r\nexport const OptionButton: React.FC<OptionButtonProps> = ({ text, active, onClick, style }) => {\r\n  const effectiveStyle = {\r\n    ...defaultStyle,\r\n    ...style,\r\n    backgroundColor: active ? 'white' : 'transparent',\r\n    transition: active ? 'background-color 0.5s' : 'background-color 7s',\r\n  };\r\n  const className = 'option-button-' + (active ? 'active' : 'clickable');\r\n\r\n  return (\r\n    <animated.button style={effectiveStyle} onClick={onClick} className={className}>\r\n      {text}\r\n    </animated.button>\r\n  );\r\n};\r\n","import React, { CSSProperties, useEffect, useState } from 'react';\r\nimport { GuiGameView } from './guiGameView';\r\n\r\ntype OverLayMessageProps = {\r\n  view: GuiGameView;\r\n  style?: CSSProperties;\r\n  getMessage: (view: GuiGameView) => string;\r\n};\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  zIndex: 100,\r\n  color: 'whitesmoke',\r\n  margin: 'auto',\r\n  fontSize: '1em',\r\n};\r\n\r\nexport const OverLayMessage: React.FC<OverLayMessageProps> = ({ view, style, getMessage }) => {\r\n  const [msg, setMsg] = useState('');\r\n\r\n  useEffect(\r\n    view.useListenerEffect(() => setMsg(getMessage(view))),\r\n    [view, setMsg, getMessage]\r\n  );\r\n\r\n  const effectiveStyle = style ? { ...defaultStyle, ...style } : defaultStyle;\r\n\r\n  return <div style={effectiveStyle}>{msg}</div>;\r\n};\r\n","import React, { CSSProperties, useCallback, useEffect, useState } from 'react';\r\nimport { config } from '../../core';\r\nimport { UnitProductionStrategy } from '../../core/types';\r\nimport { GuiGameView } from './guiGameView';\r\nimport { OptionButton } from './OptionButton';\r\nimport { OverLayMessage } from './OverLayMessage';\r\n\r\ntype ControlPanelProps = {\r\n  // TODO\r\n  view: GuiGameView;\r\n  playerIndex: number;\r\n  style?: CSSProperties;\r\n};\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  position: 'absolute',\r\n  zIndex: 99,\r\n  padding: '10px',\r\n  bottom: 0,\r\n  margin: 'auto',\r\n};\r\n\r\nexport const ControlPanel: React.FC<ControlPanelProps> = ({ view, playerIndex, style }) => {\r\n  const getStatus = useCallback(() => view.getPlayerStatus(playerIndex), [view, playerIndex]);\r\n\r\n  const [curUps, setCurUps] = useState<UnitProductionStrategy | undefined>(undefined);\r\n  useEffect(\r\n    view.useListenerEffect(() => setCurUps(view.getPlayerUPS(playerIndex))),\r\n    [view, setCurUps, playerIndex]\r\n  );\r\n\r\n  const effectiveStyle = style ? { ...defaultStyle, ...style } : defaultStyle;\r\n  return (\r\n    <div style={effectiveStyle}>\r\n      <OverLayMessage view={view} getMessage={getStatus} />\r\n      {config.unitProdStrategies.map(ups => (\r\n        <OptionButton\r\n          key={ups.id}\r\n          text=\"\"\r\n          active={ups === curUps}\r\n          style={{ backgroundImage: `url(\"/z-minus/img/${ups.imgName}-${playerIndex}.png\")` }}\r\n          onClick={() => view.setPlayerUPS(playerIndex, ups)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import {\n  Color3,\n  Color4,\n  InstancedMesh,\n  Mesh,\n  MeshBuilder,\n  Scene,\n  StandardMaterial,\n} from '@babylonjs/core';\nimport { Tile, Unit } from '../../core';\nimport config from '../../core/config';\n\nexport class MeshCache {\n  constructor(private readonly scene: Scene) {}\n\n  private static tileMesh: Mesh | undefined;\n  private static generateTileMesh(scene: Scene, radius: number): Mesh {\n    const material = new StandardMaterial(`tileMeshMaterial`, scene);\n    material.specularColor = new Color3(0.5, 0.6, 0.87);\n\n    const mesh = MeshBuilder.CreateDisc(\n      `tileMesh`,\n      { radius, tessellation: 6, sideOrientation: Mesh.DOUBLESIDE },\n      scene\n    );\n    mesh.receiveShadows = true;\n\n    mesh.rotation.x = Math.PI * 0.5; // rotate from XY plane to XZ\n    mesh.material = material;\n    mesh.isVisible = false; // hide prototype, only the instanced copies should be visible\n\n    mesh.registerInstancedBuffer('color', 4);\n    mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\n\n    return mesh;\n  }\n\n  public makeTileMesh(tile: Tile) {\n    if (!MeshCache.tileMesh) {\n      MeshCache.tileMesh = MeshCache.generateTileMesh(this.scene, config.drawnTileSize);\n      //this.onAddMesh(MeshCache.tileMesh, true);\n    }\n\n    const { x, y, z } = tile.coords;\n    const meshInst = MeshCache.tileMesh.createInstance(`tileMesh/${x}/${y}/${z}`);\n    meshInst.position.copyFrom(tile.toPos());\n    meshInst.isVisible = true;\n    //this.onAddMesh(meshInst, true);\n    return meshInst;\n  }\n\n  private static resourceMesh: Mesh | undefined;\n  private static generateResourceMesh(scene: Scene, radius: number): Mesh {\n    const material = new StandardMaterial(`resMeshMaterial`, scene);\n    material.specularColor = new Color3(0.5, 0.6, 0.87);\n    material.diffuseColor = new Color3(1, 0.9, 0);\n\n    const width = radius;\n    const depth = 0.05;\n    const height = radius;\n    const mesh = MeshBuilder.CreateBox(`resourceMesh`, { width, depth, height }, scene);\n\n    mesh.receiveShadows = true;\n\n    mesh.rotation.x = Math.PI * 0.5; // rotate from XY plane to XZ\n    mesh.position.y = 0;\n    mesh.material = material;\n    mesh.isVisible = false; // hide prototype, only the instanced copies should be visible\n    return mesh;\n  }\n\n  public makeResourceMesh(tile: Tile, index: number): InstancedMesh {\n    if (!MeshCache.resourceMesh) {\n      const radius = config.drawnTileSize * 0.07;\n      MeshCache.resourceMesh = MeshCache.generateResourceMesh(this.scene, radius);\n      //this.onAddMesh(View.resourceMesh, true);\n    }\n\n    const { x, y, z } = tile.coords;\n    const meshInst = MeshCache.resourceMesh.createInstance(`resMesh/${x}/${y}/${z}/${index}`);\n\n    const pos = tile.toPosOffset(Tile.directions[index], 0.3);\n    meshInst.position.x = pos.x;\n    meshInst.position.z = pos.z;\n    meshInst.rotation.y = (index * Math.PI) / 6;\n    meshInst.isVisible = true;\n    //this.onAddMesh(meshInst, true);\n    return meshInst;\n  }\n\n  private static readonly unitMesh: Mesh[] = [];\n  private static generateUnitMesh(scene: Scene, unit: Unit, radius: number, height: number): Mesh {\n    const material = new StandardMaterial(`unitMeshMaterial`, scene);\n    material.specularColor = new Color3(0.8, 0.8, 0.9);\n\n    const mesh = unit.unitType.meshFactory(scene, radius, height);\n    mesh.material = material;\n    mesh.isVisible = false; // hide prototype, only instanced meshes are shown\n\n    mesh.registerInstancedBuffer('color', 4);\n    mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\n\n    return mesh;\n  }\n\n  private unitMeshPrototype(unit: Unit) {\n    const index = unit.unitType.id;\n    if (!MeshCache.unitMesh[index]) {\n      MeshCache.unitMesh[index] = MeshCache.generateUnitMesh(this.scene, unit, 0.4, 0.1);\n      //this.onAddMesh(View.unitMesh[index], true);\n    }\n\n    return MeshCache.unitMesh[index];\n  }\n\n  public makeUnitMesh(unit: Unit) {\n    const meshPrototype = this.unitMeshPrototype(unit);\n    const meshInst = meshPrototype.createInstance(`unitMesh/${unit.id}`);\n    meshInst.isVisible = true;\n    meshInst.instancedBuffers.color = unit.owner.fullUnitColor;\n    meshInst.position.copyFrom(unit.position);\n\n    //this.onAddMesh(meshInst, true);\n    return meshInst;\n  }\n}\n","import {\r\n  ArcRotateCamera,\r\n  Color3,\r\n  HemisphericLight,\r\n  InstancedMesh,\r\n  Scene,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\nimport { Game, Tile, Unit } from '../../core';\r\nimport config from '../../core/config';\r\nimport { GameView, traverseInOrder, UnitProductionStrategy } from '../../core/types';\r\nimport { countIf } from '../../util/util';\r\nimport { MeshCache } from './meshCache';\r\n\r\nexport type GuiListener = () => void;\r\n\r\nexport class GuiGameView implements GameView {\r\n  private scene: Scene;\r\n  private meshCache: MeshCache;\r\n  private listeners: GuiListener[];\r\n\r\n  private elapsedSinceState: number = 0;\r\n  private elapsedSinceUI: number = 0;\r\n\r\n  constructor(private readonly game: Game) {\r\n    this.listeners = [];\r\n    this.scene = undefined!; // set on generate\r\n    this.meshCache = undefined!; // set on generate\r\n  }\r\n\r\n  public generate(scene: Scene) {\r\n    this.scene = scene;\r\n    this.meshCache = new MeshCache(this.scene);\r\n\r\n    this.scene.ambientColor = new Color3(1, 1, 1);\r\n\r\n    const camera = new ArcRotateCamera('camera1', 0, 0, 10, new Vector3(0, 6, 16), this.scene);\r\n    camera.lowerBetaLimit = 0.1;\r\n    camera.upperBetaLimit = (Math.PI / 2) * 0.8;\r\n    camera.lowerRadiusLimit = 10;\r\n    camera.upperRadiusLimit = 100;\r\n    camera.setTarget(Vector3.Zero());\r\n\r\n    const canvas = this.scene.getEngine().getRenderingCanvas()!;\r\n    camera.attachControl(canvas, true);\r\n\r\n    const lights = [\r\n      new HemisphericLight('light', new Vector3(0, 1, -2), this.scene),\r\n      new HemisphericLight('light', new Vector3(1, 1, 1), this.scene),\r\n      new HemisphericLight('light', new Vector3(-1, 1, 1), this.scene),\r\n    ];\r\n    for (let i = 0; i < lights.length; i++) {\r\n      lights[i].intensity = 0.4;\r\n    }\r\n\r\n    // TODO SM Shadows look poor, needs improvement\r\n    // this.shadows = lights.map((l) => new ShadowGenerator(1024, l));\r\n    // for (let i = 0; i < this.shadows.length; i++) {\r\n    //   this.shadows[i].usePoissonSampling = true; // TODO SM expensive\r\n    // }\r\n\r\n    traverseInOrder(this.game, o => o.generate && o.generate(this));\r\n\r\n    this.game.startGame();\r\n  }\r\n\r\n  private ifElapsed(\r\n    lastElapsed: number,\r\n    newElapsed: number,\r\n    elapsedLimit: number,\r\n    action: (elapsed: number) => void\r\n  ): number {\r\n    const curElapsed = lastElapsed + newElapsed;\r\n    if (curElapsed > elapsedLimit) {\r\n      action.call(this, curElapsed);\r\n      return 0;\r\n    }\r\n    return curElapsed;\r\n  }\r\n\r\n  public render() {\r\n    if (!this.scene) return; // not yet generated\r\n\r\n    // if its been more than 50ms since last update, either we're on a really slow machine,\r\n    //  or we've paused for some reason (e.g. inactive tab). Either way, don't attempt to\r\n    //  simulate physics for all elapsed time, it would result in units moving too much and\r\n    //  breaking through collision barriers\r\n    const maxElapsedMillis = 50;\r\n    const actualElapsedMillis = this.scene.getEngine().getDeltaTime();\r\n    const elapsedMillis = Math.min(maxElapsedMillis, actualElapsedMillis);\r\n    const elapsed = elapsedMillis / 1000.0;\r\n\r\n    this.elapsedSinceState = this.ifElapsed(\r\n      this.elapsedSinceState,\r\n      elapsed,\r\n      config.minDurationState,\r\n      this.updateState\r\n    );\r\n\r\n    this.elapsedSinceUI = this.ifElapsed(\r\n      this.elapsedSinceUI,\r\n      elapsed,\r\n      config.minDurationUI,\r\n      this.updateUI\r\n    );\r\n\r\n    traverseInOrder(this.game, o => {\r\n      o.updateFrame && o.updateFrame(this, elapsed);\r\n      o.draw && o.draw(this);\r\n    });\r\n  }\r\n\r\n  private updateState(elapsed: number) {\r\n    if (this.game.running()) {\r\n      traverseInOrder(this.game, o => o.updateState && o.updateState(this, elapsed));\r\n    }\r\n  }\r\n\r\n  private updateUI(_elapsed: number) {\r\n    for (let i = 0; i < this.listeners.length; i++) {\r\n      this.listeners[i]();\r\n    }\r\n  }\r\n\r\n  private addListener(listener: GuiListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  private removeListener(listener: GuiListener) {\r\n    this.listeners = this.listeners.filter(lis => lis !== listener);\r\n  }\r\n\r\n  public useListenerEffect(listener: GuiListener) {\r\n    return () => {\r\n      this.addListener(listener);\r\n      return () => this.removeListener(listener);\r\n    };\r\n  }\r\n\r\n  public generateUnit(unit: Unit) {\r\n    unit.viewObj = this.meshCache.makeUnitMesh(unit);\r\n  }\r\n\r\n  public drawUnit(unit: Unit) {\r\n    const mesh = unit.viewObj as InstancedMesh;\r\n\r\n    if (!unit.isAlive()) {\r\n      mesh.instancedBuffers.color = unit.owner.deadUnitColor;\r\n    }\r\n\r\n    mesh.scaling.setAll(0.5 + 0.5 * unit.healthProportion());\r\n    mesh.position.copyFrom(unit.position);\r\n    mesh.rotation.y = unit.rotY;\r\n  }\r\n\r\n  public generateTile(tile: Tile) {\r\n    tile.viewObj = this.meshCache.makeTileMesh(tile);\r\n\r\n    const r = tile.resMult;\r\n    const d = r < 0.75 ? 3 : 2;\r\n    const a = (tile.coords.x + d) % d;\r\n    for (let i = 0; i < Tile.directions.length; i++) {\r\n      if (r > 1.5 || (r < 0.75 && i % 3 === a) || (r >= 0.75 && i % 2 === a)) {\r\n        this.meshCache.makeResourceMesh(tile, i);\r\n      }\r\n    }\r\n\r\n    // const mmesh = MeshBuilder.CreatePlane(\r\n    //   `tile${this.coords.x}.${this.coords.y}`,\r\n    //   { size: 2 },\r\n    //   scene\r\n    // );\r\n    // mmesh.rotation.x = Math.PI * 0.5;\r\n    // mmesh.parent = this.mesh.parent;\r\n    // mmesh.position = this.mesh.position.clone();\r\n    // mmesh.position.y += 0.1;\r\n    //\r\n    // const texture = AdvancedDynamicTexture.CreateForMesh(mmesh);\r\n    // let text = ''; //`q ${this.coords.x},   r ${this.coords.y},   s ${this.coords.z}`;\r\n    // if (this.resMult !== 1) {\r\n    //   text += ' ==> ' + this.resMult + ' <==';\r\n    // }\r\n    //\r\n    // const button = Button.CreateSimpleButton(\r\n    //   `but${this.coords.x}.${this.coords.y}`,\r\n    //   text\r\n    // );\r\n    // button.width = 1;\r\n    // button.height = 0.4;\r\n    // button.color = 'white';\r\n    // button.fontSize = 150;\r\n    // button.background = 'green';\r\n    // texture.addControl(button);\r\n  }\r\n\r\n  public drawTile(tile: Tile) {\r\n    tile.viewObj.instancedBuffers.color = tile.owner.tileColor(\r\n      tile.isHome,\r\n      tile.healthProportion()\r\n    );\r\n  }\r\n\r\n  public gameWinnerMessage(): string {\r\n    return this.game.winner ? `${this.game.winner.name} wins!` : '';\r\n  }\r\n\r\n  public getFPS(): number {\r\n    return Math.round(this.scene.getEngine().getFps());\r\n  }\r\n\r\n  public getPlayerStatus(index: number): string {\r\n    const player = this.game.players[index];\r\n    const resCount = Math.floor(player.resourceCount);\r\n    const tileCount = countIf(this.game.board.tileList(), u => u.owner === player);\r\n    const unitCount = countIf(this.game.aliveUnits, u => u.owner === player);\r\n    return `${player.name}: $${resCount}, ${tileCount} tile(s), ${unitCount} unit(s)`;\r\n  }\r\n\r\n  public getPlayerUPS(index: number): UnitProductionStrategy {\r\n    return this.game.players[index].ups;\r\n  }\r\n  public setPlayerUPS(index: number, ups: UnitProductionStrategy) {\r\n    this.game.players[index].ups = ups;\r\n    this.updateUI(0);\r\n  }\r\n}\r\n","import SceneComponent from 'babylonjs-hook';\r\nimport React, { CSSProperties, useMemo } from 'react';\r\nimport { Game } from '../../core';\r\nimport { ControlPanel } from './ControlPanel';\r\nimport { GuiGameView } from './guiGameView';\r\nimport { OverLayMessage } from './OverLayMessage';\r\n\r\ntype GuiGameViewComponentProps = {\r\n  game: Game;\r\n};\r\n\r\nfunction getFPS(view: GuiGameView) {\r\n  return `FPS: ${view.getFPS()}`;\r\n}\r\nconst fpsStyle: CSSProperties = {\r\n  position: 'absolute',\r\n  top: 0,\r\n  right: 0,\r\n  opacity: 0.8,\r\n  padding: '0.5em',\r\n};\r\n\r\nfunction getWinnerMessage(view: GuiGameView) {\r\n  return view.gameWinnerMessage();\r\n}\r\nconst winnerStyle: CSSProperties = {\r\n  position: 'absolute',\r\n  top: '25vh',\r\n  left: 0,\r\n  right: 0,\r\n  fontSize: '6em',\r\n  textAlign: 'center',\r\n  textShadow: '#111 3px 3px',\r\n};\r\n\r\nconst p1Border = '1px dashed forestgreen';\r\nconst p1Style: CSSProperties = {\r\n  left: 0,\r\n  textAlign: 'left',\r\n  borderRight: p1Border,\r\n  borderTop: p1Border,\r\n};\r\n\r\nconst p2Border = '1px dashed red';\r\nconst p2Style: CSSProperties = {\r\n  right: 0,\r\n  textAlign: 'right',\r\n  borderLeft: p2Border,\r\n  borderTop: p2Border,\r\n};\r\n\r\nconst GuiGameViewComponent: React.FC<GuiGameViewComponentProps> = ({ game }) => {\r\n  const view = useMemo(() => new GuiGameView(game), [game]);\r\n\r\n  return (\r\n    <>\r\n      <OverLayMessage view={view} style={winnerStyle} getMessage={getWinnerMessage} />\r\n      <OverLayMessage view={view} style={fpsStyle} getMessage={getFPS} />\r\n      <SceneComponent\r\n        antialias\r\n        onSceneReady={scene => view.generate(scene)}\r\n        onRender={() => view.render()}\r\n        id=\"game-canvas\"\r\n      />\r\n      <ControlPanel view={view} playerIndex={1} style={p1Style} />\r\n      <ControlPanel view={view} playerIndex={2} style={p2Style} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GuiGameViewComponent;\r\n","import React, { useMemo } from 'react';\r\nimport { Game } from './core';\r\nimport GameGUI from './ui/gui';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const game = useMemo(() => new Game(), []);\r\n  return (\r\n    <div className=\"fullscreen\">\r\n      <GameGUI game={game} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}