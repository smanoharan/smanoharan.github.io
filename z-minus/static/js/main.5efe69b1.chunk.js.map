{"version":3,"sources":["ai/actions.ts","util/util.ts","ai/randomWalk.ts","core/config.ts","core/tile.ts","core/player.ts","core/board.ts","core/unit.ts","core/gameScene.ts","core/game.ts","ui/Alert.tsx","ui/ControlPanel.tsx","ui/GameScene.tsx","ui/Stats.tsx","App.tsx","index.tsx"],"names":["moveTowards","wait","unit","target","interrupt","targetDirection","subtract","position","normalize","curDirection","clone","Vector3","Dot","velocity","scaleInPlace","rotVelocity","Math","PI","owner","id","scaleToRef","unitType","maxSpeed","subtractToRef","timeMillis","elapsedMillis","randomInt","max","floor","random","randomElem","array","length","randomWeightedElem","weight","weights","map","selected","sum","i","randomWalkAI","offensiveUnitAI","defensiveUnitAI","curTile","occupancy","opponent","healthProportion","board","tilePref","posToTile","neighbours","nextNeighbour","console","warn","homeTile","toPos","t","diff","abs","minDurationState","tileSize","drawnTileSize","unitCost","tileMaxHealth","homeTileMaxHealth","tileControlThreshold","minUnitsToCapture","resourcesRate","unitTypes","displayName","maxHealth","attackVsUnit","attackVsTile","repairTile","repairSelf","meshFactory","scene","radius","height","options","diameter","tessellation","enclose","MeshBuilder","CreateCylinder","aiFactory","Tile","game","isHome","q","r","s","undefined","coords","health","mesh","error","this","config","gameScene","makeTileMesh","min","attackers","defenders","forEach","atk","attackUnit","units","players","unitsOnTile","filter","u","tile","p1Units","p2Units","resolveAttacks","soleOccupier","repair","attackTile","_elapsedMillis","resolveUnits","aliveUnits","instancedBuffers","color","tileColor","resourceCount","other","equals","x","y","sqrt3","a","b","z","qf","rf","sf","round","qDist","rDist","sDist","directions","UnitProductionStrategy","sqrt","Board","acceptTile","tiles","tileList","R","push","generate","updateDrawn","updateState","dir","pos","roundCoords","countIf","predicate","UnitState","UnitProductionStrategyDisplay","Player","name","hue","maxSaturation","stdTileColor","homeTileColor","fullUnitColor","deadUnitColor","strategy","Random","_scene","find","p","OffensiveOnly","DefensiveOnly","result","scale","scaleAndAddToRef","saturation","value","spawnUnit","nextUnitType","resCount","tileCount","unitCount","alpha","Color3","HSVtoRGBToRef","g","Color4","Unit","ai","state","targetAngle","active","makeUnitMesh","source","amount","minY","copyFrom","curAngle","rotation","won","angularVelocity","sin","setState","dead","next","dot","Forward","acos","scaling","setAll","damage","tileRepair","selfRepair","lost","GameScene","shadows","ambientColor","camera","ArcRotateCamera","lowerBetaLimit","upperBetaLimit","lowerRadiusLimit","upperRadiusLimit","setTarget","Zero","canvas","getEngine","getRenderingCanvas","attachControl","lights","HemisphericLight","intensity","castShadow","addShadowCaster","tileMesh","generateTileMesh","onAddMesh","meshInst","createInstance","isVisible","index","unitMesh","generateUnitMesh","unitMeshPrototype","unitColor","material","StandardMaterial","specularColor","CreateDisc","sideOrientation","Mesh","DOUBLESIDE","receiveShadows","registerInstancedBuffer","Game","allUnits","winner","listeners","elapsedMillisState","gaia","player1","player2","reset","first","second","firstAdj","secondAdj","off","def","nextId","running","isAlive","player","finishGame","notifyListeners","listener","l","current","AlertUI","onGetMessage","outRef","alertRef","useRef","updateAlert","useCallback","innerText","useEffect","className","ref","ControlPanelBtn","text","onClick","disabled","ControlPanelStrategyBtn","forStrategy","curStrategy","setStrategy","ControlPanelUI","playerRef","useState","updatePlayerStatus","statusDisplayText","log","GameSceneUI","antialias","onSceneReady","onRender","getDeltaTime","update","StatsUI","fpsRef","updateStats","fps","getFps","App","useMemo","statsRef","p1Ref","p2Ref","addGameStateListenerEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5efe69b1.chunk.js","sourcesContent":["import { Vector3 } from '@babylonjs/core';\nimport { Unit } from '../core';\n\nexport function* moveTowards(\n  unit: Unit,\n  target: Vector3,\n  interrupt: () => boolean\n) {\n  const targetDirection = target.subtract(unit.position).normalize();\n  let curDirection = targetDirection.clone();\n\n  while (Vector3.Dot(targetDirection, curDirection) > 0) {\n    if (interrupt()) {\n      unit.velocity.scaleInPlace(0);\n      unit.rotVelocity = Math.PI * (unit.owner.id === 1 ? 3 : -3);\n      yield* wait(50);\n      unit.rotVelocity = 0;\n      return;\n    }\n\n    targetDirection\n      .normalize()\n      .scaleToRef(unit.unitType.maxSpeed, unit.velocity);\n\n    yield; // wait for next update\n\n    target.subtractToRef(unit.position, curDirection);\n  }\n\n  unit.velocity.scaleInPlace(0);\n}\n\nexport function* wait(timeMillis: number) {\n  let elapsedMillis = 0;\n  while (elapsedMillis < timeMillis) {\n    elapsedMillis += yield;\n  }\n}\n","export type WeightFn<T> = (t: T) => number;\n\nexport function randomInt(max: number): number {\n  return Math.floor(Math.random() * max);\n}\n\nexport function randomElem<T>(array: T[]): T | undefined {\n  if (array.length > 0) {\n    return array[randomInt(array.length)];\n  }\n  return undefined;\n}\n\nfunction sum(array: number[]): number {\n  // simpler to under than reduce\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\nexport function randomWeightedElem<T>(\n  array: T[],\n  weight: WeightFn<T>\n): T | undefined {\n  if (array.length === 0) return undefined;\n\n  const weights = array.map(weight);\n  let selected = randomInt(sum(weights));\n  for (let i = 0; i < weights.length; i++) {\n    selected -= weights[i];\n    if (selected < 0) return array[i];\n  }\n\n  return array[array.length - 1];\n}\n","import { Unit, Board, Tile } from '../core';\nimport { moveTowards } from './actions';\nimport { randomWeightedElem, WeightFn } from '../util/util';\n\nfunction interrupt(unit: Unit, curTile: Tile): boolean {\n  if (curTile.occupancy[unit.owner.opponent.id] > 0) {\n    // enemy spotted\n    return true;\n  }\n\n  if (curTile.owner === unit.owner.opponent) {\n    // enemy tile, try to destroy it\n    return true;\n  }\n\n  if (curTile.owner === unit.owner && curTile.healthProportion() < 0.99) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function* randomWalkAI(\n  unit: Unit,\n  board: Board,\n  tilePref: WeightFn<Tile>\n) {\n  while (true) {\n    const curTile = board.posToTile(unit.position);\n    const neighbours = curTile && board.neighbours(curTile);\n    const nextNeighbour =\n      neighbours && randomWeightedElem(neighbours, tilePref);\n    if (!nextNeighbour) {\n      console.warn('ran out of neighbours', neighbours?.length || 0);\n    }\n    const target = nextNeighbour || unit.owner.homeTile;\n    yield* moveTowards(unit, target.toPos(), () => {\n      const curTile = board.posToTile(unit.position);\n      return !!curTile && interrupt(unit, curTile);\n    });\n    // yield* wait(50); // TODO SM Wait for rotation\n  }\n}\n\nexport function* offensiveUnitAI(unit: Unit, board: Board) {\n  yield* randomWalkAI(unit, board, (t) => {\n    const diff = Math.abs(unit.owner.id - t.owner.id) + 1;\n    return diff * diff * diff;\n  });\n}\n\nexport function* defensiveUnitAI(unit: Unit, board: Board) {\n  yield* randomWalkAI(unit, board, (t) => {\n    const diff = 2 - Math.abs(unit.owner.id - t.owner.id) + 1;\n    return diff * diff * diff;\n  });\n}\n","import { Mesh, MeshBuilder, Scene } from '@babylonjs/core';\nimport { defensiveUnitAI, offensiveUnitAI } from '../ai/randomWalk';\nimport { Unit } from './unit';\nimport { Board } from './board';\n\nconst rateScale = 1;\n\nexport type UnitType = {\n  id: number;\n  displayName: string;\n\n  maxHealth: number;\n\n  // all of these are in per-second\n  maxSpeed: number;\n  attackVsUnit: number;\n  attackVsTile: number;\n  repairTile: number;\n  repairSelf: number; // when in an owned tile\n\n  meshFactory: (scene: Scene, radius: number, height: number) => Mesh;\n  aiFactory: (unit: Unit, board: Board) => Generator;\n};\n\nconst offensiveUnitType: UnitType = {\n  id: 0,\n  displayName: 'Offensive',\n  maxHealth: 10,\n\n  maxSpeed: 1.5,\n  attackVsUnit: 4,\n  attackVsTile: 2,\n  repairTile: 0.5,\n  repairSelf: 0.5,\n\n  meshFactory: offensiveMeshFactory,\n  aiFactory: offensiveAIFactory,\n};\n\nconst defensiveUnitType: UnitType = {\n  id: 1,\n  displayName: 'Defensive',\n  maxHealth: 15,\n\n  maxSpeed: 2,\n  attackVsUnit: 3,\n  attackVsTile: 0.25,\n  repairTile: 2,\n  repairSelf: 1,\n\n  meshFactory: defensiveMeshFactory,\n  aiFactory: defensiveAIFactory,\n};\n\nfunction offensiveMeshFactory(\n  scene: Scene,\n  radius: number,\n  height: number\n): Mesh {\n  const options = {\n    diameter: 2 * radius,\n    height,\n    tessellation: 3,\n    enclose: true,\n  };\n  return MeshBuilder.CreateCylinder('offUnit', options, scene);\n}\n\nfunction defensiveMeshFactory(\n  scene: Scene,\n  radius: number,\n  height: number\n): Mesh {\n  const options = {\n    diameter: 1.7 * radius,\n    height,\n    tessellation: 5,\n    enclose: true,\n  };\n  return MeshBuilder.CreateCylinder('defUnit', options, scene);\n}\n\nfunction offensiveAIFactory(unit: Unit, board: Board): Generator {\n  return offensiveUnitAI(unit, board);\n}\n\nfunction defensiveAIFactory(unit: Unit, board: Board): Generator {\n  return defensiveUnitAI(unit, board);\n}\n\nexport default {\n  minDurationState: 50 / rateScale, // update state every 50ms\n\n  tileSize: 2, // how large tiles are in reality\n  drawnTileSize: 0.98 * 2, // how large tiles are drawn -- leave space for a gap\n\n  unitCost: 10,\n  tileMaxHealth: 20,\n  homeTileMaxHealth: 50,\n  tileControlThreshold: 0.8, // if the health > maxHealth * threshold, then this tile produces resources for its owner\n  minUnitsToCapture: 2, // need at least 2 units before a tile can be captured\n\n  // all these are in per second\n  resourcesRate: rateScale,\n\n  unitTypes: [offensiveUnitType, defensiveUnitType],\n};\n","import { InstancedMesh, Scene, Vector3 } from '@babylonjs/core';\nimport config from './config';\nimport { Player } from './player';\nimport { Unit } from './unit';\nimport { Game } from './game';\nimport { randomElem } from '../util/util';\n\nexport class Tile {\n  // using q, r, s cubic coords\n  public readonly coords: Vector3;\n  public health: number;\n  public readonly maxHealth: number;\n  public mesh: InstancedMesh;\n  public occupancy: number[];\n\n  public constructor(\n    private readonly game: Game,\n    public owner: Player,\n    public readonly isHome: boolean,\n    q: number,\n    r: number,\n    s: number | undefined = undefined\n  ) {\n    if (s === undefined) {\n      s = -(q + r);\n    } else if (q + r + s !== 0) {\n      console.error('Attempting to create an invalid Tile', { q, r, s });\n    }\n\n    this.coords = new Vector3(q, r, s);\n    this.mesh = undefined!; // init'd on generate\n    this.maxHealth = isHome ? config.homeTileMaxHealth : config.tileMaxHealth;\n    this.health = isHome ? this.maxHealth : 0;\n    this.occupancy = [0, 0, 0];\n  }\n\n  public generate(scene: Scene) {\n    this.mesh = this.game.gameScene.makeTileMesh(this, scene);\n  }\n\n  public healthProportion(): number {\n    return Math.min(1, Math.max(0, this.health / this.maxHealth));\n  }\n\n  private resolveAttacks(\n    attackers: Unit[],\n    defenders: Unit[],\n    elapsedMillis: number\n  ) {\n    attackers.forEach((atk) =>\n      atk.attackUnit(randomElem(defenders)!, elapsedMillis)\n    );\n  }\n\n  private resolveUnits(\n    units: Unit[],\n    players: Player[],\n    elapsedMillis: number\n  ) {\n    const unitsOnTile = units.filter((u) => u.tile === this);\n    if (unitsOnTile.length === 0) return;\n\n    const p1Units = unitsOnTile.filter((u) => u.owner === players[1]);\n    const p2Units = unitsOnTile.filter((u) => u.owner === players[2]);\n    this.occupancy = [0, p1Units.length, p2Units.length];\n\n    if (p1Units.length > 0 && p2Units.length > 0) {\n      this.resolveAttacks(p1Units, p2Units, elapsedMillis);\n      this.resolveAttacks(p2Units, p1Units, elapsedMillis);\n    } else {\n      const soleOccupier = unitsOnTile[0].owner;\n      if (\n        this.owner === players[0] &&\n        unitsOnTile.length >= config.minUnitsToCapture\n      ) {\n        this.owner = soleOccupier;\n      }\n\n      if (this.owner === soleOccupier) {\n        unitsOnTile.forEach((u) => u.repair(this, elapsedMillis));\n      } else if (this.owner !== players[0]) {\n        unitsOnTile.forEach((u) => u.attackTile(this, elapsedMillis));\n      }\n\n      if (this.healthProportion() < 0.1) {\n        this.owner = players[0];\n      }\n    }\n  }\n\n  public updateDrawn(_elapsedMillis: number) {\n    // nothing needs to be updated per frame\n  }\n\n  public updateState(elapsedMillis: number) {\n    const { resourcesRate, tileControlThreshold } = config;\n\n    this.resolveUnits(this.game.aliveUnits, this.game.players, elapsedMillis);\n\n    this.mesh.instancedBuffers.color = this.owner.tileColor(\n      this.isHome,\n      this.healthProportion()\n    );\n\n    if (this.healthProportion() > tileControlThreshold) {\n      this.owner.resourceCount += (elapsedMillis * resourcesRate) / 1000;\n    }\n  }\n\n  public equals(other: Tile): boolean {\n    return this.coords.equals(other.coords);\n  }\n\n  public static distBetween(a: Tile, b: Tile): number {\n    const { x, y, z } = a.coords.subtract(b.coords);\n    return 0.5 * (Math.abs(x) + Math.abs(y) + Math.abs(z));\n  }\n\n  // increment in CCW order, starting with straight up (north).\n  public static directions = [\n    new Vector3(+0, +1, -1), // north\n    new Vector3(+1, +0, -1), // north east\n    new Vector3(+1, -1, +0), // south east\n    new Vector3(+0, -1, +1), // south\n    new Vector3(-1, +0, +1), // south west\n    new Vector3(-1, +1, +0), // north west\n  ];\n\n  public static roundCoords(qf: number, rf: number): { q: number; r: number } {\n    const sf = -qf - rf;\n    const q = Math.round(qf);\n    const r = Math.round(rf);\n    const s = Math.round(sf);\n\n    const qDist = Math.abs(qf - q);\n    const rDist = Math.abs(rf - r);\n    const sDist = Math.abs(sf - s);\n\n    if (qDist > Math.max(rDist, sDist)) {\n      return { q: -r - s, r };\n    }\n    if (rDist > sDist) {\n      return { q, r: -q - s };\n    }\n    return { q, r };\n  }\n\n  public toPos(): Vector3 {\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\n    const { x, y } = this.coords;\n    return new Vector3(\n      1.5 * x * config.tileSize,\n      0,\n      sqrt3 * (0.5 * x + y) * config.tileSize\n    );\n  }\n}\nconst sqrt3 = Math.sqrt(3);\n","import { Color3, Color4, Scene } from '@babylonjs/core';\nimport config, { UnitType } from './config';\nimport { Tile } from './tile';\nimport { Game } from './game';\nimport { randomElem } from '../util/util';\n\nfunction countIf<T>(array: T[], predicate: (t: T) => boolean) {\n  return array.filter(predicate).length;\n}\n\nexport enum UnitProductionStrategy {\n  OffensiveOnly,\n  DefensiveOnly,\n  Random,\n}\nexport const UnitProductionStrategyDisplay = [\n  'Offensive',\n  'Defensive',\n  'Random',\n];\n\nexport class Player {\n  public readonly stdTileColor: Color4;\n  public readonly homeTileColor: Color4;\n  public readonly fullUnitColor: Color4;\n  public readonly deadUnitColor: Color4;\n  public opponent: Player;\n\n  public homeTile: Tile;\n  public resourceCount: number;\n  public strategy: UnitProductionStrategy;\n\n  constructor(\n    private readonly game: Game,\n    public readonly id: number,\n    public readonly name: string,\n    private readonly hue: number,\n    private readonly maxSaturation: number\n  ) {\n    this.stdTileColor = Player.color(hue, 0.4 * maxSaturation, 0.8);\n    this.homeTileColor = Player.color(hue, 0.8 * maxSaturation, 0.6);\n    this.fullUnitColor = Player.color(hue, 0.9 * maxSaturation, 0.95);\n    this.deadUnitColor = Player.color(hue, 0.4 * maxSaturation, 0.3, 0.3);\n\n    this.resourceCount = 0;\n    this.strategy = UnitProductionStrategy.Random;\n    this.homeTile = undefined!; // init'd on generate\n    this.opponent = undefined!; // init'd on generate\n  }\n\n  public generate(_scene: Scene) {\n    this.homeTile = this.game.board.tileList.find(\n      (t) => t.owner === this && t.isHome\n    )!;\n    this.opponent = this.game.players.find(\n      (p) => p.id > 0 && p.id !== this.id\n    )!;\n  }\n\n  private nextUnitType(): UnitType {\n    switch (this.strategy) {\n      case UnitProductionStrategy.OffensiveOnly:\n        return config.unitTypes[0];\n      case UnitProductionStrategy.DefensiveOnly:\n        return config.unitTypes[1];\n    }\n    // random\n    return randomElem(config.unitTypes)!;\n  }\n\n  public unitColor(healthProportion: number): Color4 {\n    const result = this.fullUnitColor.scale(healthProportion);\n    this.deadUnitColor.scaleAndAddToRef(1 - healthProportion, result);\n    return result;\n  }\n\n  public tileColor(isHome: boolean, healthProportion: number): Color4 {\n    const saturation =\n      (isHome ? 0.8 : 0.4) * healthProportion * this.maxSaturation;\n    const value = isHome ? 0.6 : 0.8;\n    return Player.color(this.hue, saturation, value);\n  }\n\n  public updateState(_elapsedMillis: number) {\n    // automatically spawn unit when there are enough resources\n    while (this.resourceCount > config.unitCost) {\n      this.resourceCount -= config.unitCost;\n      this.game.spawnUnit(this, this.nextUnitType(), this.homeTile);\n    }\n  }\n\n  public isAlive(): boolean {\n    return this.homeTile.owner === this;\n  }\n\n  public statusDisplayText(game: Game): string {\n    const resCount = Math.floor(this.resourceCount);\n    const tileCount = countIf(game.board.tileList, (u) => u.owner === this);\n    const unitCount = countIf(game.aliveUnits, (u) => u.owner === this);\n    return `${this.name}: $${resCount}, ${tileCount} tile(s), ${unitCount} unit(s)`;\n  }\n\n  private static color(\n    hue: number,\n    saturation: number,\n    value: number,\n    alpha: number = 1\n  ): Color4 {\n    const result = new Color3();\n    Color3.HSVtoRGBToRef(hue, saturation, value, result);\n\n    const { r, g, b } = result;\n    return new Color4(r, g, b, alpha);\n  }\n}\n","import { Scene, Vector3 } from '@babylonjs/core';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Game } from './game';\n\ntype TileFilter = (q: number, r: number, s: number) => boolean;\n\nexport class Board {\n  private readonly tiles: Tile[][]; // indexed by q,r\n  public readonly tileList: Tile[]; // just a list\n\n  constructor(\n    private readonly game: Game,\n    private readonly radius: number, // integer, number of tiles from center\n    acceptTile: TileFilter\n  ) {\n    this.tiles = [];\n    this.tileList = [];\n\n    const R = radius;\n    for (let q = -R; q <= R; q++) {\n      this.tiles[q + R] = [];\n\n      for (let r = -R; r <= R; r++) {\n        const s = -(q + r);\n\n        if (-R <= s && s <= R && acceptTile(q, r, s)) {\n          const isHome = q === 0 && Math.abs(r) === R;\n          const owner = game.players[isHome ? (r === R ? 1 : 2) : 0];\n          const tile = new Tile(game, owner, isHome, q, r);\n          this.tiles[q + R][r + R] = tile;\n          this.tileList.push(tile);\n        }\n      }\n    }\n  }\n\n  public generate(scene: Scene) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      const tile = this.tileList[i];\n      tile.generate(scene);\n    }\n  }\n\n  public updateDrawn(elapsedMillis: number) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      this.tileList[i].updateDrawn(elapsedMillis);\n    }\n  }\n\n  public updateState(elapsedMillis: number) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      this.tileList[i].updateState(elapsedMillis);\n    }\n  }\n\n  public tile(q: number, r: number): Tile | undefined {\n    const R = this.radius;\n    if (-R <= q && q <= R && -R <= r && r <= R) {\n      return this.tiles[q + R][r + R];\n    }\n    return undefined;\n  }\n\n  public neighbours(tile: Tile): Tile[] {\n    const { x, y } = tile.coords;\n    return Tile.directions\n      .map((dir) => this.tile(x + dir.x, y + dir.y))\n      .filter((t) => !!t) as Tile[];\n  }\n\n  public posToTile(pos: Vector3): Tile | undefined {\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\n    const x = pos.x / config.tileSize;\n    const z = pos.z / config.tileSize;\n    const { q, r } = Tile.roundCoords((2.0 / 3.0) * x, (sqrt3 * z - x) / 3.0);\n    return this.tile(q, r);\n  }\n}\nconst sqrt3 = Math.sqrt(3);\n","import { InstancedMesh, Scene, Vector3 } from '@babylonjs/core';\nimport { Player } from './player';\nimport { Tile } from './tile';\nimport { Game } from './game';\nimport config, { UnitType } from './config';\n\nexport enum UnitState {\n  active,\n  dead,\n  won,\n  lost,\n}\n\nexport class Unit {\n  public mesh: InstancedMesh;\n  private ai: Generator | undefined;\n  private state: UnitState;\n  public velocity: Vector3;\n  public rotVelocity: number;\n  private targetAngle: number;\n  private health: number;\n\n  constructor(\n    private readonly game: Game,\n    public readonly id: number,\n    public readonly owner: Player,\n    public readonly unitType: UnitType,\n    public tile: Tile,\n    public position: Vector3\n  ) {\n    this.state = UnitState.active;\n    this.velocity = new Vector3();\n    this.rotVelocity = 0;\n    this.targetAngle = 0;\n    this.health = this.unitType.maxHealth;\n\n    // init'd on generate\n    this.mesh = undefined!;\n    this.ai = undefined!;\n  }\n\n  public generate(scene: Scene) {\n    this.mesh = this.game.gameScene.makeUnitMesh(this, scene);\n    this.ai = this.unitType.aiFactory(this, this.game.board);\n  }\n\n  public updateDrawn(elapsedMillis: number) {\n    const minY = 0.05 + this.owner.id * 0.01; // TODO SM just a hack to avoid z-buffer issues\n\n    switch (this.state) {\n      case UnitState.active:\n        this.velocity.scaleAndAddToRef(elapsedMillis / 1000, this.position);\n        this.mesh.position.copyFrom(this.position); // TODO SM interpolate instead of immediate movement\n        this.mesh.position.y = minY;\n\n        this.targetAngle += (this.rotVelocity * elapsedMillis) / 1000;\n        if (this.targetAngle > 2 * Math.PI) {\n          this.targetAngle -= 2 * Math.PI;\n        }\n        const curAngle = this.mesh.rotation.y;\n        this.mesh.rotation.y = lerp(curAngle, this.targetAngle, 0.1);\n        break;\n\n      case UnitState.won:\n        // spin around on the spot randomly\n        const angularVelocity = (this.id % 4) * 2 - 3;\n        this.mesh.rotation.y += (angularVelocity * elapsedMillis) / 1000;\n\n        // bobble up & down randomly\n        const amplitude = ((this.id % 3) + 1) * 0.2;\n        const height = amplitude * (0.8 + Math.sin(this.mesh.rotation.y));\n        this.mesh.position.y = minY + Math.max(0, height);\n        break;\n    }\n  }\n\n  public updateState(elapsedMillis: number) {\n    if (this.health <= 0.001) this.setState(UnitState.dead);\n    if (this.state !== UnitState.active) return;\n\n    this.ai!.next(elapsedMillis);\n    this.tile = this.game.board.posToTile(this.position) || this.owner.homeTile;\n\n    const speed = this.velocity.length();\n    if (speed > 0.1) {\n      const dot = Vector3.Dot(Vector3.Forward(), this.velocity);\n      this.targetAngle = Math.PI / 6 + Math.acos(dot / this.velocity.length());\n    }\n\n    this.mesh.scaling.setAll(\n      0.5 + (0.5 * this.health) / this.unitType.maxHealth\n    );\n  }\n\n  public attackUnit(target: Unit, elapsedMillis: number) {\n    const damage = (this.unitType.attackVsUnit * elapsedMillis) / 1000.0;\n    target.health = Math.max(0, target.health - damage);\n  }\n\n  public attackTile(target: Tile, elapsedMillis: number) {\n    const damage = (this.unitType.attackVsTile * elapsedMillis) / 1000.0;\n    target.health = Math.max(0, target.health - damage);\n  }\n\n  public repair(target: Tile, elapsedMillis: number) {\n    const { repairTile, repairSelf, maxHealth } = this.unitType;\n    const { tileControlThreshold } = config;\n\n    const tileRepair = (repairTile * elapsedMillis) / 1000.0;\n    target.health = Math.min(target.maxHealth, target.health + tileRepair);\n\n    if (target.healthProportion() > tileControlThreshold) {\n      const selfRepair = (repairSelf * elapsedMillis) / 1000.0;\n      this.health = Math.min(maxHealth, this.health + selfRepair);\n    }\n  }\n\n  public isAlive(): boolean {\n    return this.state === UnitState.active || this.state === UnitState.won;\n  }\n\n  public setState(state: UnitState) {\n    if (this.state === state) return;\n\n    switch (state) {\n      case UnitState.won:\n        this.velocity.scaleInPlace(0);\n        break;\n\n      case UnitState.dead:\n      case UnitState.lost:\n        this.mesh.instancedBuffers.color = this.owner.deadUnitColor;\n        this.ai = undefined;\n        this.velocity.scaleInPlace(0);\n        this.mesh.position.y = 0.05 + this.owner.id * 0.001; // TODO SM just a hack to avoid z-buffer issues\n        break;\n    }\n    this.state = state;\n  }\n}\n\nfunction lerp(source: number, target: number, amount: number): number {\n  return source * amount + target * (1 - amount);\n}\n","import {\n  AbstractMesh,\n  ArcRotateCamera,\n  Color3,\n  Color4,\n  HemisphericLight,\n  Mesh,\n  MeshBuilder,\n  Scene,\n  ShadowGenerator,\n  StandardMaterial,\n  Vector3,\n} from '@babylonjs/core';\nimport { Game } from './game';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Unit } from './unit';\n\nexport class GameScene {\n  private scene: Scene;\n\n  private shadows: ShadowGenerator[];\n\n  constructor(private readonly game: Game) {\n    this.scene = undefined!; // init'd on generate\n    this.shadows = [];\n  }\n\n  public generate(scene: Scene) {\n    this.scene = scene;\n\n    scene.ambientColor = new Color3(1, 1, 1);\n\n    const camera = new ArcRotateCamera(\n      'camera1',\n      0,\n      0,\n      10,\n      new Vector3(0, 6, 16),\n      scene\n    );\n    camera.lowerBetaLimit = 0.1;\n    camera.upperBetaLimit = (Math.PI / 2) * 0.8;\n    camera.lowerRadiusLimit = 10;\n    camera.upperRadiusLimit = 100;\n    camera.setTarget(Vector3.Zero());\n\n    const canvas = scene.getEngine().getRenderingCanvas()!;\n    camera.attachControl(canvas, true);\n\n    const lights = [\n      new HemisphericLight('light', new Vector3(0, 1, -2), scene),\n      new HemisphericLight('light', new Vector3(1, 1, 1), scene),\n      new HemisphericLight('light', new Vector3(-1, 1, 1), scene),\n    ];\n    for (let i = 0; i < lights.length; i++) {\n      lights[i].intensity = 0.4;\n    }\n\n    // TODO SM Shadows look poor, needs improvement\n    // this.shadows = lights.map((l) => new ShadowGenerator(1024, l));\n    // for (let i = 0; i < this.shadows.length; i++) {\n    //   this.shadows[i].usePoissonSampling = true; // TODO SM expensive\n    // }\n  }\n\n  private onAddMesh(mesh: AbstractMesh, castShadow: boolean) {\n    if (castShadow) {\n      for (let i = 0; i < this.shadows.length; i++) {\n        this.shadows[i].addShadowCaster(mesh);\n      }\n    }\n  }\n\n  private static tileMesh: Mesh | undefined;\n  private static generateTileMesh(scene: Scene, radius: number): Mesh {\n    const material = new StandardMaterial(`tileMeshMaterial`, scene);\n    material.specularColor = new Color3(0.5, 0.6, 0.87);\n\n    const mesh = MeshBuilder.CreateDisc(\n      `tileMesh`,\n      { radius, tessellation: 6, sideOrientation: Mesh.DOUBLESIDE },\n      scene\n    );\n    mesh.receiveShadows = true;\n\n    mesh.rotation.x = Math.PI * 0.5; // rotate from XY plane to XZ\n    mesh.material = material;\n    mesh.isVisible = false; // hide prototype, only the instanced copies should be visible\n\n    mesh.registerInstancedBuffer('color', 4);\n    mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\n\n    return mesh;\n  }\n\n  public makeTileMesh(tile: Tile, scene: Scene) {\n    if (!GameScene.tileMesh) {\n      GameScene.tileMesh = GameScene.generateTileMesh(\n        scene,\n        config.drawnTileSize\n      );\n      this.onAddMesh(GameScene.tileMesh, true);\n    }\n\n    const { x, y, z } = tile.coords;\n    const meshInst = GameScene.tileMesh.createInstance(\n      `tileMesh/${x}/${y}/${z}`\n    );\n    meshInst.position.copyFrom(tile.toPos());\n    meshInst.isVisible = true;\n    this.onAddMesh(meshInst, true);\n    return meshInst;\n  }\n\n  private static readonly unitMesh: Mesh[] = [];\n  private static generateUnitMesh(\n    scene: Scene,\n    unit: Unit,\n    radius: number,\n    height: number\n  ): Mesh {\n    const material = new StandardMaterial(`unitMeshMaterial`, scene);\n    material.specularColor = new Color3(0.8, 0.8, 0.9);\n\n    const mesh = unit.unitType.meshFactory(scene, radius, height);\n    mesh.material = material;\n    mesh.isVisible = false; // hide prototype, only instanced meshes are shown\n\n    mesh.registerInstancedBuffer('color', 4);\n    mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\n\n    return mesh;\n  }\n\n  private unitMeshPrototype(unit: Unit) {\n    const index = unit.unitType.id;\n    if (!GameScene.unitMesh[index]) {\n      GameScene.unitMesh[index] = GameScene.generateUnitMesh(\n        this.scene,\n        unit,\n        0.4,\n        0.1\n      );\n      this.onAddMesh(GameScene.unitMesh[index], true);\n    }\n\n    return GameScene.unitMesh[index];\n  }\n\n  public makeUnitMesh(unit: Unit, scene: Scene) {\n    const meshPrototype = this.unitMeshPrototype(unit);\n    const meshInst = meshPrototype.createInstance(`unitMesh/${unit.id}`);\n    meshInst.isVisible = true;\n    meshInst.instancedBuffers.color = unit.owner.unitColor(1);\n    meshInst.position.copyFrom(unit.position);\n\n    this.onAddMesh(meshInst, true);\n    return meshInst;\n  }\n}\n","import { MutableRefObject } from 'react';\nimport { Scene } from '@babylonjs/core';\nimport config, { UnitType } from './config';\nimport { Player } from './player';\nimport { Board } from './board';\nimport { Unit, UnitState } from './unit';\nimport { Tile } from './tile';\nimport { GameScene } from './gameScene';\n\nexport type GameStateFn = (game: Game) => void;\ntype GameStateListener = MutableRefObject<GameStateFn | undefined>;\n\nexport class Game {\n  public readonly players: Player[];\n  public readonly board: Board;\n  public readonly allUnits: Unit[];\n  public aliveUnits: Unit[];\n  public scene: Scene | undefined;\n  public winner: Player | undefined;\n  public gameScene: GameScene;\n\n  private listeners: GameStateListener[];\n  private elapsedMillisState: number = 0;\n\n  constructor() {\n    const gaia = new Player(this, 0, 'Gaia', 180, 0.01);\n    const player1 = new Player(this, 1, 'Green', 120, 1);\n    const player2 = new Player(this, 2, 'Red', 0, 1);\n    this.players = [gaia, player1, player2];\n\n    this.board = new Board(this, 2, () => true);\n    this.allUnits = [];\n    this.aliveUnits = [];\n    this.gameScene = new GameScene(this);\n    this.scene = undefined;\n    this.winner = undefined;\n    this.listeners = [];\n  }\n\n  public generate(scene: Scene) {\n    this.gameScene.generate(scene);\n\n    this.board.generate(scene);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].generate(scene);\n    }\n\n    for (let i = 0; i < this.players.length; i++) {\n      const player = this.players[i];\n      player.generate(scene);\n    }\n\n    this.scene = scene;\n    this.reset();\n  }\n\n  public reset() {\n    const [, first, second] = this.players;\n    const firstAdj = this.board.neighbours(first.homeTile);\n    const secondAdj = this.board.neighbours(second.homeTile);\n\n    const [off, def] = config.unitTypes;\n    this.spawnUnit(first, def, first.homeTile);\n    this.spawnUnit(second, def, second.homeTile);\n    this.spawnUnit(first, off, firstAdj[1]);\n    this.spawnUnit(second, off, secondAdj[0]);\n  }\n\n  public spawnUnit(owner: Player, unitType: UnitType, tile: Tile) {\n    const nextId = this.allUnits.length;\n    const unit = new Unit(this, nextId, owner, unitType, tile, tile.toPos());\n    this.scene && unit.generate(this.scene);\n    this.allUnits.push(unit);\n    this.aliveUnits.push(unit);\n  }\n\n  public update(elapsedMillis: number) {\n    this.updateDrawn(elapsedMillis);\n\n    this.elapsedMillisState += elapsedMillis;\n    if (this.running() && this.elapsedMillisState >= config.minDurationState) {\n      this.updateState(this.elapsedMillisState);\n      this.elapsedMillisState = 0;\n    }\n  }\n\n  private updateDrawn(elapsedMillis: number) {\n    if (!this.scene) return;\n\n    this.board.updateDrawn(elapsedMillis);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].updateDrawn(elapsedMillis);\n    }\n  }\n\n  private updateState(elapsedMillis: number) {\n    this.board.updateState(elapsedMillis);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].updateState(elapsedMillis);\n    }\n\n    this.aliveUnits = this.allUnits.filter((u) => u.isAlive());\n\n    for (let i = 1; i <= 2; i++) {\n      const player = this.players[i];\n      player.updateState(elapsedMillis);\n      if (!player.isAlive()) {\n        const winner = this.players[3 - i];\n        this.finishGame(winner);\n      }\n    }\n\n    this.notifyListeners();\n  }\n\n  public addGameStateListenerEffect(listener: GameStateListener) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener);\n    };\n  }\n\n  private notifyListeners() {\n    for (let i = 0; i < this.listeners.length; i++) {\n      const listener = this.listeners[i];\n      listener.current && listener.current(this);\n    }\n  }\n\n  public running(): boolean {\n    return this.winner === undefined;\n  }\n\n  private finishGame(winner: Player) {\n    this.winner = winner;\n\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      const unit = this.aliveUnits[i];\n      unit.setState(unit.owner === winner ? UnitState.won : UnitState.lost);\n    }\n  }\n}\n","import React, { MutableRefObject, useCallback, useEffect, useRef } from 'react';\nimport { Game } from '../core';\nimport { GameRefFn } from './types';\nimport './Alert.css';\n\ntype AlertUIProps = {\n  onGetMessage: (game: Game) => string;\n  outRef: MutableRefObject<GameRefFn | undefined>;\n};\n\nconst AlertUI: React.FC<AlertUIProps> = ({ onGetMessage, outRef }) => {\n  const alertRef = useRef<HTMLDivElement | null>(null);\n\n  const updateAlert = useCallback(\n    (game: Game) => {\n      if (alertRef.current) {\n        alertRef.current.innerText = onGetMessage(game);\n      }\n    },\n    [alertRef, onGetMessage]\n  );\n\n  useEffect(() => {\n    outRef.current = updateAlert;\n  }, [outRef, updateAlert]);\n\n  return <div className=\"alert\" ref={alertRef} />;\n};\n\nexport default AlertUI;\n","import React, {\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport './ControlPanel.css';\nimport { Game, Player } from '../core';\nimport { GameRefFn } from './types';\nimport {\n  UnitProductionStrategy,\n  UnitProductionStrategyDisplay,\n} from '../core/player';\n\ntype ControlPanelBtnProps = {\n  text: string;\n  active: boolean;\n  onClick: () => void;\n};\nconst ControlPanelBtn: React.FC<ControlPanelBtnProps> = ({\n  text,\n  active,\n  onClick,\n}) => (\n  <button className=\"control-panel-btn\" onClick={onClick} disabled={active}>\n    {text}\n  </button>\n);\n\ntype ControlPanelStrategyBtnProps = {\n  forStrategy: UnitProductionStrategy;\n  curStrategy: UnitProductionStrategy;\n  setStrategy: (strategy: UnitProductionStrategy) => void;\n};\nconst ControlPanelStrategyBtn: React.FC<ControlPanelStrategyBtnProps> = ({\n  forStrategy,\n  curStrategy,\n  setStrategy,\n}) => (\n  <ControlPanelBtn\n    text={UnitProductionStrategyDisplay[forStrategy]}\n    active={curStrategy === forStrategy}\n    onClick={() => setStrategy(forStrategy)}\n  />\n);\n\ntype ControlPanelProps = {\n  player: Player;\n  position: 'left' | 'right';\n  outRef: MutableRefObject<GameRefFn | undefined>;\n};\n\nconst ControlPanelUI: React.FC<ControlPanelProps> = ({\n  player,\n  position,\n  outRef,\n}) => {\n  const playerRef = useRef<HTMLDivElement | null>(null);\n  const [strategy, setStrategy] = useState<UnitProductionStrategy>(\n    player.strategy\n  );\n\n  const updatePlayerStatus = useCallback(\n    (game: Game) => {\n      if (playerRef.current) {\n        playerRef.current.innerText = player.statusDisplayText(game);\n      }\n    },\n    [playerRef, player]\n  );\n\n  useEffect(() => {\n    if (outRef) {\n      outRef.current = updatePlayerStatus;\n    }\n  }, [outRef, updatePlayerStatus]);\n\n  useEffect(() => {\n    console.log('changing', player.name, strategy);\n    player.strategy = strategy;\n  }, [player, strategy]);\n\n  const off = UnitProductionStrategy.OffensiveOnly;\n  const def = UnitProductionStrategy.DefensiveOnly;\n  const random = UnitProductionStrategy.Random;\n\n  const className = `control-panel control-panel-${position}`;\n  return (\n    <div className={className}>\n      <div className=\"stats-p1\" ref={playerRef} />\n      <ControlPanelStrategyBtn\n        forStrategy={off}\n        curStrategy={strategy}\n        setStrategy={setStrategy}\n      />\n      <ControlPanelStrategyBtn\n        forStrategy={def}\n        curStrategy={strategy}\n        setStrategy={setStrategy}\n      />\n      <ControlPanelStrategyBtn\n        forStrategy={random}\n        curStrategy={strategy}\n        setStrategy={setStrategy}\n      />\n    </div>\n  );\n};\n\nexport default ControlPanelUI;\n","import React from 'react';\nimport SceneComponent from 'babylonjs-hook';\nimport { Game } from '../core';\nimport './GameScene.css';\nimport { Scene } from '@babylonjs/core';\n\ntype GameSceneProps = {\n  game: Game;\n};\n\nconst GameSceneUI: React.FC<GameSceneProps> = ({ game }) => {\n  const onRender = (scene: Scene) => {\n    const elapsedMillis = scene.getEngine().getDeltaTime();\n    game.update(elapsedMillis);\n  };\n\n  return (\n    <SceneComponent\n      antialias\n      onSceneReady={(scene) => game.generate(scene)}\n      onRender={onRender}\n      id=\"game-canvas\"\n    />\n  );\n};\n\nexport default GameSceneUI;\n","import React, { MutableRefObject, useCallback, useEffect, useRef } from 'react';\nimport { Game } from '../core';\nimport { GameRefFn } from './types';\nimport './Stats.css';\n\ntype StatsUIProps = {\n  outRef: MutableRefObject<GameRefFn | undefined>;\n};\n\nconst StatsUI: React.FC<StatsUIProps> = ({ outRef }) => {\n  const fpsRef = useRef<HTMLDivElement | null>(null);\n\n  const updateStats = useCallback(\n    (game: Game) => {\n      if (game.scene && fpsRef.current) {\n        const fps = Math.round(game.scene.getEngine().getFps());\n\n        // const text = game.board.tileList\n        //   .map((t) => Math.round(t.healthProportion() * 10) / 10)\n        //   .join(' ');\n\n        fpsRef.current.innerText = `FPS: ${fps}`;\n      }\n    },\n    [fpsRef]\n  );\n\n  useEffect(() => {\n    if (outRef) {\n      outRef.current = updateStats;\n    }\n  }, [outRef, updateStats]);\n\n  return (\n    <div className=\"stats\">\n      <div className=\"stats-fps\" ref={fpsRef} />\n    </div>\n  );\n};\n\nexport default StatsUI;\n","import React, { useEffect, useMemo, useRef } from 'react';\nimport { Game } from './core';\nimport { AlertUI, ControlPanelUI, GameSceneUI, StatsUI } from './ui';\nimport { GameRefFn } from './ui/types';\nimport './App.css';\n\nfunction App() {\n  const game = useMemo(() => new Game(), []);\n\n  const statsRef = useRef<GameRefFn | undefined>(undefined);\n  const p1Ref = useRef<GameRefFn | undefined>(undefined);\n  const p2Ref = useRef<GameRefFn | undefined>(undefined);\n  const alertRef = useRef<GameRefFn | undefined>(undefined);\n\n  useEffect(() => game.addGameStateListenerEffect(statsRef), [game, statsRef]);\n  useEffect(() => game.addGameStateListenerEffect(p1Ref), [game, p1Ref]);\n  useEffect(() => game.addGameStateListenerEffect(p2Ref), [game, p2Ref]);\n  useEffect(() => game.addGameStateListenerEffect(alertRef), [game, alertRef]);\n\n  const onGetGameOverMessage = (game: Game) =>\n    game.winner ? `${game.winner.name} wins!` : '';\n\n  return (\n    <div className=\"fullscreen\">\n      <StatsUI outRef={statsRef} />\n      <AlertUI onGetMessage={onGetGameOverMessage} outRef={alertRef} />\n      <GameSceneUI game={game} />\n      <ControlPanelUI position=\"left\" player={game.players[1]} outRef={p1Ref} />\n      <ControlPanelUI\n        position=\"right\"\n        player={game.players[2]}\n        outRef={p2Ref}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}