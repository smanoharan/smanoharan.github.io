{"version":3,"sources":["core/config.ts","ai/actions.ts","util/util.ts","core/unit.ts","ai/randomWalk.ts","core/tile.ts","core/player.ts","core/board.ts","core/gameScene.ts","core/game.ts","ui/Alert.tsx","ui/ControlPanel.tsx","ui/GameScene.tsx","ui/Stats.tsx","App.tsx","index.tsx"],"names":["minDurationState","tileSize","drawnTileSize","unitCost","unitMaxSpeed","resourcesRate","moveTowards","unit","target","targetDirection","subtract","position","normalize","curDirection","clone","Vector3","Dot","scaleToRef","config","velocity","subtractToRef","scaleInPlace","randomInt","max","Math","floor","random","randomWeightedElem","array","weight","length","weights","map","selected","sum","i","UnitState","UnitType","randomWalkAI","offensiveUnitAI","defensiveUnitAI","board","tilePref","curTile","posToTile","neighbours","nextNeighbour","console","warn","owner","homeTile","toPos","t","diff","abs","id","Unit","game","unitType","tile","mesh","ai","state","targetAngle","this","active","undefined","scene","gameScene","makeUnitMesh","offensive","elapsedMillis","source","amount","minY","scaleAndAddToRef","copyFrom","y","curAngle","rotation","won","angularVelocity","height","sin","next","dot","Forward","PI","acos","dead","lost","instancedBuffers","color","deadUnitColor","Tile","isHome","q","r","s","coords","error","makeTileMesh","units","players","unitsOnTile","filter","u","requiredCount","player","_elapsedMillis","conqueror","aliveUnits","setState","homeTileColor","tileColor","resourceCount","other","equals","x","sqrt3","a","b","z","qf","rf","sf","round","qDist","rDist","sDist","directions","UnitProductionStrategy","sqrt","Board","radius","acceptTile","tiles","tileList","R","push","generate","updateDrawn","updateState","dir","pos","roundCoords","countIf","predicate","UnitProductionStrategyDisplay","Player","name","hue","maxSaturation","unitColor","strategy","Random","_scene","find","OffensiveOnly","DefensiveOnly","defensive","randomElem","spawnUnit","nextUnitType","resCount","tileCount","unitCount","saturation","value","alpha","result","Color3","HSVtoRGBToRef","g","Color4","GameScene","shadows","ambientColor","camera","ArcRotateCamera","lowerBetaLimit","upperBetaLimit","lowerRadiusLimit","upperRadiusLimit","setTarget","Zero","canvas","getEngine","getRenderingCanvas","attachControl","lights","HemisphericLight","intensity","castShadow","addShadowCaster","tileMesh","generateTileMesh","onAddMesh","meshInst","createInstance","isVisible","index","unitMesh","generateUnitMesh","unitMeshPrototype","material","StandardMaterial","specularColor","MeshBuilder","CreateDisc","tessellation","sideOrientation","Mesh","DOUBLESIDE","receiveShadows","registerInstancedBuffer","isOff","meshName","options","diameter","enclose","CreateCylinder","Game","allUnits","winner","listeners","elapsedMillisState","gaia","player1","player2","reset","first","second","firstAdj","secondAdj","nextId","running","isAlive","finishGame","notifyListeners","listener","l","current","AlertUI","onGetMessage","outRef","alertRef","useRef","updateAlert","useCallback","innerText","useEffect","className","ref","ControlPanelBtn","text","onClick","disabled","ControlPanelStrategyBtn","forStrategy","curStrategy","setStrategy","ControlPanelUI","playerRef","useState","updatePlayerStatus","statusDisplayText","log","off","def","GameSceneUI","antialias","onSceneReady","onRender","getDeltaTime","update","StatsUI","fpsRef","updateStats","fps","getFps","App","useMemo","statsRef","p1Ref","p2Ref","addGameStateListenerEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85fb2673.chunk.js","sourcesContent":["const rateScale = 1;\n\nexport default {\n  minDurationState: 50 / rateScale, // update state every 50ms\n\n  tileSize: 2, // how large tiles are in reality\n  drawnTileSize: 0.98 * 2, // how large tiles are drawn -- leave space for a gap\n\n  unitCost: 10,\n\n  // all these are in per second\n  unitMaxSpeed: 2 * rateScale,\n  resourcesRate: rateScale,\n};\n","import { Vector3 } from '@babylonjs/core';\nimport { Unit } from '../core';\nimport { config } from '../core';\n\nexport function* moveTowards(unit: Unit, target: Vector3) {\n  const targetDirection = target.subtract(unit.position).normalize();\n  let curDirection = targetDirection.clone();\n\n  while (Vector3.Dot(targetDirection, curDirection) > 0) {\n    targetDirection.normalize().scaleToRef(config.unitMaxSpeed, unit.velocity);\n\n    yield; // wait for next update\n\n    target.subtractToRef(unit.position, curDirection);\n  }\n\n  unit.velocity.scaleInPlace(0);\n}\n\nexport function* wait(timeMillis: number) {\n  let elapsedMillis = 0;\n  while (elapsedMillis < timeMillis) {\n    elapsedMillis += yield;\n  }\n}\n","export type WeightFn<T> = (t: T) => number;\n\nexport function randomInt(max: number): number {\n  return Math.floor(Math.random() * max);\n}\n\nexport function randomElem<T>(array: T[]): T | undefined {\n  if (array.length > 0) {\n    return array[randomInt(array.length)];\n  }\n  return undefined;\n}\n\nfunction sum(array: number[]): number {\n  // simpler to under than reduce\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\nexport function randomWeightedElem<T>(\n  array: T[],\n  weight: WeightFn<T>\n): T | undefined {\n  if (array.length === 0) return undefined;\n\n  const weights = array.map(weight);\n  let selected = randomInt(sum(weights));\n  for (let i = 0; i < weights.length; i++) {\n    selected -= weights[i];\n    if (selected < 0) return array[i];\n  }\n\n  return array[array.length - 1];\n}\n","import { InstancedMesh, Scene, Vector3 } from '@babylonjs/core';\nimport { defensiveUnitAI, offensiveUnitAI } from '../ai/randomWalk';\nimport { Player } from './player';\nimport { Tile } from './tile';\nimport { Game } from './game';\n\nexport enum UnitState {\n  active,\n  dead,\n  won,\n  lost,\n}\n\n// TODO SM expand to a proper class hierarchy?\nexport enum UnitType {\n  offensive,\n  defensive,\n}\n\nexport class Unit {\n  public mesh: InstancedMesh;\n  private ai: Generator | undefined;\n  private state: UnitState;\n  public velocity: Vector3;\n  private targetAngle: number;\n\n  constructor(\n    private readonly game: Game,\n    public readonly id: number,\n    public readonly owner: Player,\n    public readonly unitType: UnitType,\n    public tile: Tile,\n    public position: Vector3\n  ) {\n    this.state = UnitState.active;\n    this.velocity = new Vector3();\n    this.targetAngle = 0;\n\n    // init'd on generate\n    this.mesh = undefined!;\n    this.ai = undefined!;\n  }\n\n  public generate(scene: Scene) {\n    this.mesh = this.game.gameScene.makeUnitMesh(this, scene);\n    this.ai =\n      this.unitType === UnitType.offensive\n        ? offensiveUnitAI(this, this.game.board)\n        : defensiveUnitAI(this, this.game.board);\n  }\n\n  public updateDrawn(elapsedMillis: number) {\n    const minY = 0.05 + this.owner.id * 0.01; // TODO SM just a hack to avoid z-buffer issues\n\n    switch (this.state) {\n      case UnitState.active:\n        this.velocity.scaleAndAddToRef(elapsedMillis / 1000, this.position);\n        this.mesh.position.copyFrom(this.position); // TODO SM interpolate instead of immediate movement\n        this.mesh.position.y = minY;\n\n        const curAngle = this.mesh.rotation.y;\n        this.mesh.rotation.y = lerp(curAngle, this.targetAngle, 0.1);\n        break;\n\n      case UnitState.won:\n        // spin around on the spot randomly\n        const angularVelocity = (this.id % 4) * 2 - 3;\n        this.mesh.rotation.y += (angularVelocity * elapsedMillis) / 1000;\n\n        // bobble up & down randomly\n        const amplitude = ((this.id % 3) + 1) * 0.2;\n        const height = amplitude * (0.8 + Math.sin(this.mesh.rotation.y));\n        this.mesh.position.y = minY + Math.max(0, height);\n        break;\n    }\n  }\n\n  public updateState(elapsedMillis: number) {\n    if (this.state !== UnitState.active) return;\n\n    this.ai!.next(elapsedMillis);\n    this.tile = this.game.board.posToTile(this.position) || this.owner.homeTile;\n\n    const speed = this.velocity.length();\n    if (speed > 0.1) {\n      const dot = Vector3.Dot(Vector3.Forward(), this.velocity);\n      this.targetAngle = Math.PI / 6 + Math.acos(dot / this.velocity.length());\n    }\n  }\n\n  public isAlive(): boolean {\n    return this.state === UnitState.active || this.state === UnitState.won;\n  }\n\n  public setState(state: UnitState) {\n    if (this.state === state) return;\n\n    switch (state) {\n      case UnitState.won:\n        this.velocity.scaleInPlace(0);\n        break;\n\n      case UnitState.dead:\n      case UnitState.lost:\n        this.mesh.instancedBuffers.color = this.owner.deadUnitColor;\n        this.ai = undefined;\n        this.velocity.scaleInPlace(0);\n        this.mesh.position.y = 0.05 + this.owner.id * 0.001; // TODO SM just a hack to avoid z-buffer issues\n        break;\n    }\n    this.state = state;\n  }\n}\n\nfunction lerp(source: number, target: number, amount: number): number {\n  return source * amount + target * (1 - amount);\n}\n","import { Unit, Board, Tile } from '../core';\nimport { moveTowards } from './actions';\nimport { randomWeightedElem, WeightFn } from '../util/util';\n\nexport function* randomWalkAI(\n  unit: Unit,\n  board: Board,\n  tilePref: WeightFn<Tile>\n) {\n  while (true) {\n    const curTile = board.posToTile(unit.position);\n    const neighbours = curTile && board.neighbours(curTile);\n    const nextNeighbour =\n      neighbours && randomWeightedElem(neighbours, tilePref);\n    if (!nextNeighbour) {\n      console.warn('ran out of neighbours', neighbours?.length || 0);\n    }\n    const target = nextNeighbour || unit.owner.homeTile;\n    yield* moveTowards(unit, target.toPos());\n    // yield* wait(50); // TODO SM Wait for rotation\n  }\n}\n\nexport function* offensiveUnitAI(unit: Unit, board: Board) {\n  yield* randomWalkAI(unit, board, (t) => {\n    const diff = Math.abs(unit.owner.id - t.owner.id) + 1;\n    return diff * diff * diff;\n  });\n}\n\nexport function* defensiveUnitAI(unit: Unit, board: Board) {\n  yield* randomWalkAI(unit, board, (t) => {\n    const diff = 2 - Math.abs(unit.owner.id - t.owner.id) + 1;\n    return diff * diff * diff;\n  });\n}\n","import { InstancedMesh, Scene, Vector3 } from '@babylonjs/core';\nimport config from './config';\nimport { Player } from './player';\nimport { Unit, UnitState } from './unit';\nimport { Game } from './game';\n\nexport class Tile {\n  // using q, r, s cubic coords\n  public readonly coords: Vector3;\n  public mesh: InstancedMesh;\n\n  public constructor(\n    private readonly game: Game,\n    public owner: Player,\n    public readonly isHome: boolean,\n    q: number,\n    r: number,\n    s: number | undefined = undefined\n  ) {\n    if (s === undefined) {\n      s = -(q + r);\n    } else if (q + r + s !== 0) {\n      console.error('Attempting to create an invalid Tile', { q, r, s });\n    }\n\n    this.coords = new Vector3(q, r, s);\n    this.mesh = undefined!; // init'd on generate\n  }\n\n  public generate(scene: Scene) {\n    this.mesh = this.game.gameScene.makeTileMesh(this, scene);\n  }\n\n  private conqueror(units: Unit[], players: Player[]): Player | undefined {\n    const unitsOnTile = units.filter((u) => u.tile === this);\n    if (unitsOnTile.length > 0) {\n      const requiredCount = Math.max(2, (unitsOnTile.length * 2) / 3);\n      for (let i = 0; i < players.length; i++) {\n        const player = players[i];\n        const playerUnits = unitsOnTile.filter((u) => u.owner === player);\n        if (playerUnits.length >= requiredCount) {\n          return player;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  public updateDrawn(_elapsedMillis: number) {\n    // nothing needs to be updated per frame\n  }\n\n  public updateState(elapsedMillis: number) {\n    const conqueror = this.conqueror(this.game.aliveUnits, this.game.players);\n    if (conqueror) {\n      this.owner = conqueror;\n      for (let i = 0; i < this.game.aliveUnits.length; i++) {\n        const unit = this.game.aliveUnits[i];\n        if (unit.tile === this && unit.owner !== conqueror) {\n          unit.setState(UnitState.dead);\n        }\n      }\n    }\n\n    this.mesh.instancedBuffers.color = this.isHome\n      ? this.owner.homeTileColor\n      : this.owner.tileColor;\n\n    this.owner.resourceCount += (elapsedMillis * config.resourcesRate) / 1000;\n  }\n\n  public equals(other: Tile): boolean {\n    return this.coords.equals(other.coords);\n  }\n\n  public static distBetween(a: Tile, b: Tile): number {\n    const { x, y, z } = a.coords.subtract(b.coords);\n    return 0.5 * (Math.abs(x) + Math.abs(y) + Math.abs(z));\n  }\n\n  // increment in CCW order, starting with straight up (north).\n  public static directions = [\n    new Vector3(+0, +1, -1), // north\n    new Vector3(+1, +0, -1), // north east\n    new Vector3(+1, -1, +0), // south east\n    new Vector3(+0, -1, +1), // south\n    new Vector3(-1, +0, +1), // south west\n    new Vector3(-1, +1, +0), // north west\n  ];\n\n  public static roundCoords(qf: number, rf: number): { q: number; r: number } {\n    const sf = -qf - rf;\n    const q = Math.round(qf);\n    const r = Math.round(rf);\n    const s = Math.round(sf);\n\n    const qDist = Math.abs(qf - q);\n    const rDist = Math.abs(rf - r);\n    const sDist = Math.abs(sf - s);\n\n    if (qDist > Math.max(rDist, sDist)) {\n      return { q: -r - s, r };\n    }\n    if (rDist > sDist) {\n      return { q, r: -q - s };\n    }\n    return { q, r };\n  }\n\n  public toPos(): Vector3 {\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\n    const { x, y } = this.coords;\n    return new Vector3(\n      1.5 * x * config.tileSize,\n      0,\n      sqrt3 * (0.5 * x + y) * config.tileSize\n    );\n  }\n}\nconst sqrt3 = Math.sqrt(3);\n","import { Color3, Color4, Scene } from '@babylonjs/core';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Game } from './game';\nimport { randomElem } from '../util/util';\nimport { UnitType } from './unit';\n\nfunction countIf<T>(array: T[], predicate: (t: T) => boolean) {\n  return array.filter(predicate).length;\n}\n\nexport enum UnitProductionStrategy {\n  OffensiveOnly,\n  DefensiveOnly,\n  Random,\n}\nexport const UnitProductionStrategyDisplay = [\n  'Offensive',\n  'Defensive',\n  'Random',\n];\n\nexport class Player {\n  public readonly tileColor: Color4;\n  public readonly homeTileColor: Color4;\n  public readonly unitColor: Color4;\n  public readonly deadUnitColor: Color4;\n\n  public homeTile: Tile;\n  public resourceCount: number;\n  public strategy: UnitProductionStrategy;\n\n  constructor(\n    private readonly game: Game,\n    public readonly id: number,\n    public readonly name: string,\n    hue: number,\n    maxSaturation: number\n  ) {\n    this.tileColor = Player.color(hue, 0.4 * maxSaturation, 0.8);\n    this.homeTileColor = Player.color(hue, 0.8 * maxSaturation, 0.6);\n    this.unitColor = Player.color(hue, 0.9 * maxSaturation, 0.95);\n    this.deadUnitColor = Player.color(hue, 0.4 * maxSaturation, 0.3, 0.3);\n\n    this.resourceCount = 0;\n    this.homeTile = undefined!; // init'd on generate\n    this.strategy = UnitProductionStrategy.Random;\n  }\n\n  public generate(_scene: Scene) {\n    this.homeTile = this.game.board.tileList.find(\n      (t) => t.owner === this && t.isHome\n    )!;\n  }\n\n  private nextUnitType(): UnitType {\n    switch (this.strategy) {\n      case UnitProductionStrategy.OffensiveOnly:\n        return UnitType.offensive;\n      case UnitProductionStrategy.DefensiveOnly:\n        return UnitType.defensive;\n    }\n    // random\n    return randomElem([UnitType.offensive, UnitType.defensive])!;\n  }\n\n  public updateState(_elapsedMillis: number) {\n    // automatically spawn unit when there are enough resources\n    while (this.resourceCount > config.unitCost) {\n      this.resourceCount -= config.unitCost;\n      this.game.spawnUnit(this, this.nextUnitType(), this.homeTile);\n    }\n  }\n\n  public isAlive(): boolean {\n    return this.homeTile.owner === this;\n  }\n\n  public statusDisplayText(game: Game): string {\n    const resCount = Math.floor(this.resourceCount);\n    const tileCount = countIf(game.board.tileList, (u) => u.owner === this);\n    const unitCount = countIf(game.aliveUnits, (u) => u.owner === this);\n    return `${this.name}: $${resCount}, ${tileCount} tile(s), ${unitCount} unit(s)`;\n  }\n\n  private static color(\n    hue: number,\n    saturation: number,\n    value: number,\n    alpha: number = 1\n  ): Color4 {\n    const result = new Color3();\n    Color3.HSVtoRGBToRef(hue, saturation, value, result);\n\n    const { r, g, b } = result;\n    return new Color4(r, g, b, alpha);\n  }\n}\n","import { Scene, Vector3 } from '@babylonjs/core';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Game } from './game';\n\ntype TileFilter = (q: number, r: number, s: number) => boolean;\n\nexport class Board {\n  private readonly tiles: Tile[][]; // indexed by q,r\n  public readonly tileList: Tile[]; // just a list\n\n  constructor(\n    private readonly game: Game,\n    private readonly radius: number, // integer, number of tiles from center\n    acceptTile: TileFilter\n  ) {\n    this.tiles = [];\n    this.tileList = [];\n\n    const R = radius;\n    for (let q = -R; q <= R; q++) {\n      this.tiles[q + R] = [];\n\n      for (let r = -R; r <= R; r++) {\n        const s = -(q + r);\n\n        if (-R <= s && s <= R && acceptTile(q, r, s)) {\n          const isHome = q === 0 && Math.abs(r) === R;\n          const owner = game.players[isHome ? (r === R ? 1 : 2) : 0];\n          const tile = new Tile(game, owner, isHome, q, r);\n          this.tiles[q + R][r + R] = tile;\n          this.tileList.push(tile);\n        }\n      }\n    }\n  }\n\n  public generate(scene: Scene) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      const tile = this.tileList[i];\n      tile.generate(scene);\n    }\n  }\n\n  public updateDrawn(elapsedMillis: number) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      this.tileList[i].updateDrawn(elapsedMillis);\n    }\n  }\n\n  public updateState(elapsedMillis: number) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      this.tileList[i].updateState(elapsedMillis);\n    }\n  }\n\n  public tile(q: number, r: number): Tile | undefined {\n    const R = this.radius;\n    if (-R <= q && q <= R && -R <= r && r <= R) {\n      return this.tiles[q + R][r + R];\n    }\n    return undefined;\n  }\n\n  public neighbours(tile: Tile): Tile[] {\n    const { x, y } = tile.coords;\n    return Tile.directions\n      .map((dir) => this.tile(x + dir.x, y + dir.y))\n      .filter((t) => !!t) as Tile[];\n  }\n\n  public posToTile(pos: Vector3): Tile | undefined {\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\n    const x = pos.x / config.tileSize;\n    const z = pos.z / config.tileSize;\n    const { q, r } = Tile.roundCoords((2.0 / 3.0) * x, (sqrt3 * z - x) / 3.0);\n    return this.tile(q, r);\n  }\n}\nconst sqrt3 = Math.sqrt(3);\n","import {\n  AbstractMesh,\n  ArcRotateCamera,\n  Color3,\n  Color4,\n  HemisphericLight,\n  Mesh,\n  MeshBuilder,\n  Scene,\n  ShadowGenerator,\n  StandardMaterial,\n  Vector3,\n} from '@babylonjs/core';\nimport { Game } from './game';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Unit, UnitType } from './unit';\n\nexport class GameScene {\n  private scene: Scene;\n\n  private shadows: ShadowGenerator[];\n\n  constructor(private readonly game: Game) {\n    this.scene = undefined!; // init'd on generate\n    this.shadows = [];\n  }\n\n  public generate(scene: Scene) {\n    this.scene = scene;\n\n    scene.ambientColor = new Color3(1, 1, 1);\n\n    const camera = new ArcRotateCamera(\n      'camera1',\n      0,\n      0,\n      10,\n      new Vector3(0, 6, 16),\n      scene\n    );\n    camera.lowerBetaLimit = 0.1;\n    camera.upperBetaLimit = (Math.PI / 2) * 0.8;\n    camera.lowerRadiusLimit = 10;\n    camera.upperRadiusLimit = 100;\n    camera.setTarget(Vector3.Zero());\n\n    const canvas = scene.getEngine().getRenderingCanvas()!;\n    camera.attachControl(canvas, true);\n\n    const lights = [\n      new HemisphericLight('light', new Vector3(0, 1, -2), scene),\n      new HemisphericLight('light', new Vector3(1, 1, 1), scene),\n      new HemisphericLight('light', new Vector3(-1, 1, 1), scene),\n    ];\n    for (let i = 0; i < lights.length; i++) {\n      lights[i].intensity = 0.4;\n    }\n\n    // TODO SM Shadows look poor, needs improvement\n    // this.shadows = lights.map((l) => new ShadowGenerator(1024, l));\n    // for (let i = 0; i < this.shadows.length; i++) {\n    //   this.shadows[i].usePoissonSampling = true; // TODO SM expensive\n    // }\n  }\n\n  private onAddMesh(mesh: AbstractMesh, castShadow: boolean) {\n    if (castShadow) {\n      for (let i = 0; i < this.shadows.length; i++) {\n        this.shadows[i].addShadowCaster(mesh);\n      }\n    }\n  }\n\n  private static tileMesh: Mesh | undefined;\n  private static generateTileMesh(scene: Scene, radius: number): Mesh {\n    const material = new StandardMaterial(`tileMeshMaterial`, scene);\n    material.specularColor = new Color3(0.5, 0.6, 0.87);\n\n    const mesh = MeshBuilder.CreateDisc(\n      `tileMesh`,\n      { radius, tessellation: 6, sideOrientation: Mesh.DOUBLESIDE },\n      scene\n    );\n    mesh.receiveShadows = true;\n\n    mesh.rotation.x = Math.PI * 0.5; // rotate from XY plane to XZ\n    mesh.material = material;\n    mesh.isVisible = false; // hide prototype, only the instanced copies should be visible\n\n    mesh.registerInstancedBuffer('color', 4);\n    mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\n\n    return mesh;\n  }\n\n  public makeTileMesh(tile: Tile, scene: Scene) {\n    if (!GameScene.tileMesh) {\n      GameScene.tileMesh = GameScene.generateTileMesh(\n        scene,\n        config.drawnTileSize\n      );\n      this.onAddMesh(GameScene.tileMesh, true);\n    }\n\n    const { x, y, z } = tile.coords;\n    const meshInst = GameScene.tileMesh.createInstance(\n      `tileMesh/${x}/${y}/${z}`\n    );\n    meshInst.position.copyFrom(tile.toPos());\n    meshInst.isVisible = true;\n    this.onAddMesh(meshInst, true);\n    return meshInst;\n  }\n\n  private static readonly unitMesh: Mesh[] = [];\n  private static generateUnitMesh(\n    scene: Scene,\n    unit: Unit,\n    radius: number,\n    height: number\n  ): Mesh {\n    const material = new StandardMaterial(`unitMeshMaterial`, scene);\n    material.specularColor = new Color3(0.8, 0.8, 0.9);\n\n    const isOff = unit.unitType === UnitType.offensive;\n    const meshName = isOff ? 'offUnitMesh' : 'defUnitMesh';\n    const tessellation = isOff ? 3 : 5;\n    const diameter = isOff ? 2 * radius : 1.7 * radius; // make them look roughly the same weight, by eye\n    const options = { diameter, height, tessellation, enclose: true };\n    const mesh = MeshBuilder.CreateCylinder(meshName, options, scene);\n\n    mesh.material = material;\n    mesh.isVisible = false; // hide prototype, only instanced meshes are shown\n\n    mesh.registerInstancedBuffer('color', 4);\n    mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\n\n    return mesh;\n  }\n\n  private unitMeshPrototype(unit: Unit) {\n    const index = +unit.unitType;\n    if (!GameScene.unitMesh[index]) {\n      GameScene.unitMesh[index] = GameScene.generateUnitMesh(\n        this.scene,\n        unit,\n        0.4,\n        0.1\n      );\n      this.onAddMesh(GameScene.unitMesh[index], true);\n    }\n\n    return GameScene.unitMesh[index];\n  }\n\n  public makeUnitMesh(unit: Unit, scene: Scene) {\n    const meshPrototype = this.unitMeshPrototype(unit);\n    const meshInst = meshPrototype.createInstance(`unitMesh/${unit.id}`);\n    meshInst.isVisible = true;\n    meshInst.instancedBuffers.color = unit.owner.unitColor;\n    meshInst.position.copyFrom(unit.position);\n\n    this.onAddMesh(meshInst, true);\n    return meshInst;\n  }\n}\n","import { MutableRefObject } from 'react';\nimport { Scene } from '@babylonjs/core';\nimport config from './config';\nimport { Player } from './player';\nimport { Board } from './board';\nimport { Unit, UnitState, UnitType } from './unit';\nimport { Tile } from './tile';\nimport { GameScene } from './gameScene';\n\nexport type GameStateFn = (game: Game) => void;\ntype GameStateListener = MutableRefObject<GameStateFn | undefined>;\n\nexport class Game {\n  public readonly players: Player[];\n  public readonly board: Board;\n  public readonly allUnits: Unit[];\n  public aliveUnits: Unit[];\n  public scene: Scene | undefined;\n  public winner: Player | undefined;\n  public gameScene: GameScene;\n\n  private listeners: GameStateListener[];\n  private elapsedMillisState: number = 0;\n\n  constructor() {\n    const gaia = new Player(this, 0, 'Gaia', 180, 0.01);\n    const player1 = new Player(this, 1, 'Green', 120, 1);\n    const player2 = new Player(this, 2, 'Red', 0, 1);\n    this.players = [gaia, player1, player2];\n\n    this.board = new Board(this, 2, () => true);\n    this.allUnits = [];\n    this.aliveUnits = [];\n    this.gameScene = new GameScene(this);\n    this.scene = undefined;\n    this.winner = undefined;\n    this.listeners = [];\n  }\n\n  public generate(scene: Scene) {\n    this.gameScene.generate(scene);\n\n    this.board.generate(scene);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].generate(scene);\n    }\n\n    for (let i = 0; i < this.players.length; i++) {\n      const player = this.players[i];\n      player.generate(scene);\n    }\n\n    this.scene = scene;\n    this.reset();\n  }\n\n  public reset() {\n    const [, first, second] = this.players;\n    const firstAdj = this.board.neighbours(first.homeTile);\n    const secondAdj = this.board.neighbours(second.homeTile);\n\n    this.spawnUnit(first, UnitType.defensive, first.homeTile);\n    this.spawnUnit(second, UnitType.defensive, second.homeTile);\n    this.spawnUnit(first, UnitType.offensive, firstAdj[1]);\n    this.spawnUnit(second, UnitType.offensive, secondAdj[0]);\n  }\n\n  public spawnUnit(owner: Player, unitType: UnitType, tile: Tile) {\n    const nextId = this.allUnits.length;\n    const unit = new Unit(this, nextId, owner, unitType, tile, tile.toPos());\n    this.scene && unit.generate(this.scene);\n    this.allUnits.push(unit);\n    this.aliveUnits.push(unit);\n  }\n\n  public update(elapsedMillis: number) {\n    this.updateDrawn(elapsedMillis);\n\n    this.elapsedMillisState += elapsedMillis;\n    if (this.running() && this.elapsedMillisState >= config.minDurationState) {\n      this.updateState(this.elapsedMillisState);\n      this.elapsedMillisState = 0;\n    }\n  }\n\n  private updateDrawn(elapsedMillis: number) {\n    if (!this.scene) return;\n\n    this.board.updateDrawn(elapsedMillis);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].updateDrawn(elapsedMillis);\n    }\n  }\n\n  private updateState(elapsedMillis: number) {\n    this.board.updateState(elapsedMillis);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].updateState(elapsedMillis);\n    }\n\n    this.aliveUnits = this.allUnits.filter((u) => u.isAlive());\n\n    for (let i = 1; i <= 2; i++) {\n      const player = this.players[i];\n      player.updateState(elapsedMillis);\n      if (!player.isAlive()) {\n        const winner = this.players[3 - i];\n        this.finishGame(winner);\n      }\n    }\n\n    this.notifyListeners();\n  }\n\n  public addGameStateListenerEffect(listener: GameStateListener) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener);\n    };\n  }\n\n  private notifyListeners() {\n    for (let i = 0; i < this.listeners.length; i++) {\n      const listener = this.listeners[i];\n      listener.current && listener.current(this);\n    }\n  }\n\n  public running(): boolean {\n    return this.winner === undefined;\n  }\n\n  private finishGame(winner: Player) {\n    this.winner = winner;\n\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      const unit = this.aliveUnits[i];\n      unit.setState(unit.owner === winner ? UnitState.won : UnitState.lost);\n    }\n  }\n}\n","import React, { MutableRefObject, useCallback, useEffect, useRef } from 'react';\nimport { Game } from '../core';\nimport { GameRefFn } from './types';\nimport './Alert.css';\n\ntype AlertUIProps = {\n  onGetMessage: (game: Game) => string;\n  outRef: MutableRefObject<GameRefFn | undefined>;\n};\n\nconst AlertUI: React.FC<AlertUIProps> = ({ onGetMessage, outRef }) => {\n  const alertRef = useRef<HTMLDivElement | null>(null);\n\n  const updateAlert = useCallback(\n    (game: Game) => {\n      if (alertRef.current) {\n        alertRef.current.innerText = onGetMessage(game);\n      }\n    },\n    [alertRef, onGetMessage]\n  );\n\n  useEffect(() => {\n    outRef.current = updateAlert;\n  }, [outRef, updateAlert]);\n\n  return <div className=\"alert\" ref={alertRef} />;\n};\n\nexport default AlertUI;\n","import React, {\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport './ControlPanel.css';\nimport { Game, Player } from '../core';\nimport { GameRefFn } from './types';\nimport {\n  UnitProductionStrategy,\n  UnitProductionStrategyDisplay,\n} from '../core/player';\n\ntype ControlPanelBtnProps = {\n  text: string;\n  active: boolean;\n  onClick: () => void;\n};\nconst ControlPanelBtn: React.FC<ControlPanelBtnProps> = ({\n  text,\n  active,\n  onClick,\n}) => (\n  <button className=\"control-panel-btn\" onClick={onClick} disabled={active}>\n    {text}\n  </button>\n);\n\ntype ControlPanelStrategyBtnProps = {\n  forStrategy: UnitProductionStrategy;\n  curStrategy: UnitProductionStrategy;\n  setStrategy: (strategy: UnitProductionStrategy) => void;\n};\nconst ControlPanelStrategyBtn: React.FC<ControlPanelStrategyBtnProps> = ({\n  forStrategy,\n  curStrategy,\n  setStrategy,\n}) => (\n  <ControlPanelBtn\n    text={UnitProductionStrategyDisplay[forStrategy]}\n    active={curStrategy === forStrategy}\n    onClick={() => setStrategy(forStrategy)}\n  />\n);\n\ntype ControlPanelProps = {\n  player: Player;\n  position: 'left' | 'right';\n  outRef: MutableRefObject<GameRefFn | undefined>;\n};\n\nconst ControlPanelUI: React.FC<ControlPanelProps> = ({\n  player,\n  position,\n  outRef,\n}) => {\n  const playerRef = useRef<HTMLDivElement | null>(null);\n  const [strategy, setStrategy] = useState<UnitProductionStrategy>(\n    player.strategy\n  );\n\n  const updatePlayerStatus = useCallback(\n    (game: Game) => {\n      if (playerRef.current) {\n        playerRef.current.innerText = player.statusDisplayText(game);\n      }\n    },\n    [playerRef, player]\n  );\n\n  useEffect(() => {\n    if (outRef) {\n      outRef.current = updatePlayerStatus;\n    }\n  }, [outRef, updatePlayerStatus]);\n\n  useEffect(() => {\n    console.log('changing', player.name, strategy);\n    player.strategy = strategy;\n  }, [player, strategy]);\n\n  const off = UnitProductionStrategy.OffensiveOnly;\n  const def = UnitProductionStrategy.DefensiveOnly;\n  const random = UnitProductionStrategy.Random;\n\n  const className = `control-panel control-panel-${position}`;\n  return (\n    <div className={className}>\n      <div className=\"stats-p1\" ref={playerRef} />\n      <ControlPanelStrategyBtn\n        forStrategy={off}\n        curStrategy={strategy}\n        setStrategy={setStrategy}\n      />\n      <ControlPanelStrategyBtn\n        forStrategy={def}\n        curStrategy={strategy}\n        setStrategy={setStrategy}\n      />\n      <ControlPanelStrategyBtn\n        forStrategy={random}\n        curStrategy={strategy}\n        setStrategy={setStrategy}\n      />\n    </div>\n  );\n};\n\nexport default ControlPanelUI;\n","import React from 'react';\nimport SceneComponent from 'babylonjs-hook';\nimport { Game } from '../core';\nimport './GameScene.css';\nimport { Scene } from '@babylonjs/core';\n\ntype GameSceneProps = {\n  game: Game;\n};\n\nconst GameSceneUI: React.FC<GameSceneProps> = ({ game }) => {\n  const onRender = (scene: Scene) => {\n    const elapsedMillis = scene.getEngine().getDeltaTime();\n    game.update(elapsedMillis);\n  };\n\n  return (\n    <SceneComponent\n      antialias\n      onSceneReady={(scene) => game.generate(scene)}\n      onRender={onRender}\n      id=\"game-canvas\"\n    />\n  );\n};\n\nexport default GameSceneUI;\n","import React, { MutableRefObject, useCallback, useEffect, useRef } from 'react';\nimport { Game } from '../core';\nimport { GameRefFn } from './types';\nimport './Stats.css';\n\ntype StatsUIProps = {\n  outRef: MutableRefObject<GameRefFn | undefined>;\n};\n\nconst StatsUI: React.FC<StatsUIProps> = ({ outRef }) => {\n  const fpsRef = useRef<HTMLDivElement | null>(null);\n\n  const updateStats = useCallback(\n    (game: Game) => {\n      if (game.scene && fpsRef.current) {\n        const fps = Math.round(game.scene.getEngine().getFps());\n        fpsRef.current.innerText = `FPS: ${fps}`;\n      }\n    },\n    [fpsRef]\n  );\n\n  useEffect(() => {\n    if (outRef) {\n      outRef.current = updateStats;\n    }\n  }, [outRef, updateStats]);\n\n  return (\n    <div className=\"stats\">\n      <div className=\"stats-fps\" ref={fpsRef} />\n    </div>\n  );\n};\n\nexport default StatsUI;\n","import React, { useEffect, useMemo, useRef } from 'react';\nimport { Game } from './core';\nimport { AlertUI, ControlPanelUI, GameSceneUI, StatsUI } from './ui';\nimport { GameRefFn } from './ui/types';\nimport './App.css';\n\nfunction App() {\n  const game = useMemo(() => new Game(), []);\n\n  const statsRef = useRef<GameRefFn | undefined>(undefined);\n  const p1Ref = useRef<GameRefFn | undefined>(undefined);\n  const p2Ref = useRef<GameRefFn | undefined>(undefined);\n  const alertRef = useRef<GameRefFn | undefined>(undefined);\n\n  useEffect(() => game.addGameStateListenerEffect(statsRef), [game, statsRef]);\n  useEffect(() => game.addGameStateListenerEffect(p1Ref), [game, p1Ref]);\n  useEffect(() => game.addGameStateListenerEffect(p2Ref), [game, p2Ref]);\n  useEffect(() => game.addGameStateListenerEffect(alertRef), [game, alertRef]);\n\n  const onGetGameOverMessage = (game: Game) =>\n    game.winner ? `${game.winner.name} wins!` : '';\n\n  return (\n    <div className=\"fullscreen\">\n      <StatsUI outRef={statsRef} />\n      <AlertUI onGetMessage={onGetGameOverMessage} outRef={alertRef} />\n      <GameSceneUI game={game} />\n      <ControlPanelUI position=\"left\" player={game.players[1]} outRef={p1Ref} />\n      <ControlPanelUI\n        position=\"right\"\n        player={game.players[2]}\n        outRef={p2Ref}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}