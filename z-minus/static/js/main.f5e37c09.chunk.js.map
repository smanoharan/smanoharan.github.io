{"version":3,"sources":["core/config.ts","ai/actions.ts","core/unit.ts","ai/randomWalk.ts","core/tile.ts","core/board.ts","core/player.ts","core/game.ts","ui/Stats.tsx","ui/Alert.tsx","App.tsx","index.tsx"],"names":["minDurationState","tileSize","drawnTileSize","unitCost","unitMaxSpeed","resourcesRate","moveTowards","unit","target","targetDirection","subtract","position","normalize","curDirection","clone","Vector3","Dot","scaleToRef","config","velocity","subtractToRef","scaleInPlace","UnitState","randomWalkAI","randomElem","array","length","max","Math","floor","random","board","curTile","posToTile","neighbours","nextNeighbour","console","warn","owner","homeTile","toPos","Unit","game","id","tile","mesh","ai","state","targetAngle","this","active","undefined","scene","generateMesh","meshInst","createInstance","isVisible","instancedBuffers","color","unitColor","copyFrom","elapsedMillis","source","amount","minY","scaleAndAddToRef","y","curAngle","rotation","won","angularVelocity","height","sin","next","dot","Forward","PI","acos","dead","lost","deadUnitColor","diameter","material","StandardMaterial","specularColor","Color3","MeshBuilder","CreateCylinder","tessellation","enclose","registerInstancedBuffer","Color4","Tile","isHome","q","r","s","coords","error","x","z","units","players","unitsOnTile","filter","u","requiredCount","i","player","_elapsedMillis","conqueror","aliveUnits","setState","homeTileColor","tileColor","resourceCount","other","equals","sqrt3","a","b","abs","qf","rf","sf","round","qDist","rDist","sDist","radius","CreateDisc","sideOrientation","Mesh","DOUBLESIDE","directions","sqrt","Board","acceptTile","tiles","tileList","R","push","generate","updateDrawn","updateState","map","dir","t","pos","roundCoords","countIf","predicate","Player","name","hue","maxSaturation","_scene","find","spawnUnit","resCount","tileCount","unitCount","saturation","value","alpha","result","HSVtoRGBToRef","g","Game","allUnits","winner","listeners","elapsedMillisState","gaia","player1","player2","nextId","running","isAlive","finishGame","notifyListeners","listener","l","current","StatsUI","outRef","fpsRef","useRef","p1Ref","p2Ref","updateStats","useCallback","fps","getEngine","getFps","innerText","p1","p2","statusDisplayText","useEffect","className","ref","AlertUI","onGetMessage","alertRef","updateAlert","onSceneReady","ambientColor","camera","ArcRotateCamera","setTarget","Zero","canvas","getRenderingCanvas","attachControl","lights","HemisphericLight","intensity","App","statsRef","addListenerEffect","antialias","onRender","getDeltaTime","update","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5e37c09.chunk.js","sourcesContent":["const rateScale = 2;\n\nexport default {\n  minDurationState: 50 / rateScale, // update state every 50ms\n\n  tileSize: 2, // how large tiles are in reality\n  drawnTileSize: 0.98 * 2, // how large tiles are drawn -- leave space for a gap\n\n  unitCost: 10,\n\n  // all these are in per second\n  unitMaxSpeed: 2 * rateScale,\n  resourcesRate: rateScale,\n};\n","import { Vector3 } from '@babylonjs/core';\nimport { Unit } from '../core';\nimport { config } from '../core';\n\nexport function* moveTowards(unit: Unit, target: Vector3) {\n  const targetDirection = target.subtract(unit.position).normalize();\n  let curDirection = targetDirection.clone();\n\n  while (Vector3.Dot(targetDirection, curDirection) > 0) {\n    targetDirection.normalize().scaleToRef(config.unitMaxSpeed, unit.velocity);\n\n    yield; // wait for next update\n\n    target.subtractToRef(unit.position, curDirection);\n  }\n\n  unit.velocity.scaleInPlace(0);\n}\n\nexport function* wait(timeMillis: number) {\n  let elapsedMillis = 0;\n  while (elapsedMillis < timeMillis) {\n    elapsedMillis += yield;\n  }\n}\n","import {\n  Color3,\n  Color4,\n  InstancedMesh,\n  Mesh,\n  MeshBuilder,\n  Scene,\n  StandardMaterial,\n  Vector3,\n} from '@babylonjs/core';\nimport { randomWalkAI } from '../ai/randomWalk';\nimport { Player } from './player';\nimport { Tile } from './tile';\nimport { Game } from './game';\n\nexport enum UnitState {\n  active,\n  dead,\n  won,\n  lost,\n}\n\nexport class Unit {\n  private mesh: InstancedMesh;\n  private ai: Generator | undefined;\n  private state: UnitState;\n  public velocity: Vector3;\n  private targetAngle: number;\n\n  constructor(\n    private readonly game: Game,\n    public readonly id: number,\n    public readonly owner: Player,\n    public tile: Tile,\n    public position: Vector3\n  ) {\n    this.state = UnitState.active;\n    this.velocity = new Vector3();\n    this.targetAngle = 0;\n\n    // init'd on generate\n    this.mesh = undefined!;\n    this.ai = undefined!;\n  }\n\n  public generate(scene: Scene) {\n    if (!Unit.mesh) {\n      Unit.mesh = Unit.generateMesh(scene, 0.75, 0.1);\n    }\n\n    const meshInst = Unit.mesh.createInstance(`unitMesh/${this.id}`);\n    meshInst.isVisible = true;\n    meshInst.instancedBuffers.color = this.owner.unitColor;\n    meshInst.position.copyFrom(this.position);\n    this.mesh = meshInst;\n\n    this.ai = randomWalkAI(this, this.game.board);\n  }\n\n  public updateDrawn(elapsedMillis: number) {\n    const minY = 0.05 + this.owner.id * 0.01; // TODO SM just a hack to avoid z-buffer issues\n\n    switch (this.state) {\n      case UnitState.active:\n        this.velocity.scaleAndAddToRef(elapsedMillis / 1000, this.position);\n        this.mesh.position.copyFrom(this.position); // TODO SM interpolate instead of immediate movement\n        this.mesh.position.y = minY;\n\n        const curAngle = this.mesh.rotation.y;\n        this.mesh.rotation.y = lerp(curAngle, this.targetAngle, 0.1);\n        break;\n\n      case UnitState.won:\n        // spin around on the spot randomly\n        const angularVelocity = (this.id % 4) * 2 - 3;\n        this.mesh.rotation.y += (angularVelocity * elapsedMillis) / 1000;\n\n        // bobble up & down randomly\n        const amplitude = ((this.id % 3) + 1) * 0.2;\n        const height = amplitude * (0.8 + Math.sin(this.mesh.rotation.y));\n        this.mesh.position.y = minY + Math.max(0, height);\n        break;\n    }\n  }\n\n  public updateState(elapsedMillis: number) {\n    if (this.state !== UnitState.active) return;\n\n    this.ai!.next(elapsedMillis);\n    this.tile = this.game.board.posToTile(this.position) || this.owner.homeTile;\n\n    const speed = this.velocity.length();\n    if (speed > 0.1) {\n      const dot = Vector3.Dot(Vector3.Forward(), this.velocity);\n      this.targetAngle = Math.PI / 6 + Math.acos(dot / this.velocity.length());\n    }\n  }\n\n  public isAlive(): boolean {\n    return this.state === UnitState.active || this.state === UnitState.won;\n  }\n\n  public setState(state: UnitState) {\n    if (this.state === state) return;\n\n    switch (state) {\n      case UnitState.won:\n        this.velocity.scaleInPlace(0);\n        break;\n\n      case UnitState.dead:\n      case UnitState.lost:\n        this.mesh.instancedBuffers.color = this.owner.deadUnitColor;\n        this.ai = undefined;\n        this.velocity.scaleInPlace(0);\n        this.mesh.position.y = 0.05 + this.owner.id * 0.001; // TODO SM just a hack to avoid z-buffer issues\n        break;\n    }\n    this.state = state;\n  }\n\n  private static mesh: Mesh | undefined;\n  private static generateMesh(\n    scene: Scene,\n    diameter: number,\n    height: number\n  ): Mesh {\n    const material = new StandardMaterial(`unitMeshMaterial`, scene);\n    material.specularColor = new Color3(0.8, 0.8, 0.9);\n\n    const mesh = MeshBuilder.CreateCylinder(\n      `unitMesh`,\n      { diameter, height, tessellation: 3, enclose: true },\n      scene\n    );\n\n    mesh.material = material;\n    mesh.isVisible = false; // hide prototype, only instanced meshes are shown\n\n    mesh.registerInstancedBuffer('color', 4);\n    mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\n\n    return mesh;\n  }\n}\n\nfunction lerp(source: number, target: number, amount: number): number {\n  return source * amount + target * (1 - amount);\n}\n","import { Unit, Board } from '../core';\nimport { moveTowards } from './actions';\n\nfunction randomInt(max: number): number {\n  return Math.floor(Math.random() * max);\n}\n\nfunction randomElem<T>(array: T[]): T | undefined {\n  if (array.length > 0) {\n    return array[randomInt(array.length)];\n  }\n  return undefined;\n}\n\nexport function* randomWalkAI(unit: Unit, board: Board) {\n  while (true) {\n    const curTile = board.posToTile(unit.position);\n    const neighbours = curTile && board.neighbours(curTile);\n    const nextNeighbour = neighbours && randomElem(neighbours);\n    if (!nextNeighbour) {\n      console.warn('ran out of neighbours', neighbours?.length || 0);\n    }\n    const target = nextNeighbour || unit.owner.homeTile;\n    yield* moveTowards(unit, target.toPos());\n    // yield* wait(50); // TODO SM Wait for rotation\n  }\n}\n","import {\n  Color3,\n  Color4,\n  InstancedMesh,\n  Mesh,\n  MeshBuilder,\n  Scene,\n  StandardMaterial,\n  Vector3,\n} from '@babylonjs/core';\nimport config from './config';\nimport { Player } from './player';\nimport { Unit, UnitState } from './unit';\nimport { Game } from './game';\n\nexport class Tile {\n  // using q, r, s cubic coords\n  public readonly coords: Vector3;\n  public mesh: InstancedMesh;\n\n  public constructor(\n    private readonly game: Game,\n    public owner: Player,\n    public readonly isHome: boolean,\n    q: number,\n    r: number,\n    s: number | undefined = undefined\n  ) {\n    if (s === undefined) {\n      s = -(q + r);\n    } else if (q + r + s !== 0) {\n      console.error('Attempting to create an invalid Tile', { q, r, s });\n    }\n\n    this.coords = new Vector3(q, r, s);\n    this.mesh = undefined!; // init'd on generate\n  }\n\n  public generate(scene: Scene) {\n    if (!Tile.mesh) {\n      Tile.mesh = Tile.generateMesh(scene, config.drawnTileSize);\n    }\n\n    const { x, y, z } = this.coords;\n    const meshInst = Tile.mesh.createInstance(`tileMesh/${x}/${y}/${z}`);\n    meshInst.position.copyFrom(this.toPos());\n    meshInst.isVisible = true;\n    this.mesh = meshInst;\n  }\n\n  private conqueror(units: Unit[], players: Player[]): Player | undefined {\n    const unitsOnTile = units.filter((u) => u.tile === this);\n    if (unitsOnTile.length > 0) {\n      const requiredCount = Math.max(2, (unitsOnTile.length * 2) / 3);\n      for (let i = 0; i < players.length; i++) {\n        const player = players[i];\n        const playerUnits = unitsOnTile.filter((u) => u.owner === player);\n        if (playerUnits.length >= requiredCount) {\n          return player;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  public updateDrawn(_elapsedMillis: number) {\n    // nothing needs to be updated per frame\n  }\n\n  public updateState(elapsedMillis: number) {\n    const conqueror = this.conqueror(this.game.aliveUnits, this.game.players);\n    if (conqueror) {\n      this.owner = conqueror;\n      for (let i = 0; i < this.game.aliveUnits.length; i++) {\n        const unit = this.game.aliveUnits[i];\n        if (unit.tile === this && unit.owner !== conqueror) {\n          unit.setState(UnitState.dead);\n        }\n      }\n    }\n\n    this.mesh.instancedBuffers.color = this.isHome\n      ? this.owner.homeTileColor\n      : this.owner.tileColor;\n\n    this.owner.resourceCount += (elapsedMillis * config.resourcesRate) / 1000;\n  }\n\n  public equals(other: Tile): boolean {\n    return this.coords.equals(other.coords);\n  }\n\n  public static distBetween(a: Tile, b: Tile): number {\n    const { x, y, z } = a.coords.subtract(b.coords);\n    return 0.5 * (Math.abs(x) + Math.abs(y) + Math.abs(z));\n  }\n\n  // increment in CCW order, starting with straight up (north).\n  public static directions = [\n    new Vector3(+0, +1, -1), // north\n    new Vector3(+1, +0, -1), // north east\n    new Vector3(+1, -1, +0), // south east\n    new Vector3(+0, -1, +1), // south\n    new Vector3(-1, +0, +1), // south west\n    new Vector3(-1, +1, +0), // north west\n  ];\n\n  public static roundCoords(qf: number, rf: number): { q: number; r: number } {\n    const sf = -qf - rf;\n    const q = Math.round(qf);\n    const r = Math.round(rf);\n    const s = Math.round(sf);\n\n    const qDist = Math.abs(qf - q);\n    const rDist = Math.abs(rf - r);\n    const sDist = Math.abs(sf - s);\n\n    if (qDist > Math.max(rDist, sDist)) {\n      return { q: -r - s, r };\n    }\n    if (rDist > sDist) {\n      return { q, r: -q - s };\n    }\n    return { q, r };\n  }\n\n  private static mesh: Mesh | undefined;\n  private static generateMesh(scene: Scene, radius: number): Mesh {\n    const material = new StandardMaterial(`tileMeshMaterial`, scene);\n    material.specularColor = new Color3(0.5, 0.6, 0.87);\n\n    const mesh = MeshBuilder.CreateDisc(\n      `tileMesh`,\n      { radius, tessellation: 6, sideOrientation: Mesh.DOUBLESIDE },\n      scene\n    );\n\n    mesh.rotation.x = Math.PI * 0.5; // rotate from XY plane to XZ\n    mesh.material = material;\n    mesh.isVisible = false; // hide prototype, only the instanced copies should be visible\n\n    mesh.registerInstancedBuffer('color', 4);\n    mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\n\n    return mesh;\n  }\n\n  public toPos(): Vector3 {\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\n    const { x, y } = this.coords;\n    return new Vector3(\n      1.5 * x * config.tileSize,\n      0,\n      sqrt3 * (0.5 * x + y) * config.tileSize\n    );\n  }\n}\nconst sqrt3 = Math.sqrt(3);\n","import { Scene, Vector3 } from '@babylonjs/core';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Game } from './game';\n\ntype TileFilter = (q: number, r: number, s: number) => boolean;\n\nexport class Board {\n  private readonly tiles: Tile[][]; // indexed by q,r\n  public readonly tileList: Tile[]; // just a list\n\n  constructor(\n    private readonly game: Game,\n    private readonly radius: number, // integer, number of tiles from center\n    acceptTile: TileFilter\n  ) {\n    this.tiles = [];\n    this.tileList = [];\n\n    const R = radius;\n    for (let q = -R; q <= R; q++) {\n      this.tiles[q + R] = [];\n\n      for (let r = -R; r <= R; r++) {\n        const s = -(q + r);\n\n        if (-R <= s && s <= R && acceptTile(q, r, s)) {\n          const isHome = q === 0 && Math.abs(r) === R;\n          const owner = game.players[isHome ? (r === R ? 1 : 2) : 0];\n          const tile = new Tile(game, owner, isHome, q, r);\n          this.tiles[q + R][r + R] = tile;\n          this.tileList.push(tile);\n        }\n      }\n    }\n  }\n\n  public generate(scene: Scene) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      const tile = this.tileList[i];\n      tile.generate(scene);\n    }\n  }\n\n  public updateDrawn(elapsedMillis: number) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      this.tileList[i].updateDrawn(elapsedMillis);\n    }\n  }\n\n  public updateState(elapsedMillis: number) {\n    for (let i = 0; i < this.tileList.length; i++) {\n      this.tileList[i].updateState(elapsedMillis);\n    }\n  }\n\n  public tile(q: number, r: number): Tile | undefined {\n    const R = this.radius;\n    if (-R <= q && q <= R && -R <= r && r <= R) {\n      return this.tiles[q + R][r + R];\n    }\n    return undefined;\n  }\n\n  public neighbours(tile: Tile): Tile[] {\n    const { x, y } = tile.coords;\n    return Tile.directions\n      .map((dir) => this.tile(x + dir.x, y + dir.y))\n      .filter((t) => !!t) as Tile[];\n  }\n\n  public posToTile(pos: Vector3): Tile | undefined {\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\n    const x = pos.x / config.tileSize;\n    const z = pos.z / config.tileSize;\n    const { q, r } = Tile.roundCoords((2.0 / 3.0) * x, (sqrt3 * z - x) / 3.0);\n    return this.tile(q, r);\n  }\n}\nconst sqrt3 = Math.sqrt(3);\n","import { Color3, Color4, Scene } from '@babylonjs/core';\nimport config from './config';\nimport { Tile } from './tile';\nimport { Game } from './game';\n\nfunction countIf<T>(array: T[], predicate: (t: T) => boolean) {\n  return array.filter(predicate).length;\n}\n\nexport class Player {\n  public readonly tileColor: Color4;\n  public readonly homeTileColor: Color4;\n  public readonly unitColor: Color4;\n  public readonly deadUnitColor: Color4;\n\n  public homeTile: Tile;\n  public resourceCount: number;\n\n  constructor(\n    private readonly game: Game,\n    public readonly id: number,\n    public readonly name: string,\n    hue: number,\n    maxSaturation: number\n  ) {\n    this.tileColor = Player.color(hue, 0.4 * maxSaturation, 0.8);\n    this.homeTileColor = Player.color(hue, 0.7 * maxSaturation, 0.6);\n    this.unitColor = Player.color(hue, 0.9 * maxSaturation, 0.95);\n    this.deadUnitColor = Player.color(hue, 0.4 * maxSaturation, 0.3, 0.3);\n\n    this.resourceCount = 0;\n    this.homeTile = undefined!; // init'd on generate\n  }\n\n  public generate(_scene: Scene) {\n    this.homeTile = this.game.board.tileList.find(\n      (t) => t.owner === this && t.isHome\n    )!;\n  }\n\n  public updateState(_elapsedMillis: number) {\n    // automatically spawn unit when there are enough resources\n    while (this.resourceCount > config.unitCost) {\n      this.resourceCount -= config.unitCost;\n      this.game.spawnUnit(this, this.homeTile);\n    }\n  }\n\n  public isAlive(): boolean {\n    return this.homeTile.owner === this;\n  }\n\n  public statusDisplayText(game: Game): string {\n    const resCount = Math.floor(this.resourceCount);\n    const tileCount = countIf(game.board.tileList, (u) => u.owner === this);\n    const unitCount = countIf(game.aliveUnits, (u) => u.owner === this);\n    return `${this.name}: $${resCount}, ${tileCount} tile(s), ${unitCount} unit(s)`;\n  }\n\n  private static color(\n    hue: number,\n    saturation: number,\n    value: number,\n    alpha: number = 1\n  ): Color4 {\n    const result = new Color3();\n    Color3.HSVtoRGBToRef(hue, saturation, value, result);\n\n    const { r, g, b } = result;\n    return new Color4(r, g, b, alpha);\n  }\n}\n","import { MutableRefObject } from 'react';\nimport { Scene } from '@babylonjs/core';\nimport config from './config';\nimport { Player } from './player';\nimport { Board } from './board';\nimport { Unit, UnitState } from './unit';\nimport { Tile } from './tile';\n\nexport type GameFn = (game: Game) => void;\ntype GameListener = MutableRefObject<GameFn | undefined>;\n\nexport class Game {\n  public readonly players: Player[];\n  public readonly board: Board;\n  public readonly allUnits: Unit[];\n  public aliveUnits: Unit[];\n  public scene: Scene | undefined;\n  public winner: Player | undefined;\n\n  private listeners: GameListener[];\n  private elapsedMillisState: number = 0;\n\n  constructor() {\n    const gaia = new Player(this, 0, 'Gaia', 180, 0.01);\n    const player1 = new Player(this, 1, 'Green', 120, 1);\n    const player2 = new Player(this, 2, 'Red', 0, 1);\n    this.players = [gaia, player1, player2];\n\n    this.board = new Board(this, 2, () => true);\n    this.allUnits = [];\n    this.aliveUnits = [];\n    this.scene = undefined;\n    this.winner = undefined;\n    this.listeners = [];\n  }\n\n  public generate(scene: Scene) {\n    this.board.generate(scene);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].generate(scene);\n    }\n\n    for (let i = 0; i < this.players.length; i++) {\n      const player = this.players[i];\n      player.generate(scene);\n    }\n\n    this.scene = scene;\n  }\n\n  public spawnUnit(owner: Player, tile: Tile) {\n    const nextId = this.allUnits.length;\n    const unit = new Unit(this, nextId, owner, tile, tile.toPos());\n    this.scene && unit.generate(this.scene);\n    this.allUnits.push(unit);\n    this.aliveUnits.push(unit);\n  }\n\n  public update(elapsedMillis: number) {\n    this.updateDrawn(elapsedMillis);\n\n    this.elapsedMillisState += elapsedMillis;\n    if (this.running() && this.elapsedMillisState >= config.minDurationState) {\n      this.updateState(this.elapsedMillisState);\n      this.elapsedMillisState = 0;\n    }\n  }\n\n  private updateDrawn(elapsedMillis: number) {\n    if (!this.scene) return;\n\n    this.board.updateDrawn(elapsedMillis);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].updateDrawn(elapsedMillis);\n    }\n  }\n\n  private updateState(elapsedMillis: number) {\n    this.board.updateState(elapsedMillis);\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      this.aliveUnits[i].updateState(elapsedMillis);\n    }\n\n    this.aliveUnits = this.allUnits.filter((u) => u.isAlive());\n\n    for (let i = 1; i <= 2; i++) {\n      const player = this.players[i];\n      player.updateState(elapsedMillis);\n      if (!player.isAlive()) {\n        const winner = this.players[3 - i];\n        this.finishGame(winner);\n      }\n    }\n\n    this.notifyListeners();\n  }\n\n  public addListenerEffect(listener: GameListener) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener);\n    };\n  }\n\n  private notifyListeners() {\n    for (let i = 0; i < this.listeners.length; i++) {\n      const listener = this.listeners[i];\n      listener.current && listener.current(this);\n    }\n  }\n\n  public running(): boolean {\n    return this.winner === undefined;\n  }\n\n  private finishGame(winner: Player) {\n    this.winner = winner;\n\n    for (let i = 0; i < this.aliveUnits.length; i++) {\n      const unit = this.aliveUnits[i];\n      unit.setState(unit.owner === winner ? UnitState.won : UnitState.lost);\n    }\n  }\n}\n","import React, { MutableRefObject, useCallback, useEffect, useRef } from 'react';\nimport { Game } from '../core';\nimport './Stats.css';\n\nexport type StatsRefFn = (game: Game) => void;\n\ntype StatsUIProps = {\n  outRef: MutableRefObject<StatsRefFn | undefined>;\n};\n\nconst StatsUI: React.FC<StatsUIProps> = ({ outRef }) => {\n  const fpsRef = useRef<HTMLDivElement | null>(null);\n  const p1Ref = useRef<HTMLDivElement | null>(null);\n  const p2Ref = useRef<HTMLDivElement | null>(null);\n\n  const updateStats = useCallback(\n    (game: Game) => {\n      if (game.scene && fpsRef.current) {\n        const fps = Math.round(game.scene.getEngine().getFps());\n        fpsRef.current.innerText = `FPS: ${fps}`;\n      }\n\n      const [, p1, p2] = game.players;\n      if (p1Ref.current && p1) {\n        p1Ref.current.innerText = p1.statusDisplayText(game);\n      }\n      if (p2Ref.current && p2) {\n        p2Ref.current.innerText = p2.statusDisplayText(game);\n      }\n    },\n    [fpsRef, p1Ref, p2Ref]\n  );\n\n  useEffect(() => {\n    if (outRef) {\n      outRef.current = updateStats;\n    }\n  }, [outRef, updateStats]);\n\n  return (\n    <div className=\"stats\">\n      <div className=\"stats-fps\" ref={fpsRef} />\n      <div className=\"stats-p1\" ref={p1Ref} />\n      <div className=\"stats-p2\" ref={p2Ref} />\n    </div>\n  );\n};\n\nexport default StatsUI;\n","import React, { MutableRefObject, useCallback, useEffect, useRef } from 'react';\nimport { Game } from '../core';\nimport './Alert.css';\n\nexport type AlertRefFn = (game: Game) => void;\n\ntype AlertUIProps = {\n  onGetMessage: (game: Game) => string;\n  outRef: MutableRefObject<AlertRefFn | undefined>;\n};\n\nconst AlertUI: React.FC<AlertUIProps> = ({ onGetMessage, outRef }) => {\n  const alertRef = useRef<HTMLDivElement | null>(null);\n\n  const updateAlert = useCallback(\n    (game: Game) => {\n      if (alertRef.current) {\n        alertRef.current.innerText = onGetMessage(game);\n      }\n    },\n    [alertRef, onGetMessage]\n  );\n\n  useEffect(() => {\n    outRef.current = updateAlert;\n  }, [outRef, updateAlert]);\n\n  return <div className=\"alert\" ref={alertRef} />;\n};\n\nexport default AlertUI;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  Vector3,\n  HemisphericLight,\n  Scene,\n  ArcRotateCamera,\n  Color3,\n} from '@babylonjs/core';\nimport SceneComponent from 'babylonjs-hook';\nimport './App.css';\nimport { Game } from './core';\nimport StatsUI, { StatsRefFn } from './ui/Stats';\nimport AlertUI, { AlertRefFn } from './ui/Alert';\n\nconst game = new Game();\n\nconst onSceneReady = (scene: Scene) => {\n  scene.ambientColor = new Color3(1, 1, 1);\n\n  const camera = new ArcRotateCamera(\n    'camera1',\n    0,\n    0,\n    10,\n    new Vector3(0, 6, 16),\n    scene\n  );\n  camera.setTarget(Vector3.Zero());\n\n  const canvas = scene.getEngine().getRenderingCanvas()!;\n  camera.attachControl(canvas, true);\n\n  const lights = [\n    new HemisphericLight('light', new Vector3(0, 1, -2), scene),\n    new HemisphericLight('light', new Vector3(1, 1, 1), scene),\n    new HemisphericLight('light', new Vector3(-1, 1, 1), scene),\n  ];\n  for (let i = 0; i < lights.length; i++) {\n    lights[i].intensity = 0.4;\n  }\n\n  game.generate(scene);\n  game.spawnUnit(game.players[1], game.board.tile(0, 2)!);\n  game.spawnUnit(game.players[2], game.board.tile(0, -2)!);\n};\n\nfunction App() {\n  const statsRef = useRef<StatsRefFn | undefined>(undefined);\n  const alertRef = useRef<AlertRefFn | undefined>(undefined);\n  useEffect(() => game.addListenerEffect(statsRef), [statsRef]);\n  useEffect(() => game.addListenerEffect(alertRef), [alertRef]);\n\n  const onRender = (scene: Scene) => {\n    const elapsedMillis = scene.getEngine().getDeltaTime();\n    game.update(elapsedMillis);\n  };\n\n  const onGetGameOverMessage = (game: Game) =>\n    game.winner ? `${game.winner.name} wins!` : '';\n\n  return (\n    <div className=\"fullscreen\">\n      <StatsUI outRef={statsRef} />\n      <AlertUI onGetMessage={onGetGameOverMessage} outRef={alertRef} />\n      <SceneComponent\n        antialias\n        onSceneReady={onSceneReady}\n        onRender={onRender}\n        id=\"game-canvas\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}