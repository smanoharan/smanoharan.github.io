{"version":3,"sources":["ai/actions.ts","util/util.ts","ai/randomWalk.ts","core/config.ts","core/types.ts","core/tile.ts","core/unit.ts","core/board.ts","core/player.ts","core/game.ts","ui/gui/OptionButton.tsx","ui/gui/OverLayMessage.tsx","ui/gui/ControlPanel.tsx","ui/gui/meshCache.ts","ui/gui/guiGameView.ts","ui/gui/index.tsx","App.tsx","index.tsx"],"names":["moveTowards","doWorkWhile","waitWhile","unit","target","interrupt","targetDirection","subtract","position","normalize","curDirection","clone","Vector3","Dot","scaleToRef","unitType","maxSpeed","velocity","subtractToRef","scaleInPlace","pred","angularVelocity","Math","PI","owner","id","randomInt","max","floor","random","randomElem","array","length","randomWeightedElem","weight","weights","map","selected","sum","i","countIf","predicate","filter","randomWalkAI","offensiveUnitAI","defensiveUnitAI","canDoWork","curTile","tile","occupancy","opponent","healthProportion","homeTile","isDamaged","board","tilePref","nextTile","reachedRally","rally","neighbourClosestTo","neighbours","rallyTile","toPos","t","diff","abs","offenseUT","displayName","maxHealth","attackVsUnit","attackVsTile","repairTile","repairSelf","meshFactory","scene","radius","height","options","diameter","tessellation","enclose","MeshBuilder","CreateCylinder","aiFactory","defenseUT","GameObjType","randomUPS","imgName","nextUnitType","minDurationState","minDurationUI","tileSize","drawnTileSize","unitCost","tileMaxHealth","homeTileMaxHealth","tileControlThreshold","minUnitsToCapture","resourcesRate","unitTypes","unitProdStrategies","defaultUPS","traverseInOrder","obj","fn","children","Tile","game","isHome","resMult","q","r","s","undefined","type","name","viewMetaData","coords","health","console","error","this","config","view","generateTile","elapsed","resolveUnits","aliveUnits","resourceCount","drawTile","other","equals","min","rate","newHealth","incHealth","occupiers","gaia","units","unitsOnTile","u","players","p1","p2","p1Units","p2Units","forEach","attackUnit","soleOccupier","canCapture","repair","attackTile","dir","amount","x","y","nx","ny","sqrt3","toPosOffset","Zero","a","b","z","qf","rf","sf","round","qDist","rDist","sDist","direction","NN","NE","SE","SS","SW","NW","directions","UnitState","sqrt","Board","acceptTile","tiles","R","isHomeAdjacent","push","neighbour","dist","n","distBetween","closest","pos","roundCoords","Player","hue","maxSaturation","stdTileColor","homeTileColor","fullUnitColor","deadUnitColor","ups","color","tileList","find","p","generatePlayer","_view","_elapsed","spawnUnit","drawPlayer","saturation","value","alpha","result","Color3","HSVtoRGBToRef","g","Color4","TwoPI","Unit","state","rotY","ai","active","generateUnit","dead","lost","scaleAndAddToRef","minY","won","sin","setState","next","posToTile","dot","Forward","acos","drawUnit","harm","heal","canHeal","Game","winner","player1","player2","child","isAlive","finishGame","first","second","firstAdj","secondAdj","off","def","nextId","generate","gameObj","player","toggleRallyTile","defaultStyle","marginTop","marginLeft","marginRight","width","backgroundSize","outline","boxShadow","border","OptionButton","text","onClick","style","effectiveStyle","backgroundColor","transition","className","button","zIndex","margin","fontSize","OverLayMessage","getMessage","useState","msg","setMsg","useEffect","useListenerEffect","padding","bottom","ControlPanel","playerIndex","getStatus","useCallback","getPlayerStatus","curUps","setCurUps","getPlayerUPS","key","backgroundImage","setPlayerUPS","MeshFactory","factory","prototype","isVisible","isPickable","inst","createInstance","copyFrom","KeyedMeshFactory","mesh","proto","tileFactory","sideOrientation","Mesh","DOUBLESIDE","CreateDisc","rotation","material","StandardMaterial","specularColor","receiveShadows","registerInstancedBuffer","instancedBuffers","resourceFactory","depth","CreateBox","diffuseColor","unitFactory","rallyFlagFactory","dx","ph","fh","fw","shape","ExtrudePolygon","earcut","MeshCache","getMeshInstance","index","GuiGameView","meshCache","listeners","elapsedSinceState","elapsedSinceUI","hovering","ambientColor","camera","ArcRotateCamera","lowerBetaLimit","upperBetaLimit","lowerRadiusLimit","upperRadiusLimit","setTarget","canvas","getEngine","getRenderingCanvas","attachControl","lights","HemisphericLight","intensity","onPointerPick","evt","info","pickedMesh","metadata","select","o","startGame","lastElapsed","newElapsed","elapsedLimit","action","curElapsed","call","pick","pointerX","pointerY","hit","actualElapsedMillis","getDeltaTime","ifElapsed","updateState","updateUI","updateFrame","draw","running","listener","lis","addListener","removeListener","makeUnitMesh","scaling","setAll","makeTileMesh","d","makeResourceMesh","tileColor","makeRallyFlagMesh","getFps","resCount","tileCount","unitCount","getFPS","fpsStyle","top","right","opacity","getWinnerMessage","gameWinnerMessage","winnerStyle","left","textAlign","textShadow","p1Style","borderRight","borderTop","p2Style","borderLeft","GuiGameViewComponent","useMemo","antialias","onSceneReady","onRender","render","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcae0afe.chunk.js","sourcesContent":["import { Vector3 } from '@babylonjs/core';\nimport { Unit } from '../core';\n\nexport type Predicate = (unit: Unit) => boolean;\n\nexport function* moveTowards(\n  unit: Unit,\n  target: Vector3,\n  interrupt: Predicate\n) {\n  const targetDirection = target.subtract(unit.position).normalize();\n  let curDirection = targetDirection.clone();\n\n  while (Vector3.Dot(targetDirection, curDirection) > 0) {\n    targetDirection\n      .normalize()\n      .scaleToRef(unit.unitType.maxSpeed, unit.velocity);\n\n    yield; // wait for next update\n\n    if (interrupt(unit)) break;\n\n    target.subtractToRef(unit.position, curDirection);\n  }\n\n  unit.velocity.scaleInPlace(0);\n}\n\nexport function* doWorkWhile(unit: Unit, pred: Predicate) {\n  unit.angularVelocity = Math.PI * (unit.owner.id === 1 ? 3 : -3);\n  yield* waitWhile(unit, pred);\n  unit.angularVelocity = 0;\n}\n\nexport function* waitWhile(unit: Unit, pred: Predicate) {\n  while (pred(unit)) {\n    yield;\n  }\n}\n\nexport function* waitUntil(unit: Unit, pred: Predicate) {\n  while (!pred(unit)) {\n    yield;\n  }\n}\n\nexport function* wait(duration: number) {\n  let elapsed = 0;\n  while (elapsed < duration) {\n    elapsed += yield;\n  }\n}\n","export type WeightFn<T> = (t: T) => number;\n\nexport function randomInt(max: number): number {\n  return Math.floor(Math.random() * max);\n}\n\nexport function randomElem<T>(array: T[]): T | undefined {\n  if (array.length > 0) {\n    return array[randomInt(array.length)];\n  }\n  return undefined;\n}\n\nfunction sum(array: number[]): number {\n  // simpler to under than reduce\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\nexport function randomWeightedElem<T>(array: T[], weight: WeightFn<T>): T | undefined {\n  if (array.length === 0) return undefined;\n\n  const weights = array.map(weight);\n  let selected = randomInt(sum(weights));\n  for (let i = 0; i < weights.length; i++) {\n    selected -= weights[i];\n    if (selected < 0) return array[i];\n  }\n\n  return array[array.length - 1];\n}\n\nexport function countIf<T>(array: T[], predicate: (t: T) => boolean) {\n  return array.filter(predicate).length;\n}\n\nexport function lerp(source: number, target: number, amount: number): number {\n  return source * amount + target * (1 - amount);\n}\n","import { Unit, Board, Tile } from '../core';\r\nimport { doWorkWhile, moveTowards } from './actions';\r\nimport { randomWeightedElem, WeightFn } from '../util/util';\r\n\r\nfunction canDoWork(unit: Unit): boolean {\r\n  const curTile = unit.tile;\r\n  if (!curTile) return false;\r\n\r\n  if (curTile.occupancy[unit.owner.opponent.id] > 0) {\r\n    // enemy spotted\r\n    return true;\r\n  }\r\n\r\n  if (curTile.owner === unit.owner.opponent) {\r\n    // enemy tile, try to destroy it\r\n    return true;\r\n  }\r\n\r\n  if (curTile.owner === unit.owner && curTile.healthProportion() < 0.99) {\r\n    // repair owned tile\r\n    return true;\r\n  }\r\n\r\n  if (curTile === unit.owner.homeTile && unit.isDamaged()) {\r\n    // heal here\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function* randomWalkAI(unit: Unit, board: Board, tilePref: WeightFn<Tile>) {\r\n  const rally = unit.owner.rallyTile;\r\n  let reachedRally = !rally;\r\n\r\n  function nextTile(): Tile {\r\n    if (!reachedRally && rally) {\r\n      return board.neighbourClosestTo(unit.tile, rally);\r\n    }\r\n    if (unit.isDamaged()) {\r\n      return board.neighbourClosestTo(unit.tile, unit.owner.homeTile);\r\n    }\r\n    const next = randomWeightedElem(board.neighbours(unit.tile), tilePref);\r\n    return next || unit.owner.homeTile;\r\n  }\r\n\r\n  while (true) {\r\n    if (canDoWork) {\r\n      yield* doWorkWhile(unit, canDoWork);\r\n    }\r\n    reachedRally = reachedRally || unit.tile === rally || !rally;\r\n\r\n    // TODO Turn and rotate first\r\n    yield* moveTowards(unit, nextTile().toPos(), canDoWork);\r\n  }\r\n}\r\n\r\nexport function* offensiveUnitAI(unit: Unit, board: Board) {\r\n  yield* randomWalkAI(unit, board, t => {\r\n    const diff = Math.abs(unit.owner.id - t.owner.id) + 1;\r\n    return diff * diff * diff;\r\n  });\r\n}\r\n\r\nexport function* defensiveUnitAI(unit: Unit, board: Board) {\r\n  yield* randomWalkAI(unit, board, t => {\r\n    const diff = 2 - Math.abs(unit.owner.id - t.owner.id) + 1;\r\n    return diff * diff * diff;\r\n  });\r\n}\r\n","import { Mesh, MeshBuilder, Scene } from '@babylonjs/core';\r\nimport { defensiveUnitAI, offensiveUnitAI } from '../ai/randomWalk';\r\nimport { Unit } from './unit';\r\nimport { Board } from './board';\r\nimport { randomElem } from '../util/util';\r\nimport { UnitProductionStrategy, UnitType } from './types';\r\n\r\nconst offenseUT: UnitType = {\r\n  id: 0,\r\n  displayName: 'Offensive',\r\n  maxHealth: 10,\r\n\r\n  maxSpeed: 1.5,\r\n  attackVsUnit: 4,\r\n  attackVsTile: 2,\r\n  repairTile: 0.5,\r\n  repairSelf: 0.5,\r\n\r\n  meshFactory: offensiveMeshFactory,\r\n  aiFactory: offensiveAIFactory,\r\n};\r\n\r\nconst defenseUT: UnitType = {\r\n  id: 1,\r\n  displayName: 'Defensive',\r\n  maxHealth: 15,\r\n\r\n  maxSpeed: 2,\r\n  attackVsUnit: 3,\r\n  attackVsTile: 0.25,\r\n  repairTile: 2,\r\n  repairSelf: 1,\r\n\r\n  meshFactory: defensiveMeshFactory,\r\n  aiFactory: defensiveAIFactory,\r\n};\r\n\r\nfunction offensiveMeshFactory(scene: Scene, radius: number, height: number): Mesh {\r\n  const options = {\r\n    diameter: 2 * radius,\r\n    height,\r\n    tessellation: 3,\r\n    enclose: true,\r\n  };\r\n  return MeshBuilder.CreateCylinder('offUnit', options, scene);\r\n}\r\n\r\nfunction defensiveMeshFactory(scene: Scene, radius: number, height: number): Mesh {\r\n  const options = {\r\n    diameter: 1.7 * radius,\r\n    height,\r\n    tessellation: 5,\r\n    enclose: true,\r\n  };\r\n  return MeshBuilder.CreateCylinder('defUnit', options, scene);\r\n}\r\n\r\nfunction offensiveAIFactory(unit: Unit, board: Board): Generator {\r\n  return offensiveUnitAI(unit, board);\r\n}\r\n\r\nfunction defensiveAIFactory(unit: Unit, board: Board): Generator {\r\n  return defensiveUnitAI(unit, board);\r\n}\r\n\r\nconst offenseOnlyUPS: UnitProductionStrategy = {\r\n  id: 0,\r\n  displayName: 'Offensive',\r\n  imgName: 'off',\r\n  nextUnitType: () => offenseUT,\r\n};\r\n\r\nconst defenseOnlyUPS: UnitProductionStrategy = {\r\n  id: 1,\r\n  displayName: 'Defensive',\r\n  imgName: 'def',\r\n  nextUnitType: () => defenseUT,\r\n};\r\n\r\nconst randomUPS: UnitProductionStrategy = {\r\n  id: 2,\r\n  displayName: 'Random',\r\n  imgName: 'rand',\r\n  nextUnitType: () => randomElem([offenseUT, defenseUT])!,\r\n};\r\n\r\nconst rateScale = 1;\r\nexport default {\r\n  minDurationState: 0.05 / rateScale, // update state every 50ms\r\n  minDurationUI: 0.2 / rateScale, // update UI every 200ms\r\n\r\n  tileSize: 2, // how large tiles are in reality\r\n  drawnTileSize: 0.98 * 2, // how large tiles are drawn -- leave space for a gap\r\n\r\n  unitCost: 10,\r\n  tileMaxHealth: 20,\r\n  homeTileMaxHealth: 50,\r\n  tileControlThreshold: 0.8, // if the health > maxHealth * threshold, then this tile produces resources for its owner\r\n  minUnitsToCapture: 2, // need at least 2 units before a tile can be captured\r\n\r\n  // all these are in per second\r\n  resourcesRate: rateScale,\r\n\r\n  unitTypes: [offenseUT, defenseUT],\r\n  unitProdStrategies: [offenseOnlyUPS, defenseOnlyUPS, randomUPS],\r\n  defaultUPS: randomUPS,\r\n};\r\n","import { Mesh, Scene } from '@babylonjs/core';\r\nimport { Player } from './player';\r\nimport { Tile } from './tile';\r\nimport { Unit } from './unit';\r\nimport { Board } from './board';\r\n\r\nexport type UnitType = {\r\n  id: number;\r\n  displayName: string;\r\n\r\n  maxHealth: number;\r\n\r\n  // all of these are in per-second\r\n  maxSpeed: number;\r\n  attackVsUnit: number;\r\n  attackVsTile: number;\r\n  repairTile: number;\r\n  repairSelf: number; // when in an owned tile\r\n\r\n  meshFactory: (scene: Scene, radius: number, height: number) => Mesh;\r\n  aiFactory: (unit: Unit, board: Board) => Generator;\r\n};\r\n\r\nexport type UnitProductionStrategy = {\r\n  id: number;\r\n  displayName: string;\r\n  imgName: string;\r\n\r\n  nextUnitType: () => UnitType;\r\n};\r\n\r\ntype Proc<T> = (t: T) => void;\r\nexport interface GameView {\r\n  generateUnit: Proc<Unit>;\r\n  drawUnit: Proc<Unit>;\r\n  generateTile: Proc<Tile>;\r\n  drawTile: Proc<Tile>;\r\n  generatePlayer: Proc<Player>;\r\n  drawPlayer: Proc<Player>;\r\n}\r\n\r\nexport enum GameObjType {\r\n  Game,\r\n  Player,\r\n  Board,\r\n  Tile,\r\n  Unit,\r\n}\r\n\r\nexport interface GameObj {\r\n  readonly type: GameObjType;\r\n  readonly name: string;\r\n  readonly children?: GameObj[];\r\n  viewMetaData?: any; // for usage by the GameView to store relevant info\r\n  generate?: (view: GameView) => void;\r\n  updateFrame?: (view: GameView, elapsed: number) => void;\r\n  updateState?: (view: GameView, elapsed: number) => void;\r\n  draw?: (view: GameView) => void;\r\n}\r\n\r\nexport function traverseInOrder(obj: GameObj, fn: (go: GameObj) => void) {\r\n  fn(obj);\r\n  if (obj.children) {\r\n    for (let i = 0; i < obj.children.length; i++) {\r\n      traverseInOrder(obj.children[i], fn);\r\n    }\r\n  }\r\n}\r\n","import { Vector3 } from '@babylonjs/core';\r\nimport { GameObj, GameObjType, GameView } from './types';\r\nimport { randomElem } from '../util/util';\r\nimport config from './config';\r\nimport { Game } from './game';\r\nimport { Player } from './player';\r\nimport { Unit } from './unit';\r\n\r\nexport class Tile implements GameObj {\r\n  public readonly type = GameObjType.Tile;\r\n  public readonly name: string;\r\n  public viewMetaData: any;\r\n\r\n  // using q, r, s cubic coords\r\n  public readonly coords: Vector3;\r\n  private health: number;\r\n  private readonly maxHealth: number;\r\n  public occupancy: number[];\r\n\r\n  public constructor(\r\n    private readonly game: Game,\r\n    public owner: Player,\r\n    public readonly isHome: boolean,\r\n    public readonly resMult: number,\r\n    q: number,\r\n    r: number,\r\n    s: number | undefined = undefined\r\n  ) {\r\n    if (s === undefined) {\r\n      s = -(q + r);\r\n    } else if (q + r + s !== 0) {\r\n      console.error('Attempting to create an invalid Tile', { q, r, s });\r\n    }\r\n\r\n    this.name = `Tile[${q},${r},${s}]`;\r\n    this.coords = new Vector3(q, r, s);\r\n    this.maxHealth = isHome ? config.homeTileMaxHealth : config.tileMaxHealth;\r\n    this.health = isHome ? this.maxHealth : 0;\r\n    this.occupancy = [0, 0, 0];\r\n  }\r\n\r\n  public generate(view: GameView) {\r\n    view.generateTile(this);\r\n  }\r\n\r\n  public updateState(view: GameView, elapsed: number) {\r\n    const { resourcesRate, tileControlThreshold } = config;\r\n    this.resolveUnits(this.game.aliveUnits, elapsed);\r\n    if (this.healthProportion() > tileControlThreshold) {\r\n      this.owner.resourceCount += elapsed * resourcesRate * this.resMult;\r\n    }\r\n  }\r\n\r\n  public draw(view: GameView) {\r\n    view.drawTile(this);\r\n  }\r\n\r\n  public equals(other: Tile): boolean {\r\n    return this.coords.equals(other.coords);\r\n  }\r\n\r\n  public healthProportion(): number {\r\n    return Math.min(1, Math.max(0, this.health / this.maxHealth));\r\n  }\r\n\r\n  private incHealth(rate: number, elapsed: number) {\r\n    const newHealth = this.health + rate * elapsed;\r\n    this.health = Math.min(this.maxHealth, Math.max(0, newHealth));\r\n  }\r\n  public harm(rate: number, elapsed: number) {\r\n    this.incHealth(-rate, elapsed);\r\n  }\r\n  public heal(rate: number, elapsed: number) {\r\n    this.incHealth(rate, elapsed);\r\n  }\r\n\r\n  private canCapture(occupiers: Unit[]): boolean {\r\n    return this.owner === this.game.gaia && occupiers.length >= config.minUnitsToCapture;\r\n  }\r\n\r\n  private resolveUnits(units: Unit[], elapsed: number) {\r\n    const unitsOnTile = units.filter(u => u.tile === this);\r\n    if (unitsOnTile.length === 0) return;\r\n\r\n    const [gaia, p1, p2] = this.game.players;\r\n    const p1Units = unitsOnTile.filter(u => u.owner === p1);\r\n    const p2Units = unitsOnTile.filter(u => u.owner === p2);\r\n    this.occupancy = [0, p1Units.length, p2Units.length];\r\n\r\n    if (p1Units.length > 0 && p2Units.length > 0) {\r\n      p1Units.forEach(u => u.attackUnit(randomElem(p2Units)!, elapsed));\r\n      p2Units.forEach(u => u.attackUnit(randomElem(p1Units)!, elapsed));\r\n    } else {\r\n      const soleOccupier = unitsOnTile[0].owner;\r\n      if (this.canCapture(unitsOnTile)) {\r\n        this.owner = soleOccupier;\r\n      }\r\n\r\n      if (this.owner === soleOccupier) {\r\n        unitsOnTile.forEach(u => u.repair(this, elapsed));\r\n      } else if (this.owner !== gaia) {\r\n        unitsOnTile.forEach(u => u.attackTile(this, elapsed));\r\n        if (this.healthProportion() < 0.1) {\r\n          this.owner = gaia;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public toPosOffset(dir: Vector3, amount: number): Vector3 {\r\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\r\n    const { x, y } = this.coords;\r\n    let nx = x + dir.x * amount;\r\n    let ny = y + dir.y * amount;\r\n\r\n    return new Vector3(1.5 * nx * config.tileSize, 0, sqrt3 * (0.5 * nx + ny) * config.tileSize);\r\n  }\r\n\r\n  public toPos(): Vector3 {\r\n    return this.toPosOffset(Vector3.Zero(), 0);\r\n  }\r\n\r\n  public static distBetween(a: Tile, b: Tile): number {\r\n    const { x, y, z } = a.coords.subtract(b.coords);\r\n    return 0.5 * (Math.abs(x) + Math.abs(y) + Math.abs(z));\r\n  }\r\n\r\n  // increment in CCW order, starting with straight up (north).\r\n  public static direction = {\r\n    NN: new Vector3(+0, +1, -1), // north\r\n    NE: new Vector3(+1, +0, -1), // north east\r\n    SE: new Vector3(+1, -1, +0), // south east\r\n    SS: new Vector3(+0, -1, +1), // south\r\n    SW: new Vector3(-1, +0, +1), // south west\r\n    NW: new Vector3(-1, +1, +0), // north west\r\n  };\r\n  public static directions = [\r\n    Tile.direction.NN,\r\n    Tile.direction.NE,\r\n    Tile.direction.SE,\r\n    Tile.direction.SS,\r\n    Tile.direction.SW,\r\n    Tile.direction.NW,\r\n  ];\r\n\r\n  public static roundCoords(qf: number, rf: number): { q: number; r: number } {\r\n    const sf = -qf - rf;\r\n    const q = Math.round(qf);\r\n    const r = Math.round(rf);\r\n    const s = Math.round(sf);\r\n\r\n    const qDist = Math.abs(qf - q);\r\n    const rDist = Math.abs(rf - r);\r\n    const sDist = Math.abs(sf - s);\r\n\r\n    if (qDist > Math.max(rDist, sDist)) {\r\n      return { q: -r - s, r };\r\n    }\r\n    if (rDist > sDist) {\r\n      return { q, r: -q - s };\r\n    }\r\n    return { q, r };\r\n  }\r\n}\r\nconst sqrt3 = Math.sqrt(3);\r\n","import { Vector3 } from '@babylonjs/core';\r\nimport { Player } from './player';\r\nimport { Tile } from './tile';\r\nimport { Game } from './game';\r\nimport { GameObj, GameObjType, GameView, UnitType } from './types';\r\n\r\nexport enum UnitState {\r\n  active,\r\n  dead,\r\n  won,\r\n  lost,\r\n}\r\n\r\nconst TwoPI = Math.PI * 2;\r\n\r\nexport class Unit implements GameObj {\r\n  public readonly type = GameObjType.Unit;\r\n  public readonly name: string;\r\n  public viewMetaData: any;\r\n\r\n  private state: UnitState;\r\n  public velocity: Vector3;\r\n  public angularVelocity: number;\r\n  public rotY: number;\r\n  private health: number;\r\n  private ai: Generator | undefined;\r\n\r\n  constructor(\r\n    private readonly game: Game,\r\n    public readonly id: number,\r\n    public readonly owner: Player,\r\n    public readonly unitType: UnitType,\r\n    public tile: Tile,\r\n    public position: Vector3\r\n  ) {\r\n    this.name = `Unit[${id}]`;\r\n    this.state = UnitState.active;\r\n    this.velocity = new Vector3();\r\n    this.angularVelocity = 0;\r\n    this.rotY = 0;\r\n    this.health = this.unitType.maxHealth;\r\n\r\n    // init'd on generate\r\n    this.ai = undefined;\r\n  }\r\n\r\n  public generate(view: GameView) {\r\n    view.generateUnit(this);\r\n    this.ai = this.unitType.aiFactory(this, this.game.board);\r\n  }\r\n\r\n  public updateFrame(view: GameView, elapsed: number) {\r\n    if (this.state !== UnitState.dead && this.state !== UnitState.lost) {\r\n      this.velocity.scaleAndAddToRef(elapsed, this.position);\r\n\r\n      let rotY = this.rotY + this.angularVelocity * elapsed;\r\n      if (rotY >= TwoPI) {\r\n        rotY -= TwoPI;\r\n      } else if (rotY < 0) {\r\n        rotY += TwoPI;\r\n      }\r\n      this.rotY = rotY;\r\n    }\r\n\r\n    const minY = 0.05 + this.owner.id * 0.01; // TODO SM just a hack to avoid z-buffer issues\r\n    switch (this.state) {\r\n      case UnitState.active:\r\n        this.position.y = minY;\r\n        break;\r\n\r\n      case UnitState.won:\r\n        // bobble up & down randomly\r\n        const amplitude = ((this.id % 3) + 1) * 0.2;\r\n        const height = amplitude * (0.8 + Math.sin(this.rotY));\r\n        this.position.y = minY + Math.max(0, height);\r\n        break;\r\n\r\n      case UnitState.lost:\r\n      case UnitState.dead:\r\n        this.position.y = minY - 0.001; // TODO SM again, z-buffer hack\r\n        break;\r\n    }\r\n  }\r\n\r\n  public updateState(view: GameView, elapsed: number) {\r\n    if (this.health <= 0.001) {\r\n      this.setState(UnitState.dead);\r\n    }\r\n\r\n    if (this.state === UnitState.active) {\r\n      this.ai!.next(elapsed);\r\n      this.tile = this.game.board.posToTile(this.position) || this.owner.homeTile;\r\n\r\n      const speed = this.velocity.length();\r\n      if (speed > 0.1) {\r\n        const dot = Vector3.Dot(Vector3.Forward(), this.velocity);\r\n\r\n        // TODO SM this should be handled by AI\r\n        this.rotY = Math.PI / 6 + Math.acos(dot / this.velocity.length());\r\n      }\r\n    }\r\n  }\r\n\r\n  public draw(view: GameView) {\r\n    view.drawUnit(this);\r\n  }\r\n\r\n  public healthProportion(): number {\r\n    return this.health / this.unitType.maxHealth;\r\n  }\r\n\r\n  private incHealth(rate: number, elapsed: number) {\r\n    const newHealth = this.health + rate * elapsed;\r\n    this.health = Math.min(this.unitType.maxHealth, Math.max(0, newHealth));\r\n  }\r\n  public harm(rate: number, elapsed: number) {\r\n    this.incHealth(-rate, elapsed);\r\n  }\r\n  public heal(rate: number, elapsed: number) {\r\n    this.incHealth(rate, elapsed);\r\n  }\r\n\r\n  public attackUnit(target: Unit, elapsed: number) {\r\n    target.harm(this.unitType.attackVsUnit, elapsed);\r\n  }\r\n\r\n  public attackTile(target: Tile, elapsed: number) {\r\n    target.harm(this.unitType.attackVsTile, elapsed);\r\n  }\r\n\r\n  public repair(target: Tile, elapsed: number) {\r\n    target.heal(this.unitType.repairTile, elapsed);\r\n    if (this.game.canHeal(this, target)) {\r\n      this.heal(this.unitType.repairSelf, elapsed);\r\n    }\r\n  }\r\n\r\n  public isAlive(): boolean {\r\n    return this.state === UnitState.active || this.state === UnitState.won;\r\n  }\r\n\r\n  public isDamaged(): boolean {\r\n    return this.healthProportion() < 0.99;\r\n  }\r\n\r\n  public setState(state: UnitState) {\r\n    if (this.state === state) return;\r\n\r\n    switch (state) {\r\n      case UnitState.won:\r\n        this.velocity.scaleInPlace(0);\r\n        // spin around on the spot randomly\r\n        this.angularVelocity = (this.id % 4) * 2 - 3;\r\n        break;\r\n\r\n      case UnitState.dead:\r\n      case UnitState.lost:\r\n        this.ai = undefined;\r\n        this.velocity.scaleInPlace(0);\r\n        break;\r\n    }\r\n    this.state = state;\r\n  }\r\n}\r\n","import { Vector3 } from '@babylonjs/core';\r\nimport config from './config';\r\nimport { Tile } from './tile';\r\nimport { Game } from './game';\r\nimport { GameObj, GameObjType } from './types';\r\n\r\ntype TileFilter = (q: number, r: number, s: number) => boolean;\r\n\r\nexport class Board implements GameObj {\r\n  public readonly type = GameObjType.Board;\r\n  public readonly name = 'Board';\r\n  public readonly children: GameObj[];\r\n  private readonly tiles: Tile[][]; // indexed by q,r\r\n\r\n  constructor(\r\n    private readonly game: Game,\r\n    private readonly radius: number, // integer, number of tiles from center\r\n    acceptTile: TileFilter\r\n  ) {\r\n    this.tiles = [];\r\n    this.children = [];\r\n\r\n    const R = radius;\r\n    for (let q = -R; q <= R; q++) {\r\n      this.tiles[q + R] = [];\r\n\r\n      for (let r = -R; r <= R; r++) {\r\n        const s = -(q + r);\r\n\r\n        if (-R <= s && s <= R && acceptTile(q, r, s)) {\r\n          const isHome = q === 0 && Math.abs(r) === R;\r\n          const owner = game.players[isHome ? (r === R ? 1 : 2) : 0];\r\n          const isHomeAdjacent = Math.abs(q) <= 1 && Math.abs(s - r) >= 2;\r\n          const isMidTile = s === r;\r\n          const resourceMult = isHome || isMidTile ? 2 : isHomeAdjacent ? 0.5 : 1;\r\n          const tile = new Tile(game, owner, isHome, resourceMult, q, r);\r\n          this.tiles[q + R][r + R] = tile;\r\n          this.children.push(tile);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public tile(q: number, r: number): Tile | undefined {\r\n    const R = this.radius;\r\n    if (-R <= q && q <= R && -R <= r && r <= R) {\r\n      return this.tiles[q + R][r + R];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  public tileList(): Tile[] {\r\n    return this.children as Tile[];\r\n  }\r\n\r\n  public neighbours(tile: Tile): Tile[] {\r\n    return Tile.directions.map(dir => this.neighbour(tile, dir)).filter(t => !!t) as Tile[];\r\n  }\r\n\r\n  public neighbourClosestTo(tile: Tile, target: Tile): Tile {\r\n    const neighbours = this.neighbours(tile);\r\n    if (neighbours.length === 0) return target;\r\n\r\n    const dist = neighbours.map(n => Tile.distBetween(n, target));\r\n\r\n    let closest = 0;\r\n    for (let i = 1; i < neighbours.length; i++) {\r\n      if (dist[i] < dist[closest]) closest = i;\r\n    }\r\n    return neighbours[closest];\r\n  }\r\n\r\n  public neighbour(tile: Tile, direction: Vector3): Tile | undefined {\r\n    return this.tile(tile.coords.x + direction.x, tile.coords.y + direction.y);\r\n  }\r\n\r\n  public posToTile(pos: Vector3): Tile | undefined {\r\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\r\n    const x = pos.x / config.tileSize;\r\n    const z = pos.z / config.tileSize;\r\n    const { q, r } = Tile.roundCoords((2.0 / 3.0) * x, (sqrt3 * z - x) / 3.0);\r\n    return this.tile(q, r);\r\n  }\r\n}\r\nconst sqrt3 = Math.sqrt(3);\r\n","import { Color3, Color4 } from '@babylonjs/core';\r\nimport config from './config';\r\nimport { Tile } from './tile';\r\nimport { Game } from './game';\r\nimport { GameObj, GameObjType, GameView, UnitProductionStrategy } from './types';\r\n\r\nexport class Player implements GameObj {\r\n  public readonly type = GameObjType.Player;\r\n  public viewMetaData: any;\r\n\r\n  public readonly stdTileColor: Color4;\r\n  public readonly homeTileColor: Color4;\r\n  public readonly fullUnitColor: Color4;\r\n  public readonly deadUnitColor: Color4;\r\n  public opponent: Player;\r\n\r\n  public homeTile: Tile;\r\n  public rallyTile: Tile | undefined;\r\n  public resourceCount: number;\r\n  public ups: UnitProductionStrategy;\r\n\r\n  constructor(\r\n    private readonly game: Game,\r\n    public readonly id: number,\r\n    public readonly name: string,\r\n    private readonly hue: number,\r\n    private readonly maxSaturation: number\r\n  ) {\r\n    this.stdTileColor = Player.color(hue, 0.4 * maxSaturation, 0.8);\r\n    this.homeTileColor = Player.color(hue, 0.8 * maxSaturation, 0.6);\r\n    this.fullUnitColor = Player.color(hue, 0.9 * maxSaturation, 0.95);\r\n    this.deadUnitColor = Player.color(hue, 0.4 * maxSaturation, 0.3, 0.3);\r\n\r\n    this.resourceCount = 0;\r\n    this.ups = config.defaultUPS;\r\n    this.homeTile = undefined!; // init'd on generate\r\n    this.rallyTile = undefined; // init'd on generate\r\n    this.opponent = undefined!; // init'd on generate\r\n  }\r\n\r\n  public generate(view: GameView) {\r\n    this.homeTile = this.game.board.tileList().find(t => t.owner === this && t.isHome)!;\r\n    this.opponent = this.game.players.find(p => p.id > 0 && p.id !== this.id)!;\r\n\r\n    view.generatePlayer(this);\r\n  }\r\n\r\n  public updateState(_view: GameView, _elapsed: number) {\r\n    // automatically spawn unit when there are enough resources\r\n    while (this.resourceCount > config.unitCost) {\r\n      this.resourceCount -= config.unitCost;\r\n      this.game.spawnUnit(this, this.ups.nextUnitType(), this.homeTile);\r\n    }\r\n  }\r\n\r\n  public draw(view: GameView) {\r\n    view.drawPlayer(this);\r\n  }\r\n\r\n  public isAlive(): boolean {\r\n    return this.homeTile.owner === this;\r\n  }\r\n\r\n  public tileColor(isHome: boolean, healthProportion: number, selected: boolean): Color4 {\r\n    const saturation = (isHome ? 0.8 : 0.4) * healthProportion * this.maxSaturation;\r\n    const value = (isHome ? 0.6 : 0.8) + (selected ? 0.1 : 0);\r\n    return Player.color(this.hue, saturation, value);\r\n  }\r\n\r\n  private static color(hue: number, saturation: number, value: number, alpha: number = 1): Color4 {\r\n    const result = new Color3();\r\n    Color3.HSVtoRGBToRef(hue, saturation, value, result);\r\n\r\n    const { r, g, b } = result;\r\n    return new Color4(r, g, b, alpha);\r\n  }\r\n}\r\n","import { Board } from './board';\r\nimport config from './config';\r\nimport { Player } from './player';\r\nimport { Tile } from './tile';\r\nimport { GameObj, GameObjType, GameView, UnitType } from './types';\r\nimport { Unit, UnitState } from './unit';\r\n\r\nexport class Game implements GameObj {\r\n  public readonly type = GameObjType.Game;\r\n  public readonly name = 'Game';\r\n  public readonly children: GameObj[];\r\n  private view?: GameView; // cached from generate\r\n\r\n  public readonly players: Player[];\r\n  public readonly gaia: Player;\r\n  public readonly board: Board;\r\n  public aliveUnits: Unit[];\r\n  public winner: Player | undefined;\r\n\r\n  constructor() {\r\n    this.gaia = new Player(this, 0, 'Gaia', 180, 0.01);\r\n    const player1 = new Player(this, 1, 'Green', 120, 1);\r\n    const player2 = new Player(this, 2, 'Red', 0, 1);\r\n    this.players = [this.gaia, player1, player2];\r\n\r\n    this.board = new Board(this, 2, () => true);\r\n    this.aliveUnits = [];\r\n    this.winner = undefined;\r\n\r\n    this.children = [this.board, ...this.players, ...this.aliveUnits];\r\n  }\r\n\r\n  public generate(view: GameView) {\r\n    this.view = view;\r\n  }\r\n\r\n  public updateState(view: GameView, elapsed: number) {\r\n    this.aliveUnits = this.children.filter(\r\n      child => child.type === GameObjType.Unit && (child as Unit).isAlive()\r\n    ) as Unit[];\r\n\r\n    for (let i = 1; i < this.players.length; i++) {\r\n      if (!this.players[i].isAlive()) {\r\n        this.finishGame(this.players[i].opponent);\r\n      }\r\n    }\r\n  }\r\n\r\n  public startGame() {\r\n    const [, first, second] = this.players;\r\n    const firstAdj = this.board.neighbours(first.homeTile);\r\n    const secondAdj = this.board.neighbours(second.homeTile);\r\n\r\n    const [off, def] = config.unitTypes;\r\n    this.spawnUnit(first, def, first.homeTile);\r\n    this.spawnUnit(second, def, second.homeTile);\r\n    this.spawnUnit(first, off, firstAdj[1]);\r\n    this.spawnUnit(second, off, secondAdj[0]);\r\n  }\r\n\r\n  public spawnUnit(owner: Player, unitType: UnitType, tile: Tile) {\r\n    const nextId = this.children.length;\r\n    const unit = new Unit(this, nextId, owner, unitType, tile, tile.toPos());\r\n    this.view && unit.generate(this.view);\r\n    this.children.push(unit);\r\n    this.aliveUnits.push(unit);\r\n  }\r\n\r\n  public running(): boolean {\r\n    return this.winner === undefined;\r\n  }\r\n\r\n  private finishGame(winner: Player) {\r\n    this.winner = winner;\r\n\r\n    for (let i = 0; i < this.aliveUnits.length; i++) {\r\n      const unit = this.aliveUnits[i];\r\n      unit.setState(unit.owner === winner ? UnitState.won : UnitState.lost);\r\n    }\r\n  }\r\n\r\n  public canHeal(unit: Unit, tile: Tile): boolean {\r\n    return (\r\n      tile.isHome &&\r\n      unit.owner === tile.owner &&\r\n      tile.healthProportion() > config.tileControlThreshold\r\n    );\r\n  }\r\n\r\n  public allowSelect(gameObj: GameObj): boolean {\r\n    return gameObj.type === GameObjType.Tile;\r\n  }\r\n\r\n  private toggleRallyTile(player: Player, tile: Tile) {\r\n    player.rallyTile = player.rallyTile === tile ? undefined : tile;\r\n  }\r\n\r\n  public select(player: Player, gameObj: GameObj) {\r\n    if (gameObj.type === GameObjType.Tile) {\r\n      this.toggleRallyTile(player, gameObj as Tile);\r\n    }\r\n  }\r\n}\r\n","import React, { CSSProperties } from 'react';\r\nimport { animated } from 'react-spring';\r\nimport './OptionButton.css';\r\n\r\ntype OptionButtonProps = {\r\n  text: string;\r\n  active: boolean;\r\n  onClick: () => void;\r\n  style?: CSSProperties;\r\n};\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  marginTop: '0.5em',\r\n  marginLeft: '0.25em',\r\n  marginRight: '0.25em',\r\n  width: '8em',\r\n  height: '8em',\r\n  backgroundSize: 'contain',\r\n  outline: 'none',\r\n  boxShadow: 'none',\r\n  border: 0,\r\n};\r\n\r\nexport const OptionButton: React.FC<OptionButtonProps> = ({ text, active, onClick, style }) => {\r\n  const effectiveStyle = {\r\n    ...defaultStyle,\r\n    ...style,\r\n    backgroundColor: active ? 'white' : 'transparent',\r\n    transition: active\r\n      ? 'background-color 0.5s'\r\n      : 'background-color 5s cubic-bezier(.01,.80,.65,.93) 0s',\r\n  };\r\n  const className = 'option-button-' + (active ? 'active' : 'clickable');\r\n\r\n  return (\r\n    <animated.button style={effectiveStyle} onClick={onClick} className={className}>\r\n      {text}\r\n    </animated.button>\r\n  );\r\n};\r\n","import React, { CSSProperties, useEffect, useState } from 'react';\r\nimport { GuiGameView } from './guiGameView';\r\n\r\ntype OverLayMessageProps = {\r\n  view: GuiGameView;\r\n  style?: CSSProperties;\r\n  getMessage: (view: GuiGameView) => string;\r\n};\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  zIndex: 100,\r\n  color: 'whitesmoke',\r\n  margin: 'auto',\r\n  fontSize: '1em',\r\n};\r\n\r\nexport const OverLayMessage: React.FC<OverLayMessageProps> = ({ view, style, getMessage }) => {\r\n  const [msg, setMsg] = useState('');\r\n\r\n  useEffect(\r\n    view.useListenerEffect(() => setMsg(getMessage(view))),\r\n    [view, setMsg, getMessage]\r\n  );\r\n\r\n  const effectiveStyle = style ? { ...defaultStyle, ...style } : defaultStyle;\r\n\r\n  return <div style={effectiveStyle}>{msg}</div>;\r\n};\r\n","import React, { CSSProperties, useCallback, useEffect, useState } from 'react';\r\nimport { config } from '../../core';\r\nimport { UnitProductionStrategy } from '../../core/types';\r\nimport { GuiGameView } from './guiGameView';\r\nimport { OptionButton } from './OptionButton';\r\nimport { OverLayMessage } from './OverLayMessage';\r\n\r\ntype ControlPanelProps = {\r\n  // TODO\r\n  view: GuiGameView;\r\n  playerIndex: number;\r\n  style?: CSSProperties;\r\n};\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  position: 'absolute',\r\n  zIndex: 99,\r\n  padding: '10px',\r\n  bottom: 0,\r\n  margin: 'auto',\r\n};\r\n\r\nexport const ControlPanel: React.FC<ControlPanelProps> = ({ view, playerIndex, style }) => {\r\n  const getStatus = useCallback(() => view.getPlayerStatus(playerIndex), [view, playerIndex]);\r\n\r\n  const [curUps, setCurUps] = useState<UnitProductionStrategy | undefined>(undefined);\r\n  useEffect(\r\n    view.useListenerEffect(() => setCurUps(view.getPlayerUPS(playerIndex))),\r\n    [view, setCurUps, playerIndex]\r\n  );\r\n\r\n  const effectiveStyle = style ? { ...defaultStyle, ...style } : defaultStyle;\r\n  return (\r\n    <div style={effectiveStyle}>\r\n      <OverLayMessage view={view} getMessage={getStatus} />\r\n      {config.unitProdStrategies.map(ups => (\r\n        <OptionButton\r\n          key={ups.id}\r\n          text=\"\"\r\n          active={ups === curUps}\r\n          style={{ backgroundImage: `url(\"/z-minus/img/${ups.imgName}-${playerIndex}.png\")` }}\r\n          onClick={() => view.setPlayerUPS(playerIndex, ups)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  Color3,\r\n  Color4,\r\n  InstancedMesh,\r\n  Mesh,\r\n  MeshBuilder,\r\n  Scene,\r\n  StandardMaterial,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\nimport { Player, Tile, Unit } from '../../core';\r\nimport config from '../../core/config';\r\nimport earcut from 'earcut';\r\n\r\nclass MeshFactory {\r\n  private prototype: Mesh | undefined;\r\n\r\n  constructor(private readonly factory: (scene: Scene) => Mesh) {\r\n    this.prototype = undefined;\r\n  }\r\n\r\n  public getMeshInstance(scene: Scene, name: string, position?: Vector3) {\r\n    if (!this.prototype) {\r\n      this.prototype = this.factory(scene);\r\n      this.prototype.isVisible = false; // hide prototype\r\n      this.prototype.isPickable = false;\r\n    }\r\n\r\n    const inst = this.prototype.createInstance(name);\r\n    inst.position.copyFrom(position || this.prototype.position);\r\n    inst.isPickable = true;\r\n    return inst;\r\n  }\r\n}\r\n\r\nclass KeyedMeshFactory<T> {\r\n  private readonly prototype: { [key: number]: Mesh };\r\n\r\n  constructor(private readonly factory: (scene: Scene, t: T) => Mesh) {\r\n    this.prototype = {};\r\n  }\r\n\r\n  public getMeshInstance(scene: Scene, key: number, t: T, name: string, position?: Vector3) {\r\n    if (!this.prototype[key]) {\r\n      const mesh = this.factory(scene, t);\r\n      mesh.isVisible = false; // hide prototype\r\n      mesh.isPickable = false;\r\n      this.prototype[key] = mesh;\r\n    }\r\n\r\n    const proto = this.prototype[key];\r\n    const inst = proto.createInstance(name);\r\n    inst.position.copyFrom(position || proto.position);\r\n    inst.isPickable = true;\r\n    return inst;\r\n  }\r\n}\r\n\r\nfunction tileFactory(scene: Scene): Mesh {\r\n  const options = {\r\n    radius: config.drawnTileSize,\r\n    tessellation: 6,\r\n    sideOrientation: Mesh.DOUBLESIDE,\r\n  };\r\n  const mesh = MeshBuilder.CreateDisc(`tileMesh`, options, scene);\r\n  mesh.rotation.x = Math.PI * 0.5; // rotate from XY plane to XZ\r\n\r\n  const material = new StandardMaterial(`tileMeshMaterial`, scene);\r\n  material.specularColor = new Color3(0.5, 0.6, 0.87);\r\n  mesh.material = material;\r\n\r\n  mesh.receiveShadows = true;\r\n  mesh.registerInstancedBuffer('color', 4);\r\n  mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\r\n\r\n  return mesh;\r\n}\r\n\r\nfunction resourceFactory(scene: Scene): Mesh {\r\n  const options = {\r\n    width: config.drawnTileSize * 0.07,\r\n    depth: 0.05,\r\n    height: config.drawnTileSize * 0.07,\r\n  };\r\n  const mesh = MeshBuilder.CreateBox(`resourceMesh`, options, scene);\r\n\r\n  mesh.rotation.x = Math.PI * 0.5; // rotate from XY plane to XZ\r\n\r\n  const material = new StandardMaterial(`resMeshMaterial`, scene);\r\n  material.specularColor = new Color3(0.5, 0.6, 0.87);\r\n  material.diffuseColor = new Color3(1, 0.9, 0);\r\n  mesh.material = material;\r\n\r\n  mesh.receiveShadows = false;\r\n  return mesh;\r\n}\r\n\r\nfunction unitFactory(scene: Scene, unit: Unit): Mesh {\r\n  const material = new StandardMaterial(`unitMeshMaterial`, scene);\r\n  material.specularColor = new Color3(0.8, 0.8, 0.9);\r\n\r\n  const mesh = unit.unitType.meshFactory(scene, 0.4, 0.1);\r\n  mesh.material = material;\r\n  mesh.isVisible = false; // hide prototype, only instanced meshes are shown\r\n\r\n  mesh.registerInstancedBuffer('color', 4);\r\n  mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\r\n\r\n  return mesh;\r\n}\r\n\r\nfunction rallyFlagFactory(scene: Scene): Mesh {\r\n  const depth = 0.1;\r\n  const dx = depth * 0.5;\r\n  const ph = config.drawnTileSize * 0.75; // pole height\r\n  const fh = ph * 0.55; // flag height\r\n  const fw = ph - fh;\r\n  const shape: Vector3[] = [\r\n    new Vector3(-dx, 0, 0),\r\n    new Vector3(dx, 0, 0),\r\n    new Vector3(dx, 0, fh),\r\n    new Vector3(fw, 0, fh),\r\n    new Vector3(fw, 0, ph),\r\n    new Vector3(dx, 0, ph),\r\n    new Vector3(-dx, 0, ph),\r\n  ];\r\n\r\n  const mesh = MeshBuilder.ExtrudePolygon('rallyFlagMesh', { shape, depth }, scene, earcut);\r\n  mesh.rotation.x = Math.PI * -0.5; // rotate from XY plane to XZ\r\n\r\n  const material = new StandardMaterial(`rallyFlagMaterial`, scene);\r\n  material.specularColor = new Color3(0.5, 0.6, 0.87);\r\n  mesh.material = material;\r\n\r\n  mesh.receiveShadows = false;\r\n  mesh.registerInstancedBuffer('color', 4);\r\n  mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\r\n\r\n  return mesh;\r\n}\r\n\r\nexport class MeshCache {\r\n  private tileFactory: MeshFactory;\r\n  private resourceFactory: MeshFactory;\r\n  private rallyFlagFactory: MeshFactory;\r\n  private unitFactory: KeyedMeshFactory<Unit>;\r\n\r\n  constructor(private readonly scene: Scene) {\r\n    this.tileFactory = new MeshFactory(tileFactory);\r\n    this.resourceFactory = new MeshFactory(resourceFactory);\r\n    this.rallyFlagFactory = new MeshFactory(rallyFlagFactory);\r\n    this.unitFactory = new KeyedMeshFactory<Unit>(unitFactory);\r\n  }\r\n\r\n  public makeTileMesh(tile: Tile) {\r\n    return this.tileFactory.getMeshInstance(this.scene, tile.name, tile.toPos());\r\n  }\r\n\r\n  public makeResourceMesh(tile: Tile, index: number): InstancedMesh {\r\n    const pos = tile.toPosOffset(Tile.directions[index], 0.3);\r\n    const inst = this.resourceFactory.getMeshInstance(this.scene, `${tile.name}[${index}]`, pos);\r\n\r\n    inst.position.y = 0;\r\n    inst.rotation.y = (index * Math.PI) / 6;\r\n    return inst;\r\n  }\r\n\r\n  public makeRallyFlagMesh(player: Player): InstancedMesh {\r\n    const name = `${player.name}/rally`;\r\n    const inst = this.rallyFlagFactory.getMeshInstance(this.scene, name);\r\n    inst.isPickable = false;\r\n    return inst;\r\n  }\r\n\r\n  public makeUnitMesh(unit: Unit): InstancedMesh {\r\n    const { name, position, unitType, owner } = unit;\r\n    const inst = this.unitFactory.getMeshInstance(this.scene, unitType.id, unit, name, position);\r\n\r\n    inst.instancedBuffers.color = owner.fullUnitColor;\r\n    return inst;\r\n  }\r\n}\r\n","import {\r\n  AbstractMesh,\r\n  ArcRotateCamera,\r\n  Color3,\r\n  HemisphericLight,\r\n  InstancedMesh,\r\n  Nullable,\r\n  Scene,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\nimport { Game, Player, Tile, Unit } from '../../core';\r\nimport config from '../../core/config';\r\nimport { GameObj, GameView, traverseInOrder, UnitProductionStrategy } from '../../core/types';\r\nimport { countIf } from '../../util/util';\r\nimport { MeshCache } from './meshCache';\r\n\r\nexport type GuiListener = () => void;\r\n\r\nexport class GuiGameView implements GameView {\r\n  private scene: Scene;\r\n  private meshCache: MeshCache;\r\n  private listeners: GuiListener[];\r\n\r\n  private elapsedSinceState: number = 0;\r\n  private elapsedSinceUI: number = 0;\r\n  private hovering: Nullable<AbstractMesh> = null;\r\n\r\n  constructor(private readonly game: Game) {\r\n    this.listeners = [];\r\n    this.scene = undefined!; // set on generate\r\n    this.meshCache = undefined!; // set on generate\r\n  }\r\n\r\n  public generate(scene: Scene) {\r\n    this.scene = scene;\r\n    this.meshCache = new MeshCache(this.scene);\r\n\r\n    this.scene.ambientColor = new Color3(1, 1, 1);\r\n\r\n    const camera = new ArcRotateCamera('camera1', 0, 0, 10, new Vector3(0, 6, 16), this.scene);\r\n    camera.lowerBetaLimit = 0.1;\r\n    camera.upperBetaLimit = (Math.PI / 2) * 0.8;\r\n    camera.lowerRadiusLimit = 10;\r\n    camera.upperRadiusLimit = 100;\r\n    camera.setTarget(Vector3.Zero());\r\n\r\n    const canvas = this.scene.getEngine().getRenderingCanvas()!;\r\n    camera.attachControl(canvas, true);\r\n\r\n    const lights = [\r\n      new HemisphericLight('light', new Vector3(0, 1, -2), this.scene),\r\n      new HemisphericLight('light', new Vector3(1, 1, 1), this.scene),\r\n      new HemisphericLight('light', new Vector3(-1, 1, 1), this.scene),\r\n    ];\r\n    for (let i = 0; i < lights.length; i++) {\r\n      lights[i].intensity = 0.4;\r\n    }\r\n\r\n    // TODO SM Shadows look poor, needs improvement\r\n    // this.shadows = lights.map((l) => new ShadowGenerator(1024, l));\r\n    // for (let i = 0; i < this.shadows.length; i++) {\r\n    //   this.shadows[i].usePoissonSampling = true; // TODO SM expensive\r\n    // }\r\n\r\n    this.scene.onPointerPick = (evt, info) => {\r\n      const mesh = info.pickedMesh;\r\n      if (mesh && mesh.metadata) {\r\n        const playerIndex = evt.button === 0 ? 1 : 2;\r\n        const player = this.game.players[playerIndex];\r\n        this.game.select(player, mesh.metadata as GameObj);\r\n      }\r\n    };\r\n\r\n    traverseInOrder(this.game, o => o.generate && o.generate(this));\r\n\r\n    this.game.startGame();\r\n  }\r\n\r\n  private ifElapsed(\r\n    lastElapsed: number,\r\n    newElapsed: number,\r\n    elapsedLimit: number,\r\n    action: (elapsed: number) => void\r\n  ): number {\r\n    const curElapsed = lastElapsed + newElapsed;\r\n    if (curElapsed > elapsedLimit) {\r\n      action.call(this, curElapsed);\r\n      return 0;\r\n    }\r\n    return curElapsed;\r\n  }\r\n\r\n  public render() {\r\n    if (!this.scene) return; // not yet generated\r\n\r\n    const pick = this.scene.pick(this.scene.pointerX, this.scene.pointerY);\r\n    if (pick && pick.hit) {\r\n      this.hovering = pick.pickedMesh;\r\n    }\r\n\r\n    // if its been more than 50ms since last update, either we're on a really slow machine,\r\n    //  or we've paused for some reason (e.g. inactive tab). Either way, don't attempt to\r\n    //  simulate physics for all elapsed time, it would result in units moving too much and\r\n    //  breaking through collision barriers\r\n    const maxElapsedMillis = 50;\r\n    const actualElapsedMillis = this.scene.getEngine().getDeltaTime();\r\n    const elapsedMillis = Math.min(maxElapsedMillis, actualElapsedMillis);\r\n    const elapsed = elapsedMillis / 1000.0;\r\n\r\n    this.elapsedSinceState = this.ifElapsed(\r\n      this.elapsedSinceState,\r\n      elapsed,\r\n      config.minDurationState,\r\n      this.updateState\r\n    );\r\n\r\n    this.elapsedSinceUI = this.ifElapsed(\r\n      this.elapsedSinceUI,\r\n      elapsed,\r\n      config.minDurationUI,\r\n      this.updateUI\r\n    );\r\n\r\n    traverseInOrder(this.game, o => {\r\n      o.updateFrame && o.updateFrame(this, elapsed);\r\n      o.draw && o.draw(this);\r\n    });\r\n  }\r\n\r\n  private updateState(elapsed: number) {\r\n    if (this.game.running()) {\r\n      traverseInOrder(this.game, o => o.updateState && o.updateState(this, elapsed));\r\n    }\r\n  }\r\n\r\n  private updateUI(_elapsed: number) {\r\n    for (let i = 0; i < this.listeners.length; i++) {\r\n      this.listeners[i]();\r\n    }\r\n  }\r\n\r\n  private addListener(listener: GuiListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  private removeListener(listener: GuiListener) {\r\n    this.listeners = this.listeners.filter(lis => lis !== listener);\r\n  }\r\n\r\n  public useListenerEffect(listener: GuiListener) {\r\n    return () => {\r\n      this.addListener(listener);\r\n      return () => this.removeListener(listener);\r\n    };\r\n  }\r\n\r\n  public generateUnit(unit: Unit) {\r\n    const mesh = this.meshCache.makeUnitMesh(unit);\r\n    unit.viewMetaData = mesh;\r\n    mesh.metadata = unit;\r\n  }\r\n\r\n  public drawUnit(unit: Unit) {\r\n    const mesh = unit.viewMetaData as InstancedMesh;\r\n\r\n    if (!unit.isAlive()) {\r\n      mesh.instancedBuffers.color = unit.owner.deadUnitColor;\r\n    }\r\n\r\n    mesh.scaling.setAll(0.5 + 0.5 * unit.healthProportion());\r\n    mesh.position.copyFrom(unit.position);\r\n    mesh.rotation.y = unit.rotY;\r\n  }\r\n\r\n  public generateTile(tile: Tile) {\r\n    const mesh = this.meshCache.makeTileMesh(tile);\r\n    tile.viewMetaData = mesh;\r\n    mesh.metadata = tile;\r\n\r\n    const r = tile.resMult;\r\n    const d = r < 0.75 ? 3 : 2;\r\n    const a = (tile.coords.x + d) % d;\r\n    for (let i = 0; i < Tile.directions.length; i++) {\r\n      if (r > 1.5 || (r < 0.75 && i % 3 === a) || (r >= 0.75 && i % 2 === a)) {\r\n        this.meshCache.makeResourceMesh(tile, i);\r\n      }\r\n    }\r\n\r\n    // const mmesh = MeshBuilder.CreatePlane(\r\n    //   `tile${this.coords.x}.${this.coords.y}`,\r\n    //   { size: 2 },\r\n    //   scene\r\n    // );\r\n    // mmesh.rotation.x = Math.PI * 0.5;\r\n    // mmesh.parent = this.mesh.parent;\r\n    // mmesh.position = this.mesh.position.clone();\r\n    // mmesh.position.y += 0.1;\r\n    //\r\n    // const texture = AdvancedDynamicTexture.CreateForMesh(mmesh);\r\n    // let text = ''; //`q ${this.coords.x},   r ${this.coords.y},   s ${this.coords.z}`;\r\n    // if (this.resMult !== 1) {\r\n    //   text += ' ==> ' + this.resMult + ' <==';\r\n    // }\r\n    //\r\n    // const button = Button.CreateSimpleButton(\r\n    //   `but${this.coords.x}.${this.coords.y}`,\r\n    //   text\r\n    // );\r\n    // button.width = 1;\r\n    // button.height = 0.4;\r\n    // button.color = 'white';\r\n    // button.fontSize = 150;\r\n    // button.background = 'green';\r\n    // texture.addControl(button);\r\n  }\r\n\r\n  public drawTile(tile: Tile) {\r\n    tile.viewMetaData.instancedBuffers.color = tile.owner.tileColor(\r\n      tile.isHome,\r\n      tile.healthProportion(),\r\n      this.hovering?.name === tile.viewMetaData.name\r\n    );\r\n  }\r\n\r\n  public generatePlayer(player: Player) {\r\n    const mesh = this.meshCache.makeRallyFlagMesh(player);\r\n    mesh.instancedBuffers.color = player.homeTileColor;\r\n    player.viewMetaData = mesh;\r\n    mesh.metadata = player;\r\n  }\r\n\r\n  public drawPlayer(player: Player) {\r\n    const mesh = player.viewMetaData as InstancedMesh;\r\n    mesh.isVisible = !!player.rallyTile;\r\n    if (player.rallyTile) {\r\n      const pos = player.rallyTile.toPos().clone();\r\n\r\n      if (player.rallyTile === player.opponent.rallyTile) {\r\n        // both flags on same tile, move flag closer to home base\r\n        const dir = player.id === 1 ? 1 : -1;\r\n        pos.x += config.drawnTileSize * 0.15 * dir;\r\n        pos.z += config.drawnTileSize * 0.25 * dir;\r\n      }\r\n      mesh.position.copyFrom(pos);\r\n    }\r\n  }\r\n\r\n  public gameWinnerMessage(): string {\r\n    return this.game.winner ? `${this.game.winner.name} wins!` : '';\r\n  }\r\n\r\n  public getFPS(): number {\r\n    return Math.round(this.scene.getEngine().getFps());\r\n  }\r\n\r\n  public getPlayerStatus(index: number): string {\r\n    const player = this.game.players[index];\r\n    const resCount = Math.floor(player.resourceCount);\r\n    const tileCount = countIf(this.game.board.tileList(), u => u.owner === player);\r\n    const unitCount = countIf(this.game.aliveUnits, u => u.owner === player);\r\n    return `${player.name}: $${resCount}, ${tileCount} tile(s), ${unitCount} unit(s)`;\r\n  }\r\n\r\n  public getPlayerUPS(index: number): UnitProductionStrategy {\r\n    return this.game.players[index].ups;\r\n  }\r\n  public setPlayerUPS(index: number, ups: UnitProductionStrategy) {\r\n    this.game.players[index].ups = ups;\r\n    this.updateUI(0);\r\n  }\r\n}\r\n","import SceneComponent from 'babylonjs-hook';\r\nimport React, { CSSProperties, useMemo } from 'react';\r\nimport { Game } from '../../core';\r\nimport { ControlPanel } from './ControlPanel';\r\nimport { GuiGameView } from './guiGameView';\r\nimport { OverLayMessage } from './OverLayMessage';\r\n\r\ntype GuiGameViewComponentProps = {\r\n  game: Game;\r\n};\r\n\r\nfunction getFPS(view: GuiGameView) {\r\n  return `FPS: ${view.getFPS()}`;\r\n}\r\nconst fpsStyle: CSSProperties = {\r\n  position: 'absolute',\r\n  top: 0,\r\n  right: 0,\r\n  opacity: 0.8,\r\n  padding: '0.5em',\r\n};\r\n\r\nfunction getWinnerMessage(view: GuiGameView) {\r\n  return view.gameWinnerMessage();\r\n}\r\nconst winnerStyle: CSSProperties = {\r\n  position: 'absolute',\r\n  top: '25vh',\r\n  left: 0,\r\n  right: 0,\r\n  fontSize: '6em',\r\n  textAlign: 'center',\r\n  textShadow: '#111 3px 3px',\r\n};\r\n\r\nconst p1Border = '1px dashed forestgreen';\r\nconst p1Style: CSSProperties = {\r\n  left: 0,\r\n  textAlign: 'left',\r\n  borderRight: p1Border,\r\n  borderTop: p1Border,\r\n};\r\n\r\nconst p2Border = '1px dashed red';\r\nconst p2Style: CSSProperties = {\r\n  right: 0,\r\n  textAlign: 'right',\r\n  borderLeft: p2Border,\r\n  borderTop: p2Border,\r\n};\r\n\r\nconst GuiGameViewComponent: React.FC<GuiGameViewComponentProps> = ({ game }) => {\r\n  const view = useMemo(() => new GuiGameView(game), [game]);\r\n\r\n  return (\r\n    <>\r\n      <OverLayMessage view={view} style={winnerStyle} getMessage={getWinnerMessage} />\r\n      <OverLayMessage view={view} style={fpsStyle} getMessage={getFPS} />\r\n      <SceneComponent\r\n        antialias\r\n        onSceneReady={scene => view.generate(scene)}\r\n        onRender={() => view.render()}\r\n        id=\"game-canvas\"\r\n      />\r\n      <ControlPanel view={view} playerIndex={1} style={p1Style} />\r\n      <ControlPanel view={view} playerIndex={2} style={p2Style} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GuiGameViewComponent;\r\n","import React, { useMemo } from 'react';\r\nimport { Game } from './core';\r\nimport GameGUI from './ui/gui';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const game = useMemo(() => new Game(), []);\r\n  return (\r\n    <div className=\"fullscreen\">\r\n      <GameGUI game={game} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}