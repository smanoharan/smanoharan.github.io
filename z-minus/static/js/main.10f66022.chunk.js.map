{"version":3,"sources":["ui/headless/webWorker.ts","ai/actions.ts","util/util.ts","ai/randomWalk.ts","core/config.ts","core/types.ts","core/tile.ts","core/unit.ts","core/board.ts","core/player.ts","core/game.ts","ui/gui/OptionButton.tsx","ui/gui/OverLayMessage.tsx","ui/gui/ControlPanel.tsx","ui/gui/meshCache.ts","ui/gui/guiGameView.ts","ui/gui/GuiGameViewComponent.tsx","ui/headless/workerize-pool.js","ui/gui/GuiApp.tsx","ui/headless/HeadlessApp.tsx","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","moveTowards","doWorkWhile","waitWhile","unit","target","interrupt","targetDirection","subtract","position","normalize","curDirection","clone","Vector3","Dot","scaleToRef","unitType","maxSpeed","velocity","subtractToRef","scaleInPlace","pred","angularVelocity","Math","PI","owner","id","randomInt","max","floor","random","randomElem","array","length","randomWeightedElem","weight","weights","map","selected","sum","i","countIf","predicate","filter","randomWalkAI","offensiveUnitAI","defensiveUnitAI","canDoWork","curTile","tile","occupancy","opponent","isDamaged","canRepairTile","homeTile","canRepairSelf","board","tilePref","nextTile","reachedRally","rally","neighbourClosestTo","repairSelf","neighbours","rallyTile","toPos","to","diff","offenseUT","displayName","maxHealth","attackVsUnit","attackVsTile","repairTile","meshFactory","scene","radius","height","options","diameter","tessellation","enclose","MeshBuilder","CreateCylinder","aiFactory","defenseUT","GameObjType","offenseOnlyUPS","imgName","nextUnitType","defenseOnlyUPS","randomUPS","minDurationState","minDurationUI","tileSize","drawnTileSize","unitCost","tileMaxHealth","homeTileMaxHealth","tileControlThreshold","minUnitsToCapture","resourcesRate","unitTypes","unitProdStrategies","upsObj","defaultUPS","traverseInOrder","obj","fn","children","Tile","game","isHome","resMult","q","r","s","undefined","type","viewMetaData","coords","health","console","error","this","config","view","generateTile","elapsed","resolveUnits","aliveUnits","healthProportion","resourceCount","drawTile","other","equals","min","rate","newHealth","incHealth","occupiers","gaia","units","unitsOnTile","u","players","p1","p2","p1Units","p2Units","forEach","attackUnit","soleOccupier","canCapture","repair","attackTile","dir","amount","x","y","nx","ny","sqrt3","toPosOffset","Zero","a","b","z","abs","qf","rf","sf","round","qDist","rDist","sDist","direction","NN","NE","SE","SS","SW","NW","directions","UnitState","sqrt","Board","acceptTile","tiles","R","isHomeAdjacent","push","neighbour","t","dist","n","distBetween","closest","pos","roundCoords","Player","hue","maxSaturation","stdTileColor","homeTileColor","fullUnitColor","deadUnitColor","ups","color","tileList","find","p","generatePlayer","_view","_elapsed","spawnUnit","drawPlayer","saturation","value","alpha","result","Color3","HSVtoRGBToRef","g","Color4","TwoPI","Unit","state","rotY","ai","active","generateUnit","dead","lost","scaleAndAddToRef","minY","won","sin","setState","next","posToTile","atan2","drawUnit","harm","heal","canHeal","Game","winner","player1","player2","child","isAlive","first","second","firstAdj","secondAdj","off","def","nextId","generate","finishGame","gameObj","player","toggleRallyTile","defaultStyle","marginTop","marginLeft","marginRight","width","backgroundSize","outline","boxShadow","border","OptionButton","text","onClick","style","effectiveStyle","backgroundColor","transition","className","button","zIndex","margin","fontSize","OverLayMessage","getMessage","useState","msg","setMsg","useEffect","useListenerEffect","padding","bottom","ControlPanel","playerIndex","getStatus","useCallback","getPlayerStatus","curUps","setCurUps","getPlayerUPS","key","backgroundImage","setPlayerUPS","DrawnElement","instances","globalScale","globalRotY","colour","z_is_colorable","instancedBuffers","scale","z_is_root","scaling","setAll","copyFrom","rotation","visible","isVisible","pickable","isPickable","metaData","metadata","inst","index","colorable","parent","z_index","toDrawnAtom","MeshFactory","factory","prototype","createInstance","fromSingle","LoadedMeshFactory","fileName","colorAll","prototypes","meshes","mesh","material","geometry","getTotalVertices","registerInstancedBuffer","useVertexColors","z_color","z_loaded_index","SceneLoader","ImportMeshAsync","then","process","assert","m","Mesh","KeyedMeshFactory","proto","tileFactory","sideOrientation","DOUBLESIDE","CreateDisc","StandardMaterial","specularColor","receiveShadows","resourceFactory","depth","CreateBox","diffuseColor","unitFactory","rallyFlagFactory","dx","ph","fh","fw","shape","ExtrudePolygon","earcut","MeshCache","spireFactory","charlieFactory","offenseFactory","deltaFactory","load","getMeshInstance","setRotationY","setPickable","setColour","GuiGameView","generated","meshCache","listeners","elapsedSinceState","elapsedSinceUI","hovering","useRightHandedSystem","ambientColor","camera","ArcRotateCamera","lowerBetaLimit","upperBetaLimit","lowerRadiusLimit","upperRadiusLimit","setTarget","canvas","getEngine","getRenderingCanvas","attachControl","lights","HemisphericLight","intensity","onPointerPick","evt","info","pickedMesh","select","loadAll","o","startGame","lastElapsed","newElapsed","elapsedLimit","action","curElapsed","call","pick","pointerX","pointerY","hit","allowSelect","actualElapsedMillis","getDeltaTime","ifElapsed","updateState","updateUI","updateFrame","draw","running","updateLogic","listener","lis","addListener","removeListener","makeUnitMesh","setMetaData","setScale","setPosition","makeTileMesh","d","makeResourceMesh","tileColor","makeRallyFlagMesh","setVisible","getFps","resCount","tileCount","unitCount","getFPS","fpsStyle","top","right","opacity","getWinnerMessage","gameWinnerMessage","workerFactory","winnerStyle","left","textAlign","textShadow","p1Style","borderRight","borderTop","p2Style","borderLeft","GuiGameViewComponent","useMemo","antialias","onSceneReady","onRender","render","GuiApp","WorkerPool","size","worker","poolSize","used","pool","jobs","hasOwnProperty","_method","args","_queueJob","method","Promise","_nextJob","pop","job","shift","catch","finally","coreCount","REACT_APP_HEADLESS_CORE_COUNT","WebWorker","resultNames","combineResults","prev","cur","prevWinCounts","prevDurations","winCount","durations","newWinCounts","newDurations","pwc","wc","pd","HeadlessApp","loading","setLoading","results","setResults","counts","doneCount","gamesPerLoop","colSpan","simulate","res","disabled","headless","REACT_APP_HEADLESS","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10f66022.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"simulate\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"a8464e9a42557b7235ad.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import { Vector3 } from '@babylonjs/core';\nimport { Unit } from '../core';\n\nexport type Predicate = (unit: Unit) => boolean;\n\nexport function* moveTowards(\n  unit: Unit,\n  target: Vector3,\n  interrupt: Predicate\n) {\n  const targetDirection = target.subtract(unit.position).normalize();\n  let curDirection = targetDirection.clone();\n\n  while (Vector3.Dot(targetDirection, curDirection) > 0) {\n    targetDirection\n      .normalize()\n      .scaleToRef(unit.unitType.maxSpeed, unit.velocity);\n\n    yield; // wait for next update\n\n    if (interrupt(unit)) break;\n\n    target.subtractToRef(unit.position, curDirection);\n  }\n\n  unit.velocity.scaleInPlace(0);\n}\n\nexport function* doWorkWhile(unit: Unit, pred: Predicate) {\n  unit.angularVelocity = Math.PI * (unit.owner.id === 1 ? 3 : -3);\n  yield* waitWhile(unit, pred);\n  unit.angularVelocity = 0;\n}\n\nexport function* waitWhile(unit: Unit, pred: Predicate) {\n  while (pred(unit)) {\n    yield;\n  }\n}\n\nexport function* waitUntil(unit: Unit, pred: Predicate) {\n  while (!pred(unit)) {\n    yield;\n  }\n}\n\nexport function* wait(duration: number) {\n  let elapsed = 0;\n  while (elapsed < duration) {\n    elapsed += yield;\n  }\n}\n","export type WeightFn<T> = (t: T) => number;\n\nexport function randomInt(max: number): number {\n  return Math.floor(Math.random() * max);\n}\n\nexport function randomElem<T>(array: T[]): T | undefined {\n  if (array.length > 0) {\n    return array[randomInt(array.length)];\n  }\n  return undefined;\n}\n\nfunction sum(array: number[]): number {\n  // simpler to under than reduce\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\nexport function randomWeightedElem<T>(array: T[], weight: WeightFn<T>): T | undefined {\n  if (array.length === 0) return undefined;\n\n  const weights = array.map(weight);\n  let selected = randomInt(sum(weights));\n  for (let i = 0; i < weights.length; i++) {\n    selected -= weights[i];\n    if (selected < 0) return array[i];\n  }\n\n  return array[array.length - 1];\n}\n\nexport function countIf<T>(array: T[], predicate: (t: T) => boolean) {\n  return array.filter(predicate).length;\n}\n\nexport function lerp(source: number, target: number, amount: number): number {\n  return source * amount + target * (1 - amount);\n}\n","import { Unit, Board, Tile } from '../core';\r\nimport { doWorkWhile, moveTowards } from './actions';\r\nimport { randomWeightedElem, WeightFn } from '../util/util';\r\n\r\nfunction canDoWork(unit: Unit): boolean {\r\n  const curTile = unit.tile;\r\n  if (!curTile) return false;\r\n\r\n  if (curTile.occupancy[unit.owner.opponent.id] > 0) {\r\n    // enemy spotted\r\n    return true;\r\n  }\r\n\r\n  if (curTile.owner === unit.owner.opponent) {\r\n    // enemy tile, try to destroy it\r\n    return true;\r\n  }\r\n\r\n  if (curTile.owner === unit.owner && curTile.isDamaged() && unit.canRepairTile()) {\r\n    // repair owned tile\r\n    return true;\r\n  }\r\n\r\n  if (curTile === unit.owner.homeTile && unit.isDamaged() && unit.canRepairSelf()) {\r\n    // heal here\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function* randomWalkAI(unit: Unit, board: Board, tilePref: WeightFn<Tile>) {\r\n  const rally = unit.owner.rallyTile;\r\n  let reachedRally = !rally;\r\n\r\n  function nextTile(): Tile {\r\n    if (!reachedRally && rally) {\r\n      return board.neighbourClosestTo(unit.tile, rally);\r\n    }\r\n    if (unit.isDamaged() && unit.unitType.repairSelf > 0) {\r\n      return board.neighbourClosestTo(unit.tile, unit.owner.homeTile);\r\n    }\r\n    const next = randomWeightedElem(board.neighbours(unit.tile), tilePref);\r\n    return next || unit.owner.homeTile;\r\n  }\r\n\r\n  while (true) {\r\n    if (canDoWork) {\r\n      yield* doWorkWhile(unit, canDoWork);\r\n    }\r\n    reachedRally = reachedRally || unit.tile === rally || !rally;\r\n\r\n    // TODO Turn and rotate first\r\n    yield* moveTowards(unit, nextTile().toPos(), canDoWork);\r\n  }\r\n}\r\n\r\nexport function* offensiveUnitAI(unit: Unit, board: Board) {\r\n  yield* randomWalkAI(unit, board, tile => {\r\n    const to = tile.owner.id;\r\n    const diff = to === unit.owner.id ? 1 : to === 0 ? 2 : 3;\r\n    return diff * diff * diff;\r\n  });\r\n}\r\n\r\nexport function* defensiveUnitAI(unit: Unit, board: Board) {\r\n  yield* randomWalkAI(unit, board, tile => {\r\n    const diff = tile.owner.id === unit.owner.id ? 2 : 1;\r\n    return diff * diff * diff;\r\n  });\r\n}\r\n","import { Mesh, MeshBuilder, Scene } from '@babylonjs/core';\r\nimport { defensiveUnitAI, offensiveUnitAI } from '../ai/randomWalk';\r\nimport { Unit } from './unit';\r\nimport { Board } from './board';\r\nimport { randomElem } from '../util/util';\r\nimport { UnitProductionStrategy, UnitType } from './types';\r\n\r\nconst offenseUT: UnitType = {\r\n  id: 0,\r\n  displayName: 'Offensive',\r\n  maxHealth: 10,\r\n\r\n  maxSpeed: 1.5,\r\n  attackVsUnit: 4,\r\n  attackVsTile: 2,\r\n  repairTile: 0.5,\r\n  repairSelf: 0.5,\r\n\r\n  meshFactory: offensiveMeshFactory,\r\n  aiFactory: offensiveAIFactory,\r\n};\r\n\r\nconst defenseUT: UnitType = {\r\n  id: 1,\r\n  displayName: 'Defensive',\r\n  maxHealth: 15,\r\n\r\n  maxSpeed: 2,\r\n  attackVsUnit: 3,\r\n  attackVsTile: 0.25,\r\n  repairTile: 2,\r\n  repairSelf: 1,\r\n\r\n  meshFactory: defensiveMeshFactory,\r\n  aiFactory: defensiveAIFactory,\r\n};\r\n\r\nfunction offensiveMeshFactory(scene: Scene, radius: number, height: number): Mesh {\r\n  const options = {\r\n    diameter: 2 * radius,\r\n    height,\r\n    tessellation: 3,\r\n    enclose: true,\r\n  };\r\n  return MeshBuilder.CreateCylinder('offUnit', options, scene);\r\n}\r\n\r\nfunction defensiveMeshFactory(scene: Scene, radius: number, height: number): Mesh {\r\n  const options = {\r\n    diameter: 1.7 * radius,\r\n    height,\r\n    tessellation: 5,\r\n    enclose: true,\r\n  };\r\n  return MeshBuilder.CreateCylinder('defUnit', options, scene);\r\n}\r\n\r\nfunction offensiveAIFactory(unit: Unit, board: Board): Generator {\r\n  return offensiveUnitAI(unit, board);\r\n}\r\n\r\nfunction defensiveAIFactory(unit: Unit, board: Board): Generator {\r\n  return defensiveUnitAI(unit, board);\r\n}\r\n\r\nconst offenseOnlyUPS: UnitProductionStrategy = {\r\n  id: 0,\r\n  displayName: 'Offensive',\r\n  imgName: 'off',\r\n  nextUnitType: () => offenseUT,\r\n};\r\n\r\nconst defenseOnlyUPS: UnitProductionStrategy = {\r\n  id: 1,\r\n  displayName: 'Defensive',\r\n  imgName: 'def',\r\n  nextUnitType: () => defenseUT,\r\n};\r\n\r\nconst randomUPS: UnitProductionStrategy = {\r\n  id: 2,\r\n  displayName: 'Random',\r\n  imgName: 'rand',\r\n  nextUnitType: () => randomElem([offenseUT, defenseUT])!,\r\n};\r\n\r\nconst rateScale = 1;\r\nexport default {\r\n  minDurationState: 0.05 / rateScale, // update state every 50ms\r\n  minDurationUI: 0.2 / rateScale, // update UI every 200ms\r\n\r\n  tileSize: 2, // how large tiles are in reality\r\n  drawnTileSize: 0.98 * 2, // how large tiles are drawn -- leave space for a gap\r\n\r\n  unitCost: 10,\r\n  tileMaxHealth: 20,\r\n  homeTileMaxHealth: 50,\r\n  tileControlThreshold: 0.8, // if the health > maxHealth * threshold, then this tile produces resources for its owner\r\n  minUnitsToCapture: 2, // need at least 2 units before a tile can be captured\r\n\r\n  // all these are in per second\r\n  resourcesRate: rateScale,\r\n\r\n  unitTypes: [offenseUT, defenseUT],\r\n  unitProdStrategies: [offenseOnlyUPS, defenseOnlyUPS, randomUPS],\r\n  upsObj: { offenseOnlyUPS, defenseOnlyUPS, randomUPS },\r\n  defaultUPS: randomUPS,\r\n};\r\n","import { Mesh, Scene } from '@babylonjs/core';\r\nimport { Player } from './player';\r\nimport { Tile } from './tile';\r\nimport { Unit } from './unit';\r\nimport { Board } from './board';\r\n\r\nexport type UnitType = {\r\n  id: number;\r\n  displayName: string;\r\n\r\n  maxHealth: number;\r\n\r\n  // all of these are in per-second\r\n  maxSpeed: number;\r\n  attackVsUnit: number;\r\n  attackVsTile: number;\r\n  repairTile: number;\r\n  repairSelf: number; // when in an owned tile\r\n\r\n  meshFactory: (scene: Scene, radius: number, height: number) => Mesh;\r\n  aiFactory: (unit: Unit, board: Board) => Generator;\r\n};\r\n\r\nexport type UnitProductionStrategy = {\r\n  id: number;\r\n  displayName: string;\r\n  imgName: string;\r\n\r\n  nextUnitType: () => UnitType;\r\n};\r\n\r\ntype Proc<T> = (t: T) => void;\r\nexport interface GameView {\r\n  generateUnit: Proc<Unit>;\r\n  drawUnit: Proc<Unit>;\r\n  generateTile: Proc<Tile>;\r\n  drawTile: Proc<Tile>;\r\n  generatePlayer: Proc<Player>;\r\n  drawPlayer: Proc<Player>;\r\n}\r\n\r\nexport enum GameObjType {\r\n  Game,\r\n  Player,\r\n  Board,\r\n  Tile,\r\n  Unit,\r\n}\r\n\r\nexport interface GameObj {\r\n  readonly type: GameObjType;\r\n  readonly name: string;\r\n  readonly children?: GameObj[];\r\n  viewMetaData?: any; // for usage by the GameView to store relevant info\r\n  generate?: (view: GameView) => void;\r\n  updateFrame?: (view: GameView, elapsed: number) => void;\r\n  updateLogic?: (view: GameView, elapsed: number) => void;\r\n  draw?: (view: GameView) => void;\r\n}\r\n\r\nexport function traverseInOrder(obj: GameObj, fn: (go: GameObj) => void) {\r\n  fn(obj);\r\n  if (obj.children) {\r\n    for (let i = 0; i < obj.children.length; i++) {\r\n      traverseInOrder(obj.children[i], fn);\r\n    }\r\n  }\r\n}\r\n","import { Vector3 } from '@babylonjs/core';\r\nimport { GameObj, GameObjType, GameView } from './types';\r\nimport { randomElem } from '../util/util';\r\nimport config from './config';\r\nimport { Game } from './game';\r\nimport { Player } from './player';\r\nimport { Unit } from './unit';\r\n\r\nexport class Tile implements GameObj {\r\n  public readonly type = GameObjType.Tile;\r\n  public readonly name: string;\r\n  public viewMetaData: any;\r\n\r\n  // using q, r, s cubic coords\r\n  public readonly coords: Vector3;\r\n  private health: number;\r\n  private readonly maxHealth: number;\r\n  public occupancy: number[];\r\n\r\n  public constructor(\r\n    private readonly game: Game,\r\n    public owner: Player,\r\n    public readonly isHome: boolean,\r\n    public readonly resMult: number,\r\n    q: number,\r\n    r: number,\r\n    s: number | undefined = undefined\r\n  ) {\r\n    if (s === undefined) {\r\n      s = -(q + r);\r\n    } else if (q + r + s !== 0) {\r\n      console.error('Attempting to create an invalid Tile', { q, r, s });\r\n    }\r\n\r\n    this.name = `Tile[${q},${r},${s}]`;\r\n    this.coords = new Vector3(q, r, s);\r\n    this.maxHealth = isHome ? config.homeTileMaxHealth : config.tileMaxHealth;\r\n    this.health = isHome ? this.maxHealth : 0;\r\n    this.occupancy = [0, 0, 0];\r\n  }\r\n\r\n  public generate(view: GameView) {\r\n    view.generateTile(this);\r\n  }\r\n\r\n  public updateLogic(view: GameView, elapsed: number) {\r\n    const { resourcesRate, tileControlThreshold } = config;\r\n    this.resolveUnits(this.game.aliveUnits, elapsed);\r\n    if (this.healthProportion() > tileControlThreshold) {\r\n      this.owner.resourceCount += elapsed * resourcesRate * this.resMult;\r\n    }\r\n  }\r\n\r\n  public draw(view: GameView) {\r\n    view.drawTile(this);\r\n  }\r\n\r\n  public equals(other: Tile): boolean {\r\n    return this.coords.equals(other.coords);\r\n  }\r\n\r\n  public healthProportion(): number {\r\n    return Math.min(1, Math.max(0, this.health / this.maxHealth));\r\n  }\r\n\r\n  public isDamaged(): boolean {\r\n    return this.healthProportion() < 0.99;\r\n  }\r\n\r\n  private incHealth(rate: number, elapsed: number) {\r\n    const newHealth = this.health + rate * elapsed;\r\n    this.health = Math.min(this.maxHealth, Math.max(0, newHealth));\r\n  }\r\n  public harm(rate: number, elapsed: number) {\r\n    this.incHealth(-rate, elapsed);\r\n  }\r\n  public heal(rate: number, elapsed: number) {\r\n    this.incHealth(rate, elapsed);\r\n  }\r\n\r\n  private canCapture(occupiers: Unit[]): boolean {\r\n    return this.owner === this.game.gaia && occupiers.length >= config.minUnitsToCapture;\r\n  }\r\n\r\n  private resolveUnits(units: Unit[], elapsed: number) {\r\n    const unitsOnTile = units.filter(u => u.tile === this);\r\n    if (unitsOnTile.length === 0) return;\r\n\r\n    const [gaia, p1, p2] = this.game.players;\r\n    const p1Units = unitsOnTile.filter(u => u.owner === p1);\r\n    const p2Units = unitsOnTile.filter(u => u.owner === p2);\r\n    this.occupancy = [0, p1Units.length, p2Units.length];\r\n\r\n    if (p1Units.length > 0 && p2Units.length > 0) {\r\n      p1Units.forEach(u => u.attackUnit(randomElem(p2Units)!, elapsed));\r\n      p2Units.forEach(u => u.attackUnit(randomElem(p1Units)!, elapsed));\r\n    } else {\r\n      const soleOccupier = unitsOnTile[0].owner;\r\n      if (this.canCapture(unitsOnTile)) {\r\n        this.owner = soleOccupier;\r\n      }\r\n\r\n      if (this.owner === soleOccupier) {\r\n        unitsOnTile.forEach(u => u.repair(this, elapsed));\r\n      } else if (this.owner !== gaia) {\r\n        unitsOnTile.forEach(u => u.attackTile(this, elapsed));\r\n        if (this.healthProportion() < 0.1) {\r\n          this.owner = gaia;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public toPosOffset(dir: Vector3, amount: number): Vector3 {\r\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\r\n    const { x, y } = this.coords;\r\n    let nx = x + dir.x * amount;\r\n    let ny = y + dir.y * amount;\r\n\r\n    return new Vector3(1.5 * nx * config.tileSize, 0, sqrt3 * (0.5 * nx + ny) * config.tileSize);\r\n  }\r\n\r\n  public toPos(): Vector3 {\r\n    return this.toPosOffset(Vector3.Zero(), 0);\r\n  }\r\n\r\n  public static distBetween(a: Tile, b: Tile): number {\r\n    const { x, y, z } = a.coords.subtract(b.coords);\r\n    return 0.5 * (Math.abs(x) + Math.abs(y) + Math.abs(z));\r\n  }\r\n\r\n  // increment in CCW order, starting with straight up (north).\r\n  public static direction = {\r\n    NN: new Vector3(+0, +1, -1), // north\r\n    NE: new Vector3(+1, +0, -1), // north east\r\n    SE: new Vector3(+1, -1, +0), // south east\r\n    SS: new Vector3(+0, -1, +1), // south\r\n    SW: new Vector3(-1, +0, +1), // south west\r\n    NW: new Vector3(-1, +1, +0), // north west\r\n  };\r\n  public static directions = [\r\n    Tile.direction.NN,\r\n    Tile.direction.NE,\r\n    Tile.direction.SE,\r\n    Tile.direction.SS,\r\n    Tile.direction.SW,\r\n    Tile.direction.NW,\r\n  ];\r\n\r\n  public static roundCoords(qf: number, rf: number): { q: number; r: number } {\r\n    const sf = -qf - rf;\r\n    const q = Math.round(qf);\r\n    const r = Math.round(rf);\r\n    const s = Math.round(sf);\r\n\r\n    const qDist = Math.abs(qf - q);\r\n    const rDist = Math.abs(rf - r);\r\n    const sDist = Math.abs(sf - s);\r\n\r\n    if (qDist > Math.max(rDist, sDist)) {\r\n      return { q: -r - s, r };\r\n    }\r\n    if (rDist > sDist) {\r\n      return { q, r: -q - s };\r\n    }\r\n    return { q, r };\r\n  }\r\n}\r\nconst sqrt3 = Math.sqrt(3);\r\n","import { Vector3 } from '@babylonjs/core';\r\nimport { Player } from './player';\r\nimport { Tile } from './tile';\r\nimport { Game } from './game';\r\nimport { GameObj, GameObjType, GameView, UnitType } from './types';\r\n\r\nexport enum UnitState {\r\n  active,\r\n  dead,\r\n  won,\r\n  lost,\r\n}\r\n\r\nconst TwoPI = Math.PI * 2;\r\n\r\nexport class Unit implements GameObj {\r\n  public readonly type = GameObjType.Unit;\r\n  public readonly name: string;\r\n  public viewMetaData: any;\r\n\r\n  private state: UnitState;\r\n  public velocity: Vector3;\r\n  public angularVelocity: number;\r\n  public rotY: number;\r\n  private health: number;\r\n  private ai: Generator | undefined;\r\n\r\n  constructor(\r\n    private readonly game: Game,\r\n    public readonly id: number,\r\n    public readonly owner: Player,\r\n    public readonly unitType: UnitType,\r\n    public tile: Tile,\r\n    public position: Vector3\r\n  ) {\r\n    this.name = `Unit[${id}]`;\r\n    this.state = UnitState.active;\r\n    this.velocity = new Vector3();\r\n    this.angularVelocity = 0;\r\n    this.rotY = 0;\r\n    this.health = this.unitType.maxHealth;\r\n\r\n    // init'd on generate\r\n    this.ai = undefined;\r\n  }\r\n\r\n  public generate(view: GameView) {\r\n    view.generateUnit(this);\r\n    this.ai = this.unitType.aiFactory(this, this.game.board);\r\n  }\r\n\r\n  public updateFrame(view: GameView, elapsed: number) {\r\n    if (this.state !== UnitState.dead && this.state !== UnitState.lost) {\r\n      this.velocity.scaleAndAddToRef(elapsed, this.position);\r\n\r\n      let rotY = this.rotY + this.angularVelocity * elapsed;\r\n      if (rotY >= TwoPI) {\r\n        rotY -= TwoPI;\r\n      } else if (rotY < 0) {\r\n        rotY += TwoPI;\r\n      }\r\n      this.rotY = rotY;\r\n    }\r\n\r\n    const minY = 0.05 + this.owner.id * 0.01; // TODO SM just a hack to avoid z-buffer issues\r\n    switch (this.state) {\r\n      case UnitState.active:\r\n        this.position.y = minY;\r\n        break;\r\n\r\n      case UnitState.won:\r\n        // bobble up & down randomly\r\n        const amplitude = ((this.id % 3) + 1) * 0.2;\r\n        const height = amplitude * (0.8 + Math.sin(this.rotY));\r\n        this.position.y = minY + Math.max(0, height);\r\n        break;\r\n\r\n      case UnitState.lost:\r\n      case UnitState.dead:\r\n        this.position.y = minY - 0.001; // TODO SM again, z-buffer hack\r\n        break;\r\n    }\r\n  }\r\n\r\n  public updateLogic(view: GameView, elapsed: number) {\r\n    if (this.health <= 0.001) {\r\n      this.setState(UnitState.dead);\r\n    }\r\n\r\n    if (this.state === UnitState.active) {\r\n      this.ai!.next(elapsed);\r\n      this.tile = this.game.board.posToTile(this.position) || this.owner.homeTile;\r\n\r\n      if (Math.abs(this.velocity.x) > 0.01 || Math.abs(this.velocity.z) > 0.01) {\r\n        this.rotY = Math.atan2(this.velocity.x, this.velocity.z);\r\n      }\r\n    }\r\n  }\r\n\r\n  public draw(view: GameView) {\r\n    view.drawUnit(this);\r\n  }\r\n\r\n  public healthProportion(): number {\r\n    return this.health / this.unitType.maxHealth;\r\n  }\r\n\r\n  private incHealth(rate: number, elapsed: number) {\r\n    const newHealth = this.health + rate * elapsed;\r\n    this.health = Math.min(this.unitType.maxHealth, Math.max(0, newHealth));\r\n  }\r\n  public harm(rate: number, elapsed: number) {\r\n    this.incHealth(-rate, elapsed);\r\n  }\r\n  public heal(rate: number, elapsed: number) {\r\n    this.incHealth(rate, elapsed);\r\n  }\r\n\r\n  public attackUnit(target: Unit, elapsed: number) {\r\n    target.harm(this.unitType.attackVsUnit, elapsed);\r\n  }\r\n\r\n  public attackTile(target: Tile, elapsed: number) {\r\n    target.harm(this.unitType.attackVsTile, elapsed);\r\n  }\r\n\r\n  public repair(target: Tile, elapsed: number) {\r\n    target.heal(this.unitType.repairTile, elapsed);\r\n    if (this.game.canHeal(this, target)) {\r\n      this.heal(this.unitType.repairSelf, elapsed);\r\n    }\r\n  }\r\n\r\n  public isAlive(): boolean {\r\n    return this.state === UnitState.active || this.state === UnitState.won;\r\n  }\r\n\r\n  public isDamaged(): boolean {\r\n    return this.healthProportion() < 0.99;\r\n  }\r\n\r\n  public canRepairSelf(): boolean {\r\n    return this.unitType.repairSelf > 0.01;\r\n  }\r\n\r\n  public canRepairTile(): boolean {\r\n    return this.unitType.repairTile > 0.01;\r\n  }\r\n\r\n  public setState(state: UnitState) {\r\n    if (this.state === state) return;\r\n\r\n    switch (state) {\r\n      case UnitState.won:\r\n        this.velocity.scaleInPlace(0);\r\n        // spin around on the spot randomly\r\n        this.angularVelocity = (this.id % 4) * 2 - 3;\r\n        break;\r\n\r\n      case UnitState.dead:\r\n      case UnitState.lost:\r\n        this.ai = undefined;\r\n        this.velocity.scaleInPlace(0);\r\n        break;\r\n    }\r\n    this.state = state;\r\n  }\r\n}\r\n","import { Vector3 } from '@babylonjs/core';\r\nimport config from './config';\r\nimport { Tile } from './tile';\r\nimport { Game } from './game';\r\nimport { GameObj, GameObjType } from './types';\r\n\r\ntype TileFilter = (q: number, r: number, s: number) => boolean;\r\n\r\nexport class Board implements GameObj {\r\n  public readonly type = GameObjType.Board;\r\n  public readonly name = 'Board';\r\n  public readonly children: GameObj[];\r\n  private readonly tiles: Tile[][]; // indexed by q,r\r\n\r\n  constructor(\r\n    private readonly game: Game,\r\n    private readonly radius: number, // integer, number of tiles from center\r\n    acceptTile: TileFilter\r\n  ) {\r\n    this.tiles = [];\r\n    this.children = [];\r\n\r\n    const R = radius;\r\n    for (let q = -R; q <= R; q++) {\r\n      this.tiles[q + R] = [];\r\n\r\n      for (let r = -R; r <= R; r++) {\r\n        const s = -(q + r);\r\n\r\n        if (-R <= s && s <= R && acceptTile(q, r, s)) {\r\n          const isHome = q === 0 && Math.abs(r) === R;\r\n          const owner = game.players[isHome ? (r === R ? 1 : 2) : 0];\r\n          const isHomeAdjacent = Math.abs(q) <= 1 && Math.abs(s - r) >= 2;\r\n          const isMidTile = s === r;\r\n          const resourceMult = isHome || isMidTile ? 2 : isHomeAdjacent ? 0.5 : 1;\r\n          const tile = new Tile(game, owner, isHome, resourceMult, q, r);\r\n          this.tiles[q + R][r + R] = tile;\r\n          this.children.push(tile);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public tile(q: number, r: number): Tile | undefined {\r\n    const R = this.radius;\r\n    if (-R <= q && q <= R && -R <= r && r <= R) {\r\n      return this.tiles[q + R][r + R];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  public tileList(): Tile[] {\r\n    return this.children as Tile[];\r\n  }\r\n\r\n  public neighbours(tile: Tile): Tile[] {\r\n    return Tile.directions.map(dir => this.neighbour(tile, dir)).filter(t => !!t) as Tile[];\r\n  }\r\n\r\n  public neighbourClosestTo(tile: Tile, target: Tile): Tile {\r\n    const neighbours = this.neighbours(tile);\r\n    if (neighbours.length === 0) return target;\r\n\r\n    const dist = neighbours.map(n => Tile.distBetween(n, target));\r\n\r\n    let closest = 0;\r\n    for (let i = 1; i < neighbours.length; i++) {\r\n      if (dist[i] < dist[closest]) closest = i;\r\n    }\r\n    return neighbours[closest];\r\n  }\r\n\r\n  public neighbour(tile: Tile, direction: Vector3): Tile | undefined {\r\n    return this.tile(tile.coords.x + direction.x, tile.coords.y + direction.y);\r\n  }\r\n\r\n  public posToTile(pos: Vector3): Tile | undefined {\r\n    // see https://www.redblobgames.com/grids/hexagons/implementation.html#layout\r\n    const x = pos.x / config.tileSize;\r\n    const z = pos.z / config.tileSize;\r\n    const { q, r } = Tile.roundCoords((2.0 / 3.0) * x, (sqrt3 * z - x) / 3.0);\r\n    return this.tile(q, r);\r\n  }\r\n}\r\nconst sqrt3 = Math.sqrt(3);\r\n","import { Color3, Color4 } from '@babylonjs/core';\r\nimport config from './config';\r\nimport { Tile } from './tile';\r\nimport { Game } from './game';\r\nimport { GameObj, GameObjType, GameView, UnitProductionStrategy } from './types';\r\n\r\nexport class Player implements GameObj {\r\n  public readonly type = GameObjType.Player;\r\n  public viewMetaData: any;\r\n\r\n  public readonly stdTileColor: Color4;\r\n  public readonly homeTileColor: Color4;\r\n  public readonly fullUnitColor: Color4;\r\n  public readonly deadUnitColor: Color4;\r\n  public opponent: Player;\r\n\r\n  public homeTile: Tile;\r\n  public rallyTile: Tile | undefined;\r\n  public resourceCount: number;\r\n  public ups: UnitProductionStrategy;\r\n\r\n  constructor(\r\n    private readonly game: Game,\r\n    public readonly id: number,\r\n    public readonly name: string,\r\n    private readonly hue: number,\r\n    private readonly maxSaturation: number\r\n  ) {\r\n    this.stdTileColor = Player.color(hue, 0.4 * maxSaturation, 0.8);\r\n    this.homeTileColor = Player.color(hue, 0.8 * maxSaturation, 0.6);\r\n    this.fullUnitColor = Player.color(hue, 0.95 * maxSaturation, 0.95);\r\n    this.deadUnitColor = Player.color(hue, 0.4 * maxSaturation, 0.3, 0.3);\r\n\r\n    this.resourceCount = 0;\r\n    this.ups = config.defaultUPS;\r\n    this.homeTile = undefined!; // init'd on generate\r\n    this.rallyTile = undefined; // init'd on generate\r\n    this.opponent = undefined!; // init'd on generate\r\n  }\r\n\r\n  public generate(view: GameView) {\r\n    this.homeTile = this.game.board.tileList().find(t => t.owner === this && t.isHome)!;\r\n    this.opponent = this.game.players.find(p => p.id > 0 && p.id !== this.id)!;\r\n\r\n    view.generatePlayer(this);\r\n  }\r\n\r\n  public updateLogic(_view: GameView, _elapsed: number) {\r\n    // automatically spawn unit when there are enough resources\r\n    while (this.resourceCount >= config.unitCost) {\r\n      this.resourceCount -= config.unitCost;\r\n      this.game.spawnUnit(this, this.ups.nextUnitType(), this.homeTile);\r\n    }\r\n  }\r\n\r\n  public draw(view: GameView) {\r\n    view.drawPlayer(this);\r\n  }\r\n\r\n  public isAlive(): boolean {\r\n    return this.homeTile.owner === this;\r\n  }\r\n\r\n  public tileColor(isHome: boolean, healthProportion: number, selected: boolean): Color4 {\r\n    const saturation = (isHome ? 0.8 : 0.4) * healthProportion * this.maxSaturation;\r\n    const value = (isHome ? 0.6 : 0.8) + (selected ? 0.1 : 0);\r\n    return Player.color(this.hue, saturation, value);\r\n  }\r\n\r\n  private static color(hue: number, saturation: number, value: number, alpha: number = 1): Color4 {\r\n    const result = new Color3();\r\n    Color3.HSVtoRGBToRef(hue, saturation, value, result);\r\n\r\n    const { r, g, b } = result;\r\n    return new Color4(r, g, b, alpha);\r\n  }\r\n}\r\n","import { Board } from './board';\r\nimport config from './config';\r\nimport { Player } from './player';\r\nimport { Tile } from './tile';\r\nimport { GameObj, GameObjType, GameView, UnitType } from './types';\r\nimport { Unit, UnitState } from './unit';\r\n\r\nexport class Game implements GameObj {\r\n  public readonly type = GameObjType.Game;\r\n  public readonly name = 'Game';\r\n  public readonly children: GameObj[];\r\n  private view?: GameView; // cached from generate\r\n\r\n  public readonly players: Player[];\r\n  public readonly gaia: Player;\r\n  public readonly board: Board;\r\n  public aliveUnits: Unit[];\r\n  public winner: Player | undefined;\r\n\r\n  constructor() {\r\n    this.gaia = new Player(this, 0, 'Gaia', 180, 0.01);\r\n    const player1 = new Player(this, 1, 'Green', 120, 1);\r\n    const player2 = new Player(this, 2, 'Red', 0, 1);\r\n    this.players = [this.gaia, player1, player2];\r\n\r\n    this.board = new Board(this, 2, () => true);\r\n    this.aliveUnits = [];\r\n    this.winner = undefined;\r\n\r\n    this.children = [this.board, player1, player2];\r\n  }\r\n\r\n  public generate(view: GameView) {\r\n    this.view = view;\r\n  }\r\n\r\n  public updateLogic(_view: GameView, _elapsed: number) {\r\n    this.aliveUnits = this.children.filter(\r\n      child => child.type === GameObjType.Unit && (child as Unit).isAlive()\r\n    ) as Unit[];\r\n  }\r\n\r\n  public startGame() {\r\n    const [, first, second] = this.players;\r\n    const firstAdj = this.board.neighbours(first.homeTile);\r\n    const secondAdj = this.board.neighbours(second.homeTile);\r\n\r\n    const [off, def] = config.unitTypes;\r\n    this.spawnUnit(second, def, second.homeTile);\r\n    this.spawnUnit(first, def, first.homeTile);\r\n    this.spawnUnit(second, off, secondAdj[0]);\r\n    this.spawnUnit(first, off, firstAdj[1]);\r\n  }\r\n\r\n  public spawnUnit(owner: Player, unitType: UnitType, tile: Tile) {\r\n    const nextId = this.children.length;\r\n    const unit = new Unit(this, nextId, owner, unitType, tile, tile.toPos());\r\n    this.view && unit.generate(this.view);\r\n    this.children.push(unit);\r\n    this.aliveUnits.push(unit);\r\n  }\r\n\r\n  public running(): boolean {\r\n    if (!this.winner) {\r\n      const [, p1, p2] = this.players;\r\n      if (!p1.isAlive()) this.finishGame(p2);\r\n      else if (!p2.isAlive()) this.finishGame(p1);\r\n    }\r\n\r\n    return this.winner === undefined;\r\n  }\r\n\r\n  private finishGame(winner: Player) {\r\n    this.winner = winner;\r\n\r\n    for (let i = 0; i < this.children.length; i++) {\r\n      const child = this.children[i];\r\n      if (child.type === GameObjType.Unit) {\r\n        const unit = child as Unit;\r\n        unit.setState(unit.isAlive() && unit.owner === winner ? UnitState.won : UnitState.lost);\r\n      }\r\n    }\r\n  }\r\n\r\n  public canHeal(unit: Unit, tile: Tile): boolean {\r\n    return (\r\n      tile.isHome &&\r\n      unit.owner === tile.owner &&\r\n      tile.healthProportion() > config.tileControlThreshold\r\n    );\r\n  }\r\n\r\n  public allowSelect(gameObj: GameObj): boolean {\r\n    return gameObj.type === GameObjType.Tile;\r\n  }\r\n\r\n  private toggleRallyTile(player: Player, tile: Tile) {\r\n    player.rallyTile = player.rallyTile === tile ? undefined : tile;\r\n  }\r\n\r\n  public select(player: Player, gameObj: GameObj) {\r\n    if (gameObj.type === GameObjType.Tile) {\r\n      this.toggleRallyTile(player, gameObj as Tile);\r\n    }\r\n  }\r\n}\r\n","import React, { CSSProperties } from 'react';\r\nimport { animated } from 'react-spring';\r\nimport './OptionButton.css';\r\n\r\ntype OptionButtonProps = {\r\n  text: string;\r\n  active: boolean;\r\n  onClick: () => void;\r\n  style?: CSSProperties;\r\n};\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  marginTop: '0.5em',\r\n  marginLeft: '0.25em',\r\n  marginRight: '0.25em',\r\n  width: '8em',\r\n  height: '8em',\r\n  backgroundSize: 'contain',\r\n  outline: 'none',\r\n  boxShadow: 'none',\r\n  border: 0,\r\n};\r\n\r\nexport const OptionButton: React.FC<OptionButtonProps> = ({ text, active, onClick, style }) => {\r\n  const effectiveStyle = {\r\n    ...defaultStyle,\r\n    ...style,\r\n    backgroundColor: active ? 'white' : 'transparent',\r\n    transition: active\r\n      ? 'background-color 0.5s'\r\n      : 'background-color 5s cubic-bezier(.01,.80,.65,.93) 0s',\r\n  };\r\n  const className = 'option-button-' + (active ? 'active' : 'clickable');\r\n\r\n  return (\r\n    <animated.button style={effectiveStyle} onClick={onClick} className={className}>\r\n      {text}\r\n    </animated.button>\r\n  );\r\n};\r\n","import React, { CSSProperties, useEffect, useState } from 'react';\r\nimport { GuiGameView } from './guiGameView';\r\n\r\ntype OverLayMessageProps = {\r\n  view: GuiGameView;\r\n  style?: CSSProperties;\r\n  getMessage: (view: GuiGameView) => string;\r\n};\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  zIndex: 100,\r\n  color: 'whitesmoke',\r\n  margin: 'auto',\r\n  fontSize: '1em',\r\n};\r\n\r\nexport const OverLayMessage: React.FC<OverLayMessageProps> = ({ view, style, getMessage }) => {\r\n  const [msg, setMsg] = useState('');\r\n\r\n  useEffect(\r\n    view.useListenerEffect(() => setMsg(getMessage(view))),\r\n    [view, setMsg, getMessage]\r\n  );\r\n\r\n  const effectiveStyle = style ? { ...defaultStyle, ...style } : defaultStyle;\r\n\r\n  return <div style={effectiveStyle}>{msg}</div>;\r\n};\r\n","import React, { CSSProperties, useCallback, useEffect, useState } from 'react';\r\nimport { config } from '../../core';\r\nimport { UnitProductionStrategy } from '../../core/types';\r\nimport { GuiGameView } from './guiGameView';\r\nimport { OptionButton } from './OptionButton';\r\nimport { OverLayMessage } from './OverLayMessage';\r\n\r\ntype ControlPanelProps = {\r\n  // TODO\r\n  view: GuiGameView;\r\n  playerIndex: number;\r\n  style?: CSSProperties;\r\n};\r\n\r\nconst defaultStyle: CSSProperties = {\r\n  position: 'absolute',\r\n  zIndex: 99,\r\n  padding: '10px',\r\n  bottom: 0,\r\n  margin: 'auto',\r\n};\r\n\r\nexport const ControlPanel: React.FC<ControlPanelProps> = ({ view, playerIndex, style }) => {\r\n  const getStatus = useCallback(() => view.getPlayerStatus(playerIndex), [view, playerIndex]);\r\n\r\n  const [curUps, setCurUps] = useState<UnitProductionStrategy | undefined>(undefined);\r\n  useEffect(\r\n    view.useListenerEffect(() => setCurUps(view.getPlayerUPS(playerIndex))),\r\n    [view, setCurUps, playerIndex]\r\n  );\r\n\r\n  const effectiveStyle = style ? { ...defaultStyle, ...style } : defaultStyle;\r\n  return (\r\n    <div style={effectiveStyle}>\r\n      <OverLayMessage view={view} getMessage={getStatus} />\r\n      {config.unitProdStrategies.map(ups => (\r\n        <OptionButton\r\n          key={ups.id}\r\n          text=\"\"\r\n          active={ups === curUps}\r\n          style={{ backgroundImage: `url(\"/z-minus/img/${ups.imgName}-${playerIndex}.png\")` }}\r\n          onClick={() => view.setPlayerUPS(playerIndex, ups)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  AbstractMesh,\r\n  Color3,\r\n  Color4,\r\n  InstancedMesh,\r\n  Mesh,\r\n  MeshBuilder,\r\n  Scene,\r\n  SceneLoader,\r\n  StandardMaterial,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\nimport '@babylonjs/loaders';\r\nimport assert from 'assert';\r\nimport earcut from 'earcut';\r\nimport { Player, Tile, Unit } from '../../core';\r\nimport config from '../../core/config';\r\n\r\ntype LoadedMesh = Mesh & { z_loaded_index: number; z_color: boolean };\r\n\r\ntype DrawnAtom = (Mesh | InstancedMesh) & {\r\n  z_is_root: boolean;\r\n  z_index: number;\r\n  z_is_colorable: boolean;\r\n};\r\n\r\nexport class DrawnElement {\r\n  constructor(\r\n    private readonly instances: DrawnAtom[],\r\n    private readonly globalScale: number,\r\n    private readonly globalRotY: number\r\n  ) {}\r\n\r\n  public setColour(colour: Color4) {\r\n    for (let i = 0; i < this.instances.length; i++) {\r\n      if (this.instances[i].z_is_colorable) {\r\n        this.instances[i].instancedBuffers.color = colour;\r\n      }\r\n    }\r\n  }\r\n\r\n  public setScale(scale: number) {\r\n    for (let i = 0; i < this.instances.length; i++) {\r\n      if (this.instances[i].z_is_root) {\r\n        this.instances[i].scaling.setAll(scale * this.globalScale);\r\n      }\r\n    }\r\n  }\r\n\r\n  public setPosition(position: Vector3) {\r\n    for (let i = 0; i < this.instances.length; i++) {\r\n      if (this.instances[i].z_is_root) {\r\n        this.instances[i].position.copyFrom(position);\r\n      }\r\n    }\r\n  }\r\n\r\n  public setRotationY(rotY: number) {\r\n    for (let i = 0; i < this.instances.length; i++) {\r\n      this.instances[i].rotation.y = this.globalRotY + rotY;\r\n    }\r\n  }\r\n\r\n  public setVisible(visible: boolean) {\r\n    for (let i = 0; i < this.instances.length; i++) {\r\n      if (this.instances[i].z_is_root) {\r\n        this.instances[i].isVisible = visible;\r\n      }\r\n    }\r\n  }\r\n\r\n  public setPickable(pickable: boolean) {\r\n    for (let i = 0; i < this.instances.length; i++) {\r\n      if (this.instances[i].z_is_root) {\r\n        this.instances[i].isPickable = pickable;\r\n      }\r\n    }\r\n  }\r\n\r\n  public setMetaData(metaData: any) {\r\n    for (let i = 0; i < this.instances.length; i++) {\r\n      this.instances[i].metadata = metaData;\r\n    }\r\n  }\r\n\r\n  static toDrawnAtom(inst: InstancedMesh | Mesh, index: number, colorable: boolean): DrawnAtom {\r\n    const result = inst as DrawnAtom;\r\n    result.z_is_root = !inst.parent;\r\n    result.z_index = index;\r\n    result.z_is_colorable = colorable;\r\n    return result;\r\n  }\r\n\r\n  public static fromSingle(inst: InstancedMesh): DrawnElement {\r\n    return new DrawnElement([this.toDrawnAtom(inst, 0, true)], 1, 0);\r\n  }\r\n}\r\n\r\nclass MeshFactory {\r\n  private prototype: Mesh | undefined;\r\n\r\n  constructor(private readonly factory: (scene: Scene) => Mesh) {\r\n    this.prototype = undefined;\r\n  }\r\n\r\n  public getMeshInstance(scene: Scene, name: string, position?: Vector3): DrawnElement {\r\n    if (!this.prototype) {\r\n      this.prototype = this.factory(scene);\r\n      this.prototype.isVisible = false; // hide prototype\r\n      this.prototype.isPickable = false;\r\n    }\r\n\r\n    const inst = this.prototype.createInstance(name);\r\n    inst.position.copyFrom(position || this.prototype.position);\r\n    inst.isVisible = true;\r\n    inst.isPickable = true;\r\n    return DrawnElement.fromSingle(inst);\r\n  }\r\n}\r\n\r\nclass LoadedMeshFactory {\r\n  private prototypes: LoadedMesh[] | undefined;\r\n\r\n  constructor(\r\n    private readonly fileName: string,\r\n    private readonly scale: number,\r\n    private readonly rotY: number,\r\n    private readonly colorAll: boolean,\r\n    private readonly scene: Scene\r\n  ) {\r\n    this.prototypes = undefined;\r\n  }\r\n\r\n  private process(meshes: AbstractMesh[]): LoadedMesh[] {\r\n    this.prototypes = meshes as LoadedMesh[];\r\n    for (let i = 0; i < this.prototypes.length; i++) {\r\n      const mesh = this.prototypes[i];\r\n      if (!mesh.parent) {\r\n        mesh.scaling.setAll(this.scale);\r\n      }\r\n\r\n      if (\r\n        (this.colorAll || (mesh.material && mesh.material.name === 'Player Primary')) &&\r\n        mesh.geometry &&\r\n        mesh.geometry.getTotalVertices() > 0\r\n      ) {\r\n        mesh.registerInstancedBuffer('color', 4);\r\n        mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\r\n        mesh.useVertexColors = true;\r\n        mesh.z_color = true;\r\n      }\r\n\r\n      mesh.z_loaded_index = i;\r\n      mesh.isVisible = false;\r\n      mesh.isPickable = false;\r\n    }\r\n    return this.prototypes;\r\n  }\r\n\r\n  public load(): Promise<LoadedMesh[]> {\r\n    return SceneLoader.ImportMeshAsync(\r\n      '',\r\n      'z-minus/assets/',\r\n      this.fileName,\r\n      this.scene\r\n    ).then(({ meshes }) => this.process(meshes));\r\n  }\r\n\r\n  public getMeshInstance(name: string, position?: Vector3): DrawnElement {\r\n    assert(!!this.prototypes, 'attempting to call getMeshInstance before models loaded');\r\n\r\n    const meshes = this.prototypes.map((m, i) =>\r\n      DrawnElement.toDrawnAtom(\r\n        m.geometry && m.geometry.getTotalVertices() > 0\r\n          ? m.createInstance(`${name}[${i}]`)\r\n          : new Mesh(`${name}[${i}]`, this.scene),\r\n        i,\r\n        m.z_color\r\n      )\r\n    );\r\n\r\n    for (let i = 0; i < meshes.length; i++) {\r\n      if (meshes[i].z_is_colorable) {\r\n        meshes[i].instancedBuffers.color = new Color4(1, 1, 1, 1);\r\n      }\r\n\r\n      meshes[i].isVisible = true;\r\n      meshes[i].isPickable = true;\r\n\r\n      const parent = this.prototypes[i].parent as LoadedMesh;\r\n      if (parent) {\r\n        meshes[i].parent = meshes[parent.z_loaded_index];\r\n      }\r\n    }\r\n    if (position) {\r\n      meshes[0].position.copyFrom(position);\r\n    }\r\n    return new DrawnElement(meshes, this.scale, this.rotY);\r\n  }\r\n}\r\n\r\nclass KeyedMeshFactory<T> {\r\n  private readonly prototype: { [key: number]: Mesh };\r\n\r\n  constructor(private readonly factory: (scene: Scene, t: T) => Mesh) {\r\n    this.prototype = {};\r\n  }\r\n\r\n  public getMeshInstance(\r\n    scene: Scene,\r\n    key: number,\r\n    t: T,\r\n    name: string,\r\n    position?: Vector3\r\n  ): DrawnElement {\r\n    if (!this.prototype[key]) {\r\n      const mesh = this.factory(scene, t);\r\n      mesh.isVisible = false; // hide prototype\r\n      mesh.isPickable = false;\r\n      this.prototype[key] = mesh;\r\n    }\r\n\r\n    const proto = this.prototype[key];\r\n    const inst = proto.createInstance(name);\r\n    inst.position.copyFrom(position || proto.position);\r\n    inst.isVisible = true;\r\n    inst.isPickable = true;\r\n    return DrawnElement.fromSingle(inst);\r\n  }\r\n}\r\n\r\nfunction tileFactory(scene: Scene): Mesh {\r\n  const options = {\r\n    radius: config.drawnTileSize,\r\n    tessellation: 6,\r\n    sideOrientation: Mesh.DOUBLESIDE,\r\n  };\r\n  const mesh = MeshBuilder.CreateDisc(`tileMesh`, options, scene);\r\n  mesh.rotation.x = Math.PI * 0.5; // rotate from XY plane to XZ\r\n\r\n  const material = new StandardMaterial(`tileMeshMaterial`, scene);\r\n  material.specularColor = new Color3(0.5, 0.6, 0.87);\r\n  mesh.material = material;\r\n\r\n  mesh.receiveShadows = true;\r\n  mesh.registerInstancedBuffer('color', 4);\r\n  mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\r\n\r\n  return mesh;\r\n}\r\n\r\nfunction resourceFactory(scene: Scene): Mesh {\r\n  const options = {\r\n    width: config.drawnTileSize * 0.07,\r\n    depth: 0.05,\r\n    height: config.drawnTileSize * 0.07,\r\n  };\r\n  const mesh = MeshBuilder.CreateBox(`resourceMesh`, options, scene);\r\n\r\n  mesh.rotation.x = Math.PI * 0.5; // rotate from XY plane to XZ\r\n\r\n  const material = new StandardMaterial(`resMeshMaterial`, scene);\r\n  material.specularColor = new Color3(0.5, 0.6, 0.87);\r\n  material.diffuseColor = new Color3(1, 0.9, 0);\r\n  mesh.material = material;\r\n\r\n  mesh.receiveShadows = false;\r\n  return mesh;\r\n}\r\n\r\nfunction unitFactory(scene: Scene, unit: Unit): Mesh {\r\n  const material = new StandardMaterial(`unitMeshMaterial`, scene);\r\n  material.specularColor = new Color3(0.8, 0.8, 0.9);\r\n\r\n  const mesh = unit.unitType.meshFactory(scene, 0.4, 0.1);\r\n  mesh.material = material;\r\n  mesh.isVisible = false; // hide prototype, only instanced meshes are shown\r\n\r\n  mesh.registerInstancedBuffer('color', 4);\r\n  mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\r\n\r\n  return mesh;\r\n}\r\n\r\nfunction rallyFlagFactory(scene: Scene): Mesh {\r\n  const depth = 0.1;\r\n  const dx = depth * 0.5;\r\n  const ph = config.drawnTileSize * 0.75; // pole height\r\n  const fh = ph * 0.55; // flag height\r\n  const fw = ph - fh;\r\n  const shape: Vector3[] = [\r\n    new Vector3(-dx, 0, 0),\r\n    new Vector3(dx, 0, 0),\r\n    new Vector3(dx, 0, fh),\r\n    new Vector3(fw, 0, fh),\r\n    new Vector3(fw, 0, ph),\r\n    new Vector3(dx, 0, ph),\r\n    new Vector3(-dx, 0, ph),\r\n  ];\r\n\r\n  const mesh = MeshBuilder.ExtrudePolygon('rallyFlagMesh', { shape, depth }, scene, earcut);\r\n  mesh.rotation.x = Math.PI * -0.5; // rotate from XY plane to XZ\r\n\r\n  const material = new StandardMaterial(`rallyFlagMaterial`, scene);\r\n  material.specularColor = new Color3(0.5, 0.6, 0.87);\r\n  mesh.material = material;\r\n\r\n  mesh.receiveShadows = false;\r\n  mesh.registerInstancedBuffer('color', 4);\r\n  mesh.instancedBuffers.color = new Color4(1, 1, 1, 1);\r\n\r\n  return mesh;\r\n}\r\n\r\nexport class MeshCache {\r\n  private tileFactory: MeshFactory;\r\n  private resourceFactory: MeshFactory;\r\n  private rallyFlagFactory: MeshFactory;\r\n  private unitFactory: KeyedMeshFactory<Unit>;\r\n  private spireFactory: LoadedMeshFactory;\r\n  private charlieFactory: LoadedMeshFactory;\r\n  private offenseFactory: LoadedMeshFactory;\r\n  private deltaFactory: LoadedMeshFactory;\r\n\r\n  constructor(private readonly scene: Scene) {\r\n    this.tileFactory = new MeshFactory(tileFactory);\r\n    this.resourceFactory = new MeshFactory(resourceFactory);\r\n    this.rallyFlagFactory = new MeshFactory(rallyFlagFactory);\r\n    this.unitFactory = new KeyedMeshFactory<Unit>(unitFactory);\r\n    this.spireFactory = new LoadedMeshFactory('spire.gltf', 0.2, 0, true, scene);\r\n    this.charlieFactory = new LoadedMeshFactory('charlie.glb', 0.2, 0, true, scene);\r\n    this.offenseFactory = new LoadedMeshFactory('offense.glb', 0.25, 0, true, scene);\r\n    this.deltaFactory = new LoadedMeshFactory('delta.glb', 0.2, 0, false, scene);\r\n  }\r\n\r\n  public loadAll(): Promise<MeshCache> {\r\n    return this.spireFactory\r\n      .load()\r\n      .then(() => this.charlieFactory.load())\r\n      .then(() => this.offenseFactory.load())\r\n      .then(() => this.deltaFactory.load())\r\n      .then(() => this);\r\n  }\r\n\r\n  public makeTileMesh(tile: Tile): DrawnElement {\r\n    return this.tileFactory.getMeshInstance(this.scene, tile.name, tile.toPos());\r\n  }\r\n\r\n  public makeResourceMesh(tile: Tile, index: number): DrawnElement {\r\n    const pos = tile.toPosOffset(Tile.directions[index], 0.3);\r\n    const inst = this.resourceFactory.getMeshInstance(this.scene, `${tile.name}[${index}]`, pos);\r\n    inst.setRotationY((index * Math.PI) / 6);\r\n    return inst;\r\n  }\r\n\r\n  public makeRallyFlagMesh(player: Player): DrawnElement {\r\n    const name = `${player.name}/rally`;\r\n    const inst = this.rallyFlagFactory.getMeshInstance(this.scene, name);\r\n    inst.setPickable(false);\r\n    return inst;\r\n  }\r\n\r\n  public makeUnitMesh(unit: Unit): DrawnElement {\r\n    const { name, position, unitType, owner } = unit;\r\n\r\n    const inst =\r\n      unitType.id === 0\r\n        ? this.offenseFactory.getMeshInstance(name, position)\r\n        : this.deltaFactory.getMeshInstance(name, position);\r\n    //this.unitFactory.getMeshInstance(this.scene, unitType.id, unit, name, position);\r\n\r\n    inst.setColour(owner.fullUnitColor);\r\n    return inst;\r\n  }\r\n}\r\n","import {\r\n  ArcRotateCamera,\r\n  Color3,\r\n  HemisphericLight,\r\n  Nullable,\r\n  Scene,\r\n  Vector3,\r\n} from '@babylonjs/core';\r\nimport '@babylonjs/loaders';\r\nimport { Game, Player, Tile, Unit } from '../../core';\r\nimport config from '../../core/config';\r\nimport { GameObj, GameView, traverseInOrder, UnitProductionStrategy } from '../../core/types';\r\nimport { countIf } from '../../util/util';\r\nimport { MeshCache, DrawnElement } from './meshCache';\r\n\r\nexport type GuiListener = () => void;\r\n\r\nexport class GuiGameView implements GameView {\r\n  private generated: boolean;\r\n  private scene: Scene;\r\n  private meshCache: MeshCache;\r\n  private listeners: GuiListener[];\r\n\r\n  private elapsedSinceState: number = 0;\r\n  private elapsedSinceUI: number = 0;\r\n  private hovering: Nullable<GameObj> = null;\r\n\r\n  constructor(private readonly game: Game) {\r\n    this.listeners = [];\r\n    this.scene = undefined!; // set on generate\r\n    this.meshCache = undefined!; // set on generate\r\n    this.generated = false;\r\n  }\r\n\r\n  public generate(scene: Scene) {\r\n    if (this.generated) return;\r\n\r\n    scene.useRightHandedSystem = true; // required for .gltf imports + instancing to work correctly\r\n\r\n    this.scene = scene;\r\n    this.meshCache = new MeshCache(this.scene);\r\n\r\n    this.scene.ambientColor = new Color3(1, 1, 1);\r\n\r\n    const camera = new ArcRotateCamera('camera1', 0, 0, 10, new Vector3(0, 6, 16), this.scene);\r\n    camera.lowerBetaLimit = 0.1;\r\n    camera.upperBetaLimit = (Math.PI / 2) * 0.8;\r\n    camera.lowerRadiusLimit = 10;\r\n    camera.upperRadiusLimit = 100;\r\n    camera.setTarget(Vector3.Zero());\r\n\r\n    const canvas = this.scene.getEngine().getRenderingCanvas()!;\r\n    camera.attachControl(canvas, true);\r\n\r\n    const lights = [\r\n      new HemisphericLight('light', new Vector3(0, 1, -2), this.scene),\r\n      new HemisphericLight('light', new Vector3(1, 1, 1), this.scene),\r\n      new HemisphericLight('light', new Vector3(-1, 1, 1), this.scene),\r\n    ];\r\n    for (let i = 0; i < lights.length; i++) {\r\n      lights[i].intensity = 0.4;\r\n    }\r\n\r\n    // TODO SM Shadows look poor, needs improvement\r\n    // this.shadows = lights.map((l) => new ShadowGenerator(1024, l));\r\n    // for (let i = 0; i < this.shadows.length; i++) {\r\n    //   this.shadows[i].usePoissonSampling = true; // TODO SM expensive\r\n    // }\r\n\r\n    this.scene.onPointerPick = (evt, info) => {\r\n      const mesh = info.pickedMesh;\r\n      if (mesh && mesh.metadata) {\r\n        const playerIndex = evt.button === 0 ? 1 : 2;\r\n        const player = this.game.players[playerIndex];\r\n        this.game.select(player, mesh.metadata as GameObj);\r\n      }\r\n    };\r\n\r\n    this.meshCache.loadAll().then(() => {\r\n      traverseInOrder(this.game, o => o.generate && o.generate(this));\r\n\r\n      this.game.startGame();\r\n      this.generated = true;\r\n    });\r\n  }\r\n\r\n  private ifElapsed(\r\n    lastElapsed: number,\r\n    newElapsed: number,\r\n    elapsedLimit: number,\r\n    action: (elapsed: number) => void\r\n  ): number {\r\n    const curElapsed = lastElapsed + newElapsed;\r\n    if (curElapsed > elapsedLimit) {\r\n      action.call(this, curElapsed);\r\n      return 0;\r\n    }\r\n    return curElapsed;\r\n  }\r\n\r\n  public render() {\r\n    if (!this.generated) return; // not yet generated\r\n\r\n    const pick = this.scene.pick(this.scene.pointerX, this.scene.pointerY);\r\n\r\n    let hovering = pick && pick.hit && pick.pickedMesh && pick.pickedMesh.metadata;\r\n    if (hovering && !this.game.allowSelect(hovering)) hovering = this.hovering;\r\n    this.hovering = hovering;\r\n\r\n    // if its been more than 50ms since last update, either we're on a really slow machine,\r\n    //  or we've paused for some reason (e.g. inactive tab). Either way, don't attempt to\r\n    //  simulate physics for all elapsed time, it would result in units moving too much and\r\n    //  breaking through collision barriers\r\n    const maxElapsedMillis = 50;\r\n    const actualElapsedMillis = this.scene.getEngine().getDeltaTime();\r\n    const elapsedMillis = Math.min(maxElapsedMillis, actualElapsedMillis);\r\n    const elapsed = elapsedMillis / 1000.0;\r\n\r\n    this.elapsedSinceState = this.ifElapsed(\r\n      this.elapsedSinceState,\r\n      elapsed,\r\n      config.minDurationState,\r\n      this.updateState\r\n    );\r\n\r\n    this.elapsedSinceUI = this.ifElapsed(\r\n      this.elapsedSinceUI,\r\n      elapsed,\r\n      config.minDurationUI,\r\n      this.updateUI\r\n    );\r\n\r\n    traverseInOrder(this.game, o => {\r\n      o.updateFrame && o.updateFrame(this, elapsed);\r\n      o.draw && o.draw(this);\r\n    });\r\n  }\r\n\r\n  private updateState(elapsed: number) {\r\n    if (this.game.running()) {\r\n      traverseInOrder(this.game, o => o.updateLogic && o.updateLogic(this, elapsed));\r\n    }\r\n  }\r\n\r\n  private updateUI(_elapsed: number) {\r\n    for (let i = 0; i < this.listeners.length; i++) {\r\n      this.listeners[i]();\r\n    }\r\n  }\r\n\r\n  private addListener(listener: GuiListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  private removeListener(listener: GuiListener) {\r\n    this.listeners = this.listeners.filter(lis => lis !== listener);\r\n  }\r\n\r\n  public useListenerEffect(listener: GuiListener) {\r\n    return () => {\r\n      this.addListener(listener);\r\n      return () => this.removeListener(listener);\r\n    };\r\n  }\r\n\r\n  public generateUnit(unit: Unit) {\r\n    const mesh = this.meshCache.makeUnitMesh(unit);\r\n    unit.viewMetaData = mesh;\r\n    mesh.setMetaData(unit);\r\n  }\r\n\r\n  public drawUnit(unit: Unit) {\r\n    const mesh = unit.viewMetaData as DrawnElement;\r\n\r\n    if (!unit.isAlive()) {\r\n      mesh.setColour(unit.owner.deadUnitColor);\r\n    }\r\n\r\n    mesh.setScale(0.5 + 0.5 * unit.healthProportion());\r\n    mesh.setPosition(unit.position);\r\n    mesh.setRotationY(unit.rotY);\r\n  }\r\n\r\n  public generateTile(tile: Tile) {\r\n    const mesh = this.meshCache.makeTileMesh(tile);\r\n    tile.viewMetaData = mesh;\r\n    mesh.setMetaData(tile);\r\n\r\n    const r = tile.resMult;\r\n    const d = r < 0.75 ? 3 : 2;\r\n    const a = (tile.coords.x + d) % d;\r\n    for (let i = 0; i < Tile.directions.length; i++) {\r\n      if (r > 1.5 || (r < 0.75 && i % 3 === a) || (r >= 0.75 && i % 2 === a)) {\r\n        this.meshCache.makeResourceMesh(tile, i);\r\n      }\r\n    }\r\n\r\n    // const mmesh = MeshBuilder.CreatePlane(\r\n    //   `tile${this.coords.x}.${this.coords.y}`,\r\n    //   { size: 2 },\r\n    //   scene\r\n    // );\r\n    // mmesh.rotation.x = Math.PI * 0.5;\r\n    // mmesh.parent = this.mesh.parent;\r\n    // mmesh.position = this.mesh.position.clone();\r\n    // mmesh.position.y += 0.1;\r\n    //\r\n    // const texture = AdvancedDynamicTexture.CreateForMesh(mmesh);\r\n    // let text = ''; //`q ${this.coords.x},   r ${this.coords.y},   s ${this.coords.z}`;\r\n    // if (this.resMult !== 1) {\r\n    //   text += ' ==> ' + this.resMult + ' <==';\r\n    // }\r\n    //\r\n    // const button = Button.CreateSimpleButton(\r\n    //   `but${this.coords.x}.${this.coords.y}`,\r\n    //   text\r\n    // );\r\n    // button.width = 1;\r\n    // button.height = 0.4;\r\n    // button.color = 'white';\r\n    // button.fontSize = 150;\r\n    // button.background = 'green';\r\n    // texture.addControl(button);\r\n  }\r\n\r\n  public drawTile(tile: Tile) {\r\n    (tile.viewMetaData as DrawnElement).setColour(\r\n      tile.owner.tileColor(tile.isHome, tile.healthProportion(), this.hovering === tile)\r\n    );\r\n  }\r\n\r\n  public generatePlayer(player: Player) {\r\n    const mesh = this.meshCache.makeRallyFlagMesh(player);\r\n    mesh.setColour(player.homeTileColor);\r\n    player.viewMetaData = mesh;\r\n    mesh.setMetaData(player);\r\n  }\r\n\r\n  public drawPlayer(player: Player) {\r\n    const mesh = player.viewMetaData as DrawnElement;\r\n\r\n    mesh.setVisible(!!player.rallyTile);\r\n    if (player.rallyTile) {\r\n      const pos = player.rallyTile.toPos().clone();\r\n\r\n      if (player.rallyTile === player.opponent.rallyTile) {\r\n        // both flags on same tile, move flag closer to home base\r\n        const dir = player.id === 1 ? 1 : -1;\r\n        pos.x += config.drawnTileSize * 0.15 * dir;\r\n        pos.z += config.drawnTileSize * 0.25 * dir;\r\n      }\r\n      mesh.setPosition(pos);\r\n    }\r\n  }\r\n\r\n  public gameWinnerMessage(): string {\r\n    return this.game.winner ? `${this.game.winner.name} wins!` : '';\r\n  }\r\n\r\n  public getFPS(): number {\r\n    return Math.round(this.scene.getEngine().getFps());\r\n  }\r\n\r\n  public getPlayerStatus(index: number): string {\r\n    const player = this.game.players[index];\r\n    const resCount = Math.floor(player.resourceCount);\r\n    const tileCount = countIf(this.game.board.tileList(), u => u.owner === player);\r\n    const unitCount = countIf(this.game.aliveUnits, u => u.owner === player);\r\n    return `${player.name}: $${resCount}, ${tileCount} tile(s), ${unitCount} unit(s)`;\r\n  }\r\n\r\n  public getPlayerUPS(index: number): UnitProductionStrategy {\r\n    return this.game.players[index].ups;\r\n  }\r\n  public setPlayerUPS(index: number, ups: UnitProductionStrategy) {\r\n    this.game.players[index].ups = ups;\r\n    this.updateUI(0);\r\n  }\r\n}\r\n","import SceneComponent from 'babylonjs-hook';\r\nimport React, { CSSProperties, useMemo } from 'react';\r\nimport { Game } from '../../core';\r\nimport { ControlPanel } from './ControlPanel';\r\nimport { GuiGameView } from './guiGameView';\r\nimport { OverLayMessage } from './OverLayMessage';\r\n\r\ntype GuiGameViewComponentProps = {\r\n  game: Game;\r\n};\r\n\r\nfunction getFPS(view: GuiGameView) {\r\n  return `FPS: ${view.getFPS()}`;\r\n}\r\nconst fpsStyle: CSSProperties = {\r\n  position: 'absolute',\r\n  top: 0,\r\n  right: 0,\r\n  opacity: 0.8,\r\n  padding: '0.5em',\r\n};\r\n\r\nfunction getWinnerMessage(view: GuiGameView) {\r\n  return view.gameWinnerMessage();\r\n}\r\nconst winnerStyle: CSSProperties = {\r\n  position: 'absolute',\r\n  top: '25vh',\r\n  left: 0,\r\n  right: 0,\r\n  fontSize: '6em',\r\n  textAlign: 'center',\r\n  textShadow: '#111 3px 3px',\r\n};\r\n\r\nconst p1Border = '1px dashed forestgreen';\r\nconst p1Style: CSSProperties = {\r\n  left: 0,\r\n  textAlign: 'left',\r\n  borderRight: p1Border,\r\n  borderTop: p1Border,\r\n};\r\n\r\nconst p2Border = '1px dashed red';\r\nconst p2Style: CSSProperties = {\r\n  right: 0,\r\n  textAlign: 'right',\r\n  borderLeft: p2Border,\r\n  borderTop: p2Border,\r\n};\r\n\r\nconst GuiGameViewComponent: React.FC<GuiGameViewComponentProps> = ({ game }) => {\r\n  const view = useMemo(() => new GuiGameView(game), [game]);\r\n\r\n  return (\r\n    <>\r\n      <OverLayMessage view={view} style={winnerStyle} getMessage={getWinnerMessage} />\r\n      <OverLayMessage view={view} style={fpsStyle} getMessage={getFPS} />\r\n      <SceneComponent\r\n        antialias\r\n        onSceneReady={scene => view.generate(scene)}\r\n        onRender={() => view.render()}\r\n        id=\"game-canvas\"\r\n      />\r\n      <ControlPanel view={view} playerIndex={1} style={p1Style} />\r\n      <ControlPanel view={view} playerIndex={2} style={p2Style} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GuiGameViewComponent;\r\n","// Taken from https://gist.github.com/gpolyn/9a2ced1e6f4f12375f7430cfcc2ba6b6\r\n\r\nexport default (workerFactory, size) => new WorkerPool(workerFactory, size);\r\n\r\nclass WorkerPool {\r\n  constructor(workerFactory, size) {\r\n    let worker = (this.workerFactory = workerFactory)();\r\n    this.poolSize = size || 4;\r\n    this.used = 1;\r\n    this.pool = [worker];\r\n    this.jobs = [];\r\n    for (let i in worker)\r\n      if (worker.hasOwnProperty(i) && typeof worker[i] === 'function') {\r\n        this[i] = this._method(i); // proxy all methods available on the worker\r\n      }\r\n  }\r\n  _method(name) {\r\n    return (...args) => this._queueJob(name, args);\r\n  }\r\n  _queueJob(method, args) {\r\n    return new Promise((y, n) => {\r\n      this.jobs.push({ method, args, y, n });\r\n      this._nextJob();\r\n    });\r\n  }\r\n  _nextJob() {\r\n    let worker = this.pool.pop();\r\n    if (!worker) {\r\n      if (this.used >= this.poolSize) return;\r\n      this.used++;\r\n      worker = this.workerFactory();\r\n    }\r\n    const job = this.jobs.shift();\r\n    if (!job) return;\r\n    worker[job.method](...job.args)\r\n      .then(job.y)\r\n      .catch(job.n)\r\n      .finally(() => {\r\n        this.pool.push(worker);\r\n        this._nextJob();\r\n      });\r\n  }\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport { Game } from '../../core';\r\nimport GameGUI from './GuiGameViewComponent';\r\n\r\nimport './GuiApp.css';\r\n\r\nexport const GuiApp: React.FC = () => {\r\n  const game = useMemo(() => new Game(), []);\r\n  return (\r\n    <div className=\"fullscreen\">\r\n      <GameGUI game={game} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport './HeadlessApp.css';\r\n\r\n// @ts-ignore\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport WebWorker from 'workerize-loader!./webWorker';\r\nimport WorkerPool from './workerize-pool.js';\r\n\r\nconst coreCount = +(process.env.REACT_APP_HEADLESS_CORE_COUNT || 4);\r\n// @ts-ignore\r\nconst pool = WorkerPool(WebWorker, coreCount);\r\n\r\nconst resultNames = ['Draw', 'Green Wins', 'Red Wins'];\r\nconst gamesPerLoop = 25;\r\nconst loopCount = 400;\r\nconst gameCount = gamesPerLoop * loopCount;\r\n\r\nfunction initResults(): number[][] {\r\n  return [\r\n    [0, 0, 0],\r\n    [0, 0, 0],\r\n  ];\r\n}\r\n\r\nfunction combineResults(prev: number[][], cur: any): number[][] {\r\n  const [prevWinCounts, prevDurations] = prev;\r\n  const { winCount, durations } = cur;\r\n\r\n  const newWinCounts = [0, 0, 0];\r\n  const newDurations = [0, 0, 0];\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    const pwc = prevWinCounts[i];\r\n    const wc = winCount[i];\r\n    const pd = prevDurations[i];\r\n    const d = durations[i];\r\n    newWinCounts[i] = pwc + wc;\r\n    newDurations[i] = (pd * prevWinCounts[i] + d * wc) / Math.max(1, newWinCounts[i]);\r\n  }\r\n\r\n  return [newWinCounts, newDurations];\r\n}\r\n\r\nexport const HeadlessApp: React.FC = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [results, setResults] = useState<number[][]>(initResults());\r\n\r\n  const [counts, durations] = results;\r\n  const doneCount = counts[0] + counts[1] + counts[2];\r\n\r\n  useEffect(() => {\r\n    if (loading && doneCount >= gameCount) {\r\n      setLoading(false);\r\n    }\r\n  }, [loading, setLoading, doneCount]);\r\n\r\n  const onClick = () => {\r\n    setLoading(true);\r\n    setResults(initResults());\r\n    for (let i = 0; i < loopCount; i++) {\r\n      // @ts-ignore\r\n      pool.simulate(gamesPerLoop).then((result: any) => {\r\n        setResults(res => combineResults(res, result));\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"headless-app\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Result</th>\r\n            <th>Count</th>\r\n            <th>Duration</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {resultNames.map((name, i) => (\r\n            <tr key={name}>\r\n              <td>{name}</td>\r\n              <td>{counts[i]}</td>\r\n              <td>{Math.round(durations[i])}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <td colSpan={3}>\r\n              <button onClick={onClick} disabled={loading}>\r\n                {loading\r\n                  ? `Simulating... ${doneCount}/${gameCount}`\r\n                  : `Simulate ${gameCount} games!`}\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tfoot>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { HeadlessApp, GuiApp } from './ui';\r\n\r\nconst headless = process.env.REACT_APP_HEADLESS === 'true';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>{headless ? <HeadlessApp /> : <GuiApp />}</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}