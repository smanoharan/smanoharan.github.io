{"name":"Projects","tagline":"Siva Manoharan","body":"All projects are licensed under [LGPL](http://www.gnu.org/licenses/lgpl.html) unless otherwise stated.\r\n\r\n***\r\n# 2013 #\r\n\r\n## Ray Tracer ##\r\nIndividual side project.\r\nSource: http://github.com/smanoharan/go-raytracer/\r\n\r\nA simple RayTracer using the BlinnPhong shader, implemented in Go.\r\n\r\nSupported features:\r\n* Light sources: point and directional\r\n* Lighting/Material properties: Diffuse colour, Specular colour and Shininess \r\n* Primitives: Sphere only\r\n* Soft shadows\r\n* Anti-aliasing\r\n\r\n## Image Processing Library ##\r\nIndividual side project, under construction. \r\nSource: http://github.com/smanoharan/go-img-proc/\r\n\r\nBasic Image Processing library, implemented in Go.\r\n\r\nCurrently supports:\r\n* Mean Filtering\r\n* Gaussian Filtering\r\n* Laplacians (3 variants)\r\n\r\n***\r\n\r\n# 2012 #\r\n\r\n## AdaProp ##\r\nProject developed as part of Honours Project (COMP520: Report of an Investigation).\r\nWritten in Java, using the [WEKA](http://www.cs.waikato.ac.nz/ml/weka/) framework.\r\nSource: http://github.com/smanoharan/adaprop/\r\n\r\nMI (Multi-instance) learning is machine learning over MI data, where the instances are grouped together into labelled bags. An approach to handling MI data is propositionalisation, where each bag is converted into single feature vector, which can then be used with standard learning algorithms such as SVMs and Neural Networks.\r\n\r\nThe aim of this project is to explore adaptive propositionalisation, where the propositionalisation process adapts to the specific single instance learner being used. Application of this technique to the image classification problem have also been considered.\r\n\r\n## Turing Machine Verifier ##\r\nIndividual side project, developed for use by students of COMP235: Logic and Computation.\r\nSource: http://github.com/smanoharan/235-lab-verifier/\r\n\r\nWeb based automatic verifier for the Turing Machines in COMP235 Labs.\r\nWritten in Java using the [Play Framework](http://www.playframework.com/).\r\nCurrently hosted at: http://comp235labs.herokuapp.com\r\n\r\nSupported features:\r\n* Allows testing each machine with an arbitrary number of test inputs.\r\n* Checks for Non-Determinism, Tape-OutOfBound errors and Alphabet constraints.\r\n* Shows an overall summary of results.\r\n\r\n***\r\n# 2011 #\r\n\r\n## Fix Set Quasi Order Generator ##\r\nProject developed for 2011/2012 summer research work.\r\nSource: https://github.com/smanoharan/fix-set-quasi-order-generator/\r\n\r\nA software package for generating all fix-orders of any given group (the abstract algebraic structure) and visualising the lattice of all fix-orders as a Hasse diagram. \r\n\r\nResults are hosted at: http://www.math.waikato.ac.nz/~stokes/data/\r\n\r\n\r\n## Kinect Sign Language Learner ##\r\nA group project, developed for COMP314: Software Engineering Project.\r\nSource: http://github.com/smanoharan/314Kinect/\r\n\r\nUse Case:\r\n1. Instructors train any sign (or any arbitrary gesture) by performing the sign a few (5 or so) times to the software (in record mode).\r\n2. The software then \"learns\" the sign (by modelling the sign via Hidden Markov Models) and saves it to disk.\r\n3. A student performs the learned sign to the software (in evaluate mode).\r\n4. The software gives feedback (a score out of 10) to the student, based on how well the student performance matched that of the instructor.\r\n\r\n\r\nAuthors:\r\n* Sidd Arora (@siddarora)\r\n* William Lam (@davanish)\r\n* Siva Manoharan (@smanoharan)\r\n* Mark Will (@maw41)\r\n\r\n\r\n***\r\n\r\n# 2010 #\r\n\r\n## Top Gear Electrified ##\r\nA group project, developed for COMP242: Software Engineering Process.\r\n\r\nLanguages: C# (using the XNA framework).\r\n\r\nSource: TODO\r\n\r\n# 2009 #\r\n\r\n## 3D Spacecraft Simulator ##\r\nIndividual side project, developed for learning XNA and 3D graphics.\r\n\r\nLanguages: C# (using the XNA framework).\r\n\r\nSource: TODO\r\n\r\n***\r\n\r\n# 2008 #\r\n\r\n## Tactical Wargame ##\r\nA 2-player turn-based strategy game.\r\n\r\nLanguages: Visual Basic (using the DirectX framework).\r\n\r\nSource: Download from TODO\r\n\r\nTODO","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}